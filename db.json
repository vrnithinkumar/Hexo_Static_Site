{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/Notifiaction.png","path":"img/Notifiaction.png","modified":0,"renderable":0},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/Aabout-bg.jpg","path":"img/Aabout-bg.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502610361000},{"_id":"source/.DS_Store","hash":"8e394a1d4d3c17107f1c31c31a1963c26d44174f","modified":1503165571000},{"_id":"source/404.md","hash":"bc7c13312667f3626b578ae9f25047797fa34d73","modified":1502610361000},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1502610361000},{"_id":"themes/huxblog/layout/archive.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502610361000},{"_id":"source/_posts/FSharpInMac.md","hash":"0f8f0f073a7bd73e26e51787fef7a04d9f104e8f","modified":1503516495000},{"_id":"source/_posts/.DS_Store","hash":"a919679694641741cdfa46f5d9e857046593afcb","modified":1503516340000},{"_id":"source/_posts/AssemblerAndLinker.md","hash":"1241ad86f6dd31a09792456723f42c68b81ab8a6","modified":1502610361000},{"_id":"source/_posts/Revert-A-Commit.md","hash":"d490c65b2461939271a80b1aeef82fddca3e865e","modified":1502610361000},{"_id":"source/_posts/Script.md","hash":"db5bb9f6df3836efb95b028105cb2fc113eb30f7","modified":1502610361000},{"_id":"source/_posts/UnBlockDllExtension.md","hash":"a4a0b15efa221a54015af015abb2ae4253475ee4","modified":1502644711000},{"_id":"source/_posts/hello-2015.markdown","hash":"84713ead20d6537cf83e08db693143bfd0b2a8dd","modified":1502610361000},{"_id":"source/about/index.md","hash":"dcda5d1d14b81445a56e81750094b0a665b0401f","modified":1503166882000},{"_id":"source/_posts/vs-regex.md","hash":"c41c9fdf7e3f36f0a07e350033ce70f2376bb01a","modified":1503511896000},{"_id":"source/img/.DS_Store","hash":"41f1e2261942cfbe76df77d69d6566432d59d06a","modified":1503167116000},{"_id":"source/img/Notifiaction.png","hash":"6cab6eeb36046e0989707825ce7070b63b9c335d","modified":1502610361000},{"_id":"source/img/about-bg.jpg","hash":"c8fd63678cab196fcc4a4e7502478a2b8740d6af","modified":1503166717000},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1502610361000},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1502610361000},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1502610361000},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1502610361000},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1502610361000},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1502610361000},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1502610361000},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1502610361000},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1502610361000},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1502610361000},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1502610361000},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1502610361000},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1502610361000},{"_id":"themes/huxblog/layout/index.ejs","hash":"e25cbd9e381fa473198b8edfbd735048926d3812","modified":1502610361000},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"16a4164c3d291131fb66078e8df93b31fe050040","modified":1502610361000},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1502610361000},{"_id":"themes/huxblog/layout/page.ejs","hash":"bcda374e6d03f5fbb453349eb8f3af014528297d","modified":1502610361000},{"_id":"themes/huxblog/layout/post.ejs","hash":"fcde4c712aff62c61627231006a4b5b721c616e9","modified":1502610361000},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1502610361000},{"_id":"source/img/avatar.jpg","hash":"9a048ec08b025ef86f2b16170bc1ffed2320922f","modified":1503165549000},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1502610361000},{"_id":"source/_posts/AssemblerAndLinker/Assembly.jpg","hash":"5a4c5859d040421c624f4a40b02ad94d5988c8f9","modified":1502610361000},{"_id":"source/_posts/FSharpInMac/packet_bootstrap_missing.png","hash":"78e8381e9624cf4f2eb3b77a40c5b9138181705a","modified":1503343938000},{"_id":"source/_posts/FSharpInMac/.DS_Store","hash":"09065f363ef4cc6367edffe687fda3858bf53b95","modified":1503516394000},{"_id":"source/_posts/Revert-A-Commit/Git-Logo.jpg","hash":"ca19baefbb3f95ebd50650dfab16af76b011feef","modified":1502610361000},{"_id":"source/_posts/Script/Notifiaction.png","hash":"6cab6eeb36046e0989707825ce7070b63b9c335d","modified":1502610361000},{"_id":"source/_posts/UnBlockDllExtension/.DS_Store","hash":"2cda6413580724e6a981666858d2dd2c7aacc713","modified":1502640370000},{"_id":"source/_posts/UnBlockDllExtension/NoAccessError.png","hash":"16fe7e6cc5ef96930878f38422ffad8f397a3bf9","modified":1502643863000},{"_id":"source/_posts/UnBlockDllExtension/ResultAfterUnblocking.png","hash":"c0639a8246ed4d173c3e1b4b36e803553c2ab163","modified":1502643882000},{"_id":"source/_posts/UnBlockDllExtension/UnBlockMenuItem.png","hash":"1c62bff2e9eada57dcc4afd380c510baa8cbee54","modified":1502643875000},{"_id":"source/_posts/UnBlockDllExtension/vs.png","hash":"95abf436496a74f3140e1f0e3064ff2a7421f0d7","modified":1502625882000},{"_id":"source/_posts/vs-regex/RegEx.png","hash":"3ca355c762173e16d5de27259480a80e025b75a6","modified":1503163130000},{"_id":"source/_posts/vs-regex/before.png","hash":"b490121950b3e9b2c8fc9ea80f1b719af16829e5","modified":1503163128000},{"_id":"source/_posts/vs-regex/after.png","hash":"db2a76347104c1976db3f3ab23e42321b7faf548","modified":1503163126000},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1502610361000},{"_id":"source/_posts/vs-regex/vs.png","hash":"95abf436496a74f3140e1f0e3064ff2a7421f0d7","modified":1503163131000},{"_id":"source/img/favicon.ico","hash":"d6b21336a582b21f7db76514a80d2b6d857a23e1","modified":1502610361000},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1502610361000},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"4b859c2171054ecba1d70f0eabe09661a9f4f9eb","modified":1502610361000},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1502610361000},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"1affb397a5f08d4ab629c5431cce4df0c5480409","modified":1502610361000},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1502610361000},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1502610361000},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1502610361000},{"_id":"themes/huxblog/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1502610361000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1502610361000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1502610361000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1502610361000},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1502610361000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1502610361000},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1502610361000},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1502610361000},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1502610361000},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1502610361000},{"_id":"source/_posts/AssemblerAndLinker/PE_Windows.PNG","hash":"c3a24beee8ae86fd62d93d5345c3fb1c5b4c7289","modified":1502610361000},{"_id":"source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1502610361000},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1502610361000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1502610361000},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1502610361000},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502610361000},{"_id":"source/_posts/AssemblerAndLinker/Compiler.png","hash":"4e7ff9d715a0c6dc0eeab737ca637e69ab87cdbf","modified":1502610361000},{"_id":"source/_posts/Script/StandUp_760_348.png","hash":"58119bb3cdf59ea661d5664e7c8c209e1a54a798","modified":1502610361000},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1502610361000},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1502610361000},{"_id":"source/_posts/hello-2015/post-bg-2015.jpg","hash":"7118d1af8ac638dc55ee63d0b17e704811c6a37a","modified":1502610361000},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1502610361000},{"_id":"source/_posts/Revert-A-Commit/git.png","hash":"217e632276382918be9c80dca75e3e5f1e66aeac","modified":1502610361000},{"_id":"source/img/Aabout-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1502610361000},{"_id":"public/404.html","hash":"483b3e4ea410d5187337bb3ca2bd2f57bc5f2dc3","modified":1503516444820},{"_id":"public/2016/05/29/hello-2015/index.html","hash":"96ab05d90b739ba7d81a8d8b0bacf86c7b2691c0","modified":1503516444820},{"_id":"public/archives/index.html","hash":"c2ed92ddb0a97459530d09c6aff9567a9613b684","modified":1503516444821},{"_id":"public/archives/2016/index.html","hash":"002173fc56f16a8a21dceb8b2bb7a458361394e1","modified":1503516444821},{"_id":"public/archives/2016/05/index.html","hash":"d8da1cb4e03d15237d6981d5952a0b7b0f4aa2f9","modified":1503516444821},{"_id":"public/archives/2016/06/index.html","hash":"4bbfdc4bbc574ddc04e8496d209e22f310c71d0f","modified":1503516444821},{"_id":"public/archives/2016/12/index.html","hash":"2fdc3f8fa48d0a96cb940c19aa5dc48674f3d6eb","modified":1503516444821},{"_id":"public/archives/2017/index.html","hash":"b325e25e99c1d654925db5a922de71fa5aa3f0a5","modified":1503516444821},{"_id":"public/archives/2017/08/index.html","hash":"da99223e79783d27f3c2848ac8cc39bb8f0fe2cc","modified":1503516444821},{"_id":"public/tags/Compiler/index.html","hash":"c861af9bbe202182299727bd771cbbea54dc2778","modified":1503516444821},{"_id":"public/tags/Assembler/index.html","hash":"43fba6083b08a51f51348aec4d88f91a89f77057","modified":1503516444821},{"_id":"public/tags/Linker/index.html","hash":"126f7062ca43e3457a648a6588b725d8606d2c22","modified":1503516444823},{"_id":"public/tags/Git/index.html","hash":"8eb501c047f1365c7f79074239f04fccd189beef","modified":1503516444823},{"_id":"public/tags/Version-Control/index.html","hash":"7bbcdbe945780361ec135ff4ddfb1409ea442017","modified":1503516444823},{"_id":"public/tags/Powershell/index.html","hash":"c8bf4ec069420a4740ff11cdfe935e79a13ed2d3","modified":1503516444823},{"_id":"public/tags/Scripting/index.html","hash":"69a214d6526e66c8459ee96a723f73228e3886c5","modified":1503516444823},{"_id":"public/tags/VisualStdio/index.html","hash":"36e576caa0867fbec61e0a0890adcb09d51d0dc6","modified":1503516444823},{"_id":"public/tags/Extension/index.html","hash":"a49224a630a1d086bc197cfb1923f9b8c686ffcf","modified":1503516444823},{"_id":"public/tags/random/index.html","hash":"2cd8a7cb18776581471d51d1fa1b16daf4648340","modified":1503516444823},{"_id":"public/tags/RegEx/index.html","hash":"93b387040e45ed67a40e74c6086b4822d73a98f9","modified":1503516444824},{"_id":"public/tags/index.html","hash":"c796992099e312f4f3d73e82b7e163f572c4bb6d","modified":1503516500205},{"_id":"public/2017/08/19/vs-regex/index.html","hash":"efedba293aa61cabc7468e6be016eec6c029d5de","modified":1503516500210},{"_id":"public/2017/08/13/UnBlockDllExtension/index.html","hash":"d482d66b4ca35b3d62973eb5137d7d5e478e87e6","modified":1503516444824},{"_id":"public/2016/12/04/AssemblerAndLinker/index.html","hash":"a73ae3e3b72d3b62ef65062d51bf4d0c684e9e5f","modified":1503516444824},{"_id":"public/2016/06/06/Script/index.html","hash":"379a986816a57be1c60711a7c706e160cabe3b32","modified":1503516444824},{"_id":"public/2016/05/30/Revert-A-Commit/index.html","hash":"ace66cecd3b2f1eb613bad8e42234197e9c8193d","modified":1503516444825},{"_id":"public/about/index.html","hash":"00b60d1dd4c5281b6c6e0385bbfd51bdbe30cf28","modified":1503516500211},{"_id":"public/index.html","hash":"1fff7eed29208928310a9bdf88427d1aa10144e3","modified":1503516500211},{"_id":"public/img/Notifiaction.png","hash":"6cab6eeb36046e0989707825ce7070b63b9c335d","modified":1503516444839},{"_id":"public/img/about-bg.jpg","hash":"c8fd63678cab196fcc4a4e7502478a2b8740d6af","modified":1503516444839},{"_id":"public/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1503516444839},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1503516444839},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1503516444839},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1503516444839},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1503516444840},{"_id":"public/2016/05/30/Revert-A-Commit/Git-Logo.jpg","hash":"ca19baefbb3f95ebd50650dfab16af76b011feef","modified":1503516444840},{"_id":"public/2016/06/06/Script/Notifiaction.png","hash":"6cab6eeb36046e0989707825ce7070b63b9c335d","modified":1503516444840},{"_id":"public/2016/12/04/AssemblerAndLinker/Assembly.jpg","hash":"5a4c5859d040421c624f4a40b02ad94d5988c8f9","modified":1503516444840},{"_id":"public/2017/08/13/UnBlockDllExtension/NoAccessError.png","hash":"16fe7e6cc5ef96930878f38422ffad8f397a3bf9","modified":1503516444840},{"_id":"public/2017/08/13/UnBlockDllExtension/ResultAfterUnblocking.png","hash":"c0639a8246ed4d173c3e1b4b36e803553c2ab163","modified":1503516444840},{"_id":"public/2017/08/13/UnBlockDllExtension/UnBlockMenuItem.png","hash":"1c62bff2e9eada57dcc4afd380c510baa8cbee54","modified":1503516444840},{"_id":"public/2017/08/13/UnBlockDllExtension/vs.png","hash":"95abf436496a74f3140e1f0e3064ff2a7421f0d7","modified":1503516444840},{"_id":"public/2017/08/19/vs-regex/RegEx.png","hash":"3ca355c762173e16d5de27259480a80e025b75a6","modified":1503516444840},{"_id":"public/2017/08/19/vs-regex/after.png","hash":"db2a76347104c1976db3f3ab23e42321b7faf548","modified":1503516444840},{"_id":"public/2017/08/19/vs-regex/before.png","hash":"b490121950b3e9b2c8fc9ea80f1b719af16829e5","modified":1503516444841},{"_id":"public/2017/08/19/vs-regex/vs.png","hash":"95abf436496a74f3140e1f0e3064ff2a7421f0d7","modified":1503516444841},{"_id":"public/img/avatar.jpg","hash":"9a048ec08b025ef86f2b16170bc1ffed2320922f","modified":1503516445236},{"_id":"public/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1503516445237},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1503516445240},{"_id":"public/2016/12/04/AssemblerAndLinker/PE_Windows.PNG","hash":"c3a24beee8ae86fd62d93d5345c3fb1c5b4c7289","modified":1503516445240},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1503516445244},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1503516445244},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1503516445244},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1503516445244},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1503516445244},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1503516445244},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1503516445244},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1503516445244},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1503516445245},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1503516445245},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1503516445245},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1503516445245},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1503516445245},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1503516445245},{"_id":"public/img/favicon.ico","hash":"d6b21336a582b21f7db76514a80d2b6d857a23e1","modified":1503516445245},{"_id":"public/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1503516445245},{"_id":"public/2016/12/04/AssemblerAndLinker/Compiler.png","hash":"4e7ff9d715a0c6dc0eeab737ca637e69ab87cdbf","modified":1503516445246},{"_id":"public/2016/06/06/Script/StandUp_760_348.png","hash":"58119bb3cdf59ea661d5664e7c8c209e1a54a798","modified":1503516445246},{"_id":"public/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1503516445253},{"_id":"public/2016/05/29/hello-2015/post-bg-2015.jpg","hash":"7118d1af8ac638dc55ee63d0b17e704811c6a37a","modified":1503516445253},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1503516445259},{"_id":"public/2016/05/30/Revert-A-Commit/git.png","hash":"217e632276382918be9c80dca75e3e5f1e66aeac","modified":1503516445260},{"_id":"public/img/Aabout-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1503516445265},{"_id":"public/tags/F/index.html","hash":"289c4c9d45b1ed917e2e87452cffe87a1d1efa8c","modified":1503516500212},{"_id":"public/tags/Mac/index.html","hash":"3a039de3e63a843031c1aaa7e12a824c94290288","modified":1503516500212},{"_id":"public/2017/08/22/FSharpInMac/index.html","hash":"5d628905cce97f9c1ee71dbd9edf80b313f4ba71","modified":1503516500212},{"_id":"public/2017/08/22/FSharpInMac/packet_bootstrap_missing.png","hash":"78e8381e9624cf4f2eb3b77a40c5b9138181705a","modified":1503516500215}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"Error 404: Resource not found. :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"Error 404: Resource not found. :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2017-08-13T07:46:01.000Z","updated":"2017-08-13T07:46:01.000Z","path":"404.html","title":"","comments":1,"_id":"cj6pevd710000vmutz4iqyutd","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T23:18:33.000Z","description":"","header-img":"img/about-bg.jpg","_content":"I’m a computer programmer, interested in compiler and programming languages.\n\nമലയാളി, A Liverpool fan, An atheist. Interested in things like religion, atheism, politics, communism, socialism, economics, history, and philosophy.\n\nYou can reach me over email(vrnithinkumar{at}gmail{dot}com).","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"\"\nheader-img: \"img/about-bg.jpg\"\n---\nI’m a computer programmer, interested in compiler and programming languages.\n\nമലയാളി, A Liverpool fan, An atheist. Interested in things like religion, atheism, politics, communism, socialism, economics, history, and philosophy.\n\nYou can reach me over email(vrnithinkumar{at}gmail{dot}com).","updated":"2017-08-19T18:21:22.000Z","path":"about/index.html","comments":1,"_id":"cj6pevd870002vmutp9xkkqlf","content":"<p>I’m a computer programmer, interested in compiler and programming languages.</p>\n<p>മലയാളി, A Liverpool fan, An atheist. Interested in things like religion, atheism, politics, communism, socialism, economics, history, and philosophy.</p>\n<p>You can reach me over email(vrnithinkumar{at}gmail{dot}com).</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I’m a computer programmer, interested in compiler and programming languages.</p>\n<p>മലയാളി, A Liverpool fan, An atheist. Interested in things like religion, atheism, politics, communism, socialism, economics, history, and philosophy.</p>\n<p>You can reach me over email(vrnithinkumar{at}gmail{dot}com).</p>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-08-13T07:46:01.000Z","updated":"2017-08-13T07:46:01.000Z","path":"tags/index.html","comments":1,"_id":"cj6pevd8b0004vmutwhujgl90","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"Assembler & Linker","date":"2016-12-03T18:40:03.000Z","subtitle":"","author":"Nithin VR","header-img":"Assembly.jpg","catalog":true,"_content":"## Introduction\n\nBetween compiling and executing a High-Level programming language, Many intermediate steps like Lexical Analyzing, Syntax Analyzing, Semantic Analyzing, Pre Optimizing, Assembly Code generation, Post Optimizing,  Assembling,  Linking and Loading are happening. In this post we are mainly covering \n  - Assembler\n  - Linker\n  - Loader\n  - Disassembler\n\n### Assembler\n\nAssembler will create  object code from the assembly code. After Assembly Code generation and Post Optimizing, the generated assembly code is translated to Object code. Assembly Language aka **asm** is low-level programming language which is specific for CPU architecture. Its actually human readable representation of machine code.\nFor example:\nAssembly Code for moving value 55 hex into register BL\n\n    MOV BL, 055H\n\nCorresponding Machine Code\n\n    10111000\n\nAn assembler will generate object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents. Each object code file combined to create the executable file.\n\n**In short, assembler will** \n - Translate assembly instructions, macros, and  pseudo-instructions into binary machine instructions\n - Convert decimal numbers, etc. specified by programmer into binary.\n - Put the translated instructions into a file for future use.\n\n**Types of Assemblers**\n\n** 1) Two pass assembler **\nIn two pass assembler we use two pass to complete generation of machine code. First pass we will create a symbol table **(SYMTAB)** where we keep all the symbols and their values. Any unknown values or addressed we encounter we will add it to the symbol table and update it when we encounter that value in future. For example \n\n    10 JMP LOOP_END \t\\\\ Address of label2 is unknown we add this to symbol table.\n    11 ADD  EAX EBX\n    12 LOOP_END:       \\\\ Here we update the symbol table with actual address.\n    \n    Symbol Table \n\n    | Symbol Name | Symbol Value |\n    |:-----------:|:------------:|\n    |    LOOP_END |      12      |\n    |    Label2   |      18      |\n\nUsing the symbol table we will create valid machine code on the second pass.\n\n**2) One pass assembler**\nIn one pass assembler, we convert the whole assembly code in to machine code by one pass unlike two pass assembler. We keep different type of symbol table where each unknown symbols and all locations it used are stored. Whenever we encounter the initialization of the symbol we will check the symbol table and go back to  update all places it used with the actual value. \n\n**Object File** \n\nObject files are group of blocks of information about the program in binary format. Blocks contain program code,  program data, and data structures that guide the linker and loader. Its the output from the assembler there are different forms of object file based on how it used.: \n 1. **Relocatable object file**. Contains binary code and data in a form that can be combined with other relocatable object files at compile time to create an executable object file.\n 2. **Executable object file**. Contains binary code and data in a form that can be copied directly into memory and executed.\n 3. **Shared object file**. A special type of relocatable object file that can be loaded into memory and linked dynamically, at either load time or run time.  \n\nCommon object file formats\n - **COFF :** Common Object File format. Windows uses a variant of COFF called the Portable Executable (PE) format.\n - **ELF :** Executable and Linkable Format Mainly used in Linux.\n\n### Linker\nLinker will take all the object file created by the assembler and combine them into a single executable file , library or another big object file.Which can be be loaded to the memory and execute. It enable separate compilation and gives modularity to big programs.\n\n- **Symbol resolution.** \nObject files define and reference symbols. The purpose of symbol resolution is to associate each symbol reference with exactly one symbol definition.\n\n- **Relocation.** \nCompilers and assemblers generate code and data sections that start at address 0. The linker relocates these sections by associating a memory location with each symbol definition, and then modifying all of the references to those symbols so that they point to this memory location.\n\n- **Static linkers.**\nSuch as the Unix ld program take as input a collection of relocatable object files and command line arguments and generate as output a fully linked executable object file that can be loaded and run.","source":"_posts/AssemblerAndLinker.md","raw":"---\nlayout:     post\ntitle: Assembler & Linker\ndate: 2016-12-04 00:10:03\nsubtitle: \"\"\nauthor:     \"Nithin VR\"\nheader-img: \"Assembly.jpg\"\ncatalog: true\ntags:\n  - Compiler\n  - Assembler\n  - Linker\n---\n## Introduction\n\nBetween compiling and executing a High-Level programming language, Many intermediate steps like Lexical Analyzing, Syntax Analyzing, Semantic Analyzing, Pre Optimizing, Assembly Code generation, Post Optimizing,  Assembling,  Linking and Loading are happening. In this post we are mainly covering \n  - Assembler\n  - Linker\n  - Loader\n  - Disassembler\n\n### Assembler\n\nAssembler will create  object code from the assembly code. After Assembly Code generation and Post Optimizing, the generated assembly code is translated to Object code. Assembly Language aka **asm** is low-level programming language which is specific for CPU architecture. Its actually human readable representation of machine code.\nFor example:\nAssembly Code for moving value 55 hex into register BL\n\n    MOV BL, 055H\n\nCorresponding Machine Code\n\n    10111000\n\nAn assembler will generate object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents. Each object code file combined to create the executable file.\n\n**In short, assembler will** \n - Translate assembly instructions, macros, and  pseudo-instructions into binary machine instructions\n - Convert decimal numbers, etc. specified by programmer into binary.\n - Put the translated instructions into a file for future use.\n\n**Types of Assemblers**\n\n** 1) Two pass assembler **\nIn two pass assembler we use two pass to complete generation of machine code. First pass we will create a symbol table **(SYMTAB)** where we keep all the symbols and their values. Any unknown values or addressed we encounter we will add it to the symbol table and update it when we encounter that value in future. For example \n\n    10 JMP LOOP_END \t\\\\ Address of label2 is unknown we add this to symbol table.\n    11 ADD  EAX EBX\n    12 LOOP_END:       \\\\ Here we update the symbol table with actual address.\n    \n    Symbol Table \n\n    | Symbol Name | Symbol Value |\n    |:-----------:|:------------:|\n    |    LOOP_END |      12      |\n    |    Label2   |      18      |\n\nUsing the symbol table we will create valid machine code on the second pass.\n\n**2) One pass assembler**\nIn one pass assembler, we convert the whole assembly code in to machine code by one pass unlike two pass assembler. We keep different type of symbol table where each unknown symbols and all locations it used are stored. Whenever we encounter the initialization of the symbol we will check the symbol table and go back to  update all places it used with the actual value. \n\n**Object File** \n\nObject files are group of blocks of information about the program in binary format. Blocks contain program code,  program data, and data structures that guide the linker and loader. Its the output from the assembler there are different forms of object file based on how it used.: \n 1. **Relocatable object file**. Contains binary code and data in a form that can be combined with other relocatable object files at compile time to create an executable object file.\n 2. **Executable object file**. Contains binary code and data in a form that can be copied directly into memory and executed.\n 3. **Shared object file**. A special type of relocatable object file that can be loaded into memory and linked dynamically, at either load time or run time.  \n\nCommon object file formats\n - **COFF :** Common Object File format. Windows uses a variant of COFF called the Portable Executable (PE) format.\n - **ELF :** Executable and Linkable Format Mainly used in Linux.\n\n### Linker\nLinker will take all the object file created by the assembler and combine them into a single executable file , library or another big object file.Which can be be loaded to the memory and execute. It enable separate compilation and gives modularity to big programs.\n\n- **Symbol resolution.** \nObject files define and reference symbols. The purpose of symbol resolution is to associate each symbol reference with exactly one symbol definition.\n\n- **Relocation.** \nCompilers and assemblers generate code and data sections that start at address 0. The linker relocates these sections by associating a memory location with each symbol definition, and then modifying all of the references to those symbols so that they point to this memory location.\n\n- **Static linkers.**\nSuch as the Unix ld program take as input a collection of relocatable object files and command line arguments and generate as output a fully linked executable object file that can be loaded and run.","slug":"AssemblerAndLinker","published":1,"updated":"2017-08-13T07:46:01.000Z","comments":1,"photos":[],"link":"","_id":"cj6pevd840001vmutmtv5jiov","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Between compiling and executing a High-Level programming language, Many intermediate steps like Lexical Analyzing, Syntax Analyzing, Semantic Analyzing, Pre Optimizing, Assembly Code generation, Post Optimizing,  Assembling,  Linking and Loading are happening. In this post we are mainly covering </p>\n<ul>\n<li>Assembler</li>\n<li>Linker</li>\n<li>Loader</li>\n<li>Disassembler</li>\n</ul>\n<h3 id=\"Assembler\"><a href=\"#Assembler\" class=\"headerlink\" title=\"Assembler\"></a>Assembler</h3><p>Assembler will create  object code from the assembly code. After Assembly Code generation and Post Optimizing, the generated assembly code is translated to Object code. Assembly Language aka <strong>asm</strong> is low-level programming language which is specific for CPU architecture. Its actually human readable representation of machine code.<br>For example:<br>Assembly Code for moving value 55 hex into register BL</p>\n<pre><code>MOV BL, 055H\n</code></pre><p>Corresponding Machine Code</p>\n<pre><code>10111000\n</code></pre><p>An assembler will generate object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents. Each object code file combined to create the executable file.</p>\n<p><strong>In short, assembler will</strong> </p>\n<ul>\n<li>Translate assembly instructions, macros, and  pseudo-instructions into binary machine instructions</li>\n<li>Convert decimal numbers, etc. specified by programmer into binary.</li>\n<li>Put the translated instructions into a file for future use.</li>\n</ul>\n<p><strong>Types of Assemblers</strong></p>\n<p><strong> 1) Two pass assembler </strong><br>In two pass assembler we use two pass to complete generation of machine code. First pass we will create a symbol table <strong>(SYMTAB)</strong> where we keep all the symbols and their values. Any unknown values or addressed we encounter we will add it to the symbol table and update it when we encounter that value in future. For example </p>\n<pre><code>10 JMP LOOP_END     \\\\ Address of label2 is unknown we add this to symbol table.\n11 ADD  EAX EBX\n12 LOOP_END:       \\\\ Here we update the symbol table with actual address.\n\nSymbol Table \n\n| Symbol Name | Symbol Value |\n|:-----------:|:------------:|\n|    LOOP_END |      12      |\n|    Label2   |      18      |\n</code></pre><p>Using the symbol table we will create valid machine code on the second pass.</p>\n<p><strong>2) One pass assembler</strong><br>In one pass assembler, we convert the whole assembly code in to machine code by one pass unlike two pass assembler. We keep different type of symbol table where each unknown symbols and all locations it used are stored. Whenever we encounter the initialization of the symbol we will check the symbol table and go back to  update all places it used with the actual value. </p>\n<p><strong>Object File</strong> </p>\n<p>Object files are group of blocks of information about the program in binary format. Blocks contain program code,  program data, and data structures that guide the linker and loader. Its the output from the assembler there are different forms of object file based on how it used.: </p>\n<ol>\n<li><strong>Relocatable object file</strong>. Contains binary code and data in a form that can be combined with other relocatable object files at compile time to create an executable object file.</li>\n<li><strong>Executable object file</strong>. Contains binary code and data in a form that can be copied directly into memory and executed.</li>\n<li><strong>Shared object file</strong>. A special type of relocatable object file that can be loaded into memory and linked dynamically, at either load time or run time.  </li>\n</ol>\n<p>Common object file formats</p>\n<ul>\n<li><strong>COFF :</strong> Common Object File format. Windows uses a variant of COFF called the Portable Executable (PE) format.</li>\n<li><strong>ELF :</strong> Executable and Linkable Format Mainly used in Linux.</li>\n</ul>\n<h3 id=\"Linker\"><a href=\"#Linker\" class=\"headerlink\" title=\"Linker\"></a>Linker</h3><p>Linker will take all the object file created by the assembler and combine them into a single executable file , library or another big object file.Which can be be loaded to the memory and execute. It enable separate compilation and gives modularity to big programs.</p>\n<ul>\n<li><p><strong>Symbol resolution.</strong><br>Object files define and reference symbols. The purpose of symbol resolution is to associate each symbol reference with exactly one symbol definition.</p>\n</li>\n<li><p><strong>Relocation.</strong><br>Compilers and assemblers generate code and data sections that start at address 0. The linker relocates these sections by associating a memory location with each symbol definition, and then modifying all of the references to those symbols so that they point to this memory location.</p>\n</li>\n<li><p><strong>Static linkers.</strong><br>Such as the Unix ld program take as input a collection of relocatable object files and command line arguments and generate as output a fully linked executable object file that can be loaded and run.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Between compiling and executing a High-Level programming language, Many intermediate steps like Lexical Analyzing, Syntax Analyzing, Semantic Analyzing, Pre Optimizing, Assembly Code generation, Post Optimizing,  Assembling,  Linking and Loading are happening. In this post we are mainly covering </p>\n<ul>\n<li>Assembler</li>\n<li>Linker</li>\n<li>Loader</li>\n<li>Disassembler</li>\n</ul>\n<h3 id=\"Assembler\"><a href=\"#Assembler\" class=\"headerlink\" title=\"Assembler\"></a>Assembler</h3><p>Assembler will create  object code from the assembly code. After Assembly Code generation and Post Optimizing, the generated assembly code is translated to Object code. Assembly Language aka <strong>asm</strong> is low-level programming language which is specific for CPU architecture. Its actually human readable representation of machine code.<br>For example:<br>Assembly Code for moving value 55 hex into register BL</p>\n<pre><code>MOV BL, 055H\n</code></pre><p>Corresponding Machine Code</p>\n<pre><code>10111000\n</code></pre><p>An assembler will generate object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents. Each object code file combined to create the executable file.</p>\n<p><strong>In short, assembler will</strong> </p>\n<ul>\n<li>Translate assembly instructions, macros, and  pseudo-instructions into binary machine instructions</li>\n<li>Convert decimal numbers, etc. specified by programmer into binary.</li>\n<li>Put the translated instructions into a file for future use.</li>\n</ul>\n<p><strong>Types of Assemblers</strong></p>\n<p><strong> 1) Two pass assembler </strong><br>In two pass assembler we use two pass to complete generation of machine code. First pass we will create a symbol table <strong>(SYMTAB)</strong> where we keep all the symbols and their values. Any unknown values or addressed we encounter we will add it to the symbol table and update it when we encounter that value in future. For example </p>\n<pre><code>10 JMP LOOP_END     \\\\ Address of label2 is unknown we add this to symbol table.\n11 ADD  EAX EBX\n12 LOOP_END:       \\\\ Here we update the symbol table with actual address.\n\nSymbol Table \n\n| Symbol Name | Symbol Value |\n|:-----------:|:------------:|\n|    LOOP_END |      12      |\n|    Label2   |      18      |\n</code></pre><p>Using the symbol table we will create valid machine code on the second pass.</p>\n<p><strong>2) One pass assembler</strong><br>In one pass assembler, we convert the whole assembly code in to machine code by one pass unlike two pass assembler. We keep different type of symbol table where each unknown symbols and all locations it used are stored. Whenever we encounter the initialization of the symbol we will check the symbol table and go back to  update all places it used with the actual value. </p>\n<p><strong>Object File</strong> </p>\n<p>Object files are group of blocks of information about the program in binary format. Blocks contain program code,  program data, and data structures that guide the linker and loader. Its the output from the assembler there are different forms of object file based on how it used.: </p>\n<ol>\n<li><strong>Relocatable object file</strong>. Contains binary code and data in a form that can be combined with other relocatable object files at compile time to create an executable object file.</li>\n<li><strong>Executable object file</strong>. Contains binary code and data in a form that can be copied directly into memory and executed.</li>\n<li><strong>Shared object file</strong>. A special type of relocatable object file that can be loaded into memory and linked dynamically, at either load time or run time.  </li>\n</ol>\n<p>Common object file formats</p>\n<ul>\n<li><strong>COFF :</strong> Common Object File format. Windows uses a variant of COFF called the Portable Executable (PE) format.</li>\n<li><strong>ELF :</strong> Executable and Linkable Format Mainly used in Linux.</li>\n</ul>\n<h3 id=\"Linker\"><a href=\"#Linker\" class=\"headerlink\" title=\"Linker\"></a>Linker</h3><p>Linker will take all the object file created by the assembler and combine them into a single executable file , library or another big object file.Which can be be loaded to the memory and execute. It enable separate compilation and gives modularity to big programs.</p>\n<ul>\n<li><p><strong>Symbol resolution.</strong><br>Object files define and reference symbols. The purpose of symbol resolution is to associate each symbol reference with exactly one symbol definition.</p>\n</li>\n<li><p><strong>Relocation.</strong><br>Compilers and assemblers generate code and data sections that start at address 0. The linker relocates these sections by associating a memory location with each symbol definition, and then modifying all of the references to those symbols so that they point to this memory location.</p>\n</li>\n<li><p><strong>Static linkers.</strong><br>Such as the Unix ld program take as input a collection of relocatable object files and command line arguments and generate as output a fully linked executable object file that can be loaded and run.</p>\n</li>\n</ul>\n"},{"layout":"post","title":"Revert a Commit Which Already Pushed to a Remote Repository","date":"2016-05-29T18:40:03.000Z","subtitle":"","author":"Nithin VR","header-img":"git.png","catalog":true,"_content":"You’ve just pushed your local branch to a remote branch, but then  realized that some errors happened.\n\nEg:\n* That there was  some unacceptable typo in commit message.\n* You just added a unwanted file like ~files or class file.\n\n\nDon't worry you can revert it to back to your previous safe commit by reverting your current commit.\n\n>$ git reset HEAD^ --hard\n>\n>$ git push origin master -f    \n\n\n**First step** reset the branch to the parent of the current commit.\n**Second step** force-push it to the remote.\n\n---\n[More Details: Revert a commit already pushed to a remote repository -Christoph Rüegg](http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html)\n","source":"_posts/Revert-A-Commit.md","raw":"---\nlayout:     post\ntitle: Revert a Commit Which Already Pushed to a Remote Repository\ndate: 2016-05-30 00:10:03\nsubtitle: \"\"\nauthor:     \"Nithin VR\"\nheader-img: \"git.png\"\ncatalog: true\ntags:\n\t- Git\n\t- Version Control\n---\nYou’ve just pushed your local branch to a remote branch, but then  realized that some errors happened.\n\nEg:\n* That there was  some unacceptable typo in commit message.\n* You just added a unwanted file like ~files or class file.\n\n\nDon't worry you can revert it to back to your previous safe commit by reverting your current commit.\n\n>$ git reset HEAD^ --hard\n>\n>$ git push origin master -f    \n\n\n**First step** reset the branch to the parent of the current commit.\n**Second step** force-push it to the remote.\n\n---\n[More Details: Revert a commit already pushed to a remote repository -Christoph Rüegg](http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html)\n","slug":"Revert-A-Commit","published":1,"updated":"2017-08-13T07:46:01.000Z","comments":1,"photos":[],"link":"","_id":"cj6pevd890003vmut1rzw0wh4","content":"<p>You’ve just pushed your local branch to a remote branch, but then  realized that some errors happened.</p>\n<p>Eg:</p>\n<ul>\n<li>That there was  some unacceptable typo in commit message.</li>\n<li>You just added a unwanted file like ~files or class file.</li>\n</ul>\n<p>Don’t worry you can revert it to back to your previous safe commit by reverting your current commit.</p>\n<blockquote>\n<p>$ git reset HEAD^ –hard</p>\n<p>$ git push origin master -f    </p>\n</blockquote>\n<p><strong>First step</strong> reset the branch to the parent of the current commit.<br><strong>Second step</strong> force-push it to the remote.</p>\n<hr>\n<p><a href=\"http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html\" target=\"_blank\" rel=\"external\">More Details: Revert a commit already pushed to a remote repository -Christoph Rüegg</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>You’ve just pushed your local branch to a remote branch, but then  realized that some errors happened.</p>\n<p>Eg:</p>\n<ul>\n<li>That there was  some unacceptable typo in commit message.</li>\n<li>You just added a unwanted file like ~files or class file.</li>\n</ul>\n<p>Don’t worry you can revert it to back to your previous safe commit by reverting your current commit.</p>\n<blockquote>\n<p>$ git reset HEAD^ –hard</p>\n<p>$ git push origin master -f    </p>\n</blockquote>\n<p><strong>First step</strong> reset the branch to the parent of the current commit.<br><strong>Second step</strong> force-push it to the remote.</p>\n<hr>\n<p><a href=\"http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html\" target=\"_blank\" rel=\"external\">More Details: Revert a commit already pushed to a remote repository -Christoph Rüegg</a></p>\n"},{"layout":"post","title":"Stand Up Script","subtitle":" \"Powershell script to remind you stand up and take break while you work continuously \"","date":"2016-06-06T08:30:00.000Z","author":"Nithin VR","header-img":"StandUp_760_348.png","catalog":true,"_content":"\n# Stand Up Script\n\nPowershell script that will alert at each hour by Desktop notification as well as using beep sound. To avoid continues sitting and working this script will help to remind to stand up or relax each hour. It will lock the PC at each hour too :)\n\n### What does it do\n\n> - It will beep according to the time.\n> - Show Desktop notification with time and message.\n> -  Lock the the computer automatically after the notification.\n\n*Screen Shot of Notification:*\n![alt text](/img/Notifiaction.png \"\")\n\n### To Do\n\n> - Get time interval for notification from user as command line parameter.\n> - Change the busy waiting to sleep.\n> - Re-factor the code.\n\n### How to Run it\n\n>  - Download the script from [github](https://github.com/vrnithinkumar/powershell/blob/master/StandUpAlarm.ps1).\n>  -  Run `powershell StandUpAlaram.ps1`\n\nPlease feel free to send the feedback, bug, or any suggestions.\n","source":"_posts/Script.md","raw":"---\nlayout: post\ntitle: \"Stand Up Script\"\nsubtitle: \" \\\"Powershell script to remind you stand up and take break while you work continuously \\\"\"\ndate: 2016-06-06 14:00:00\nauthor: \"Nithin VR\"\nheader-img: \"StandUp_760_348.png\"\ncatalog: true\ntags:\n    - Powershell\n    - Scripting\n---\n\n# Stand Up Script\n\nPowershell script that will alert at each hour by Desktop notification as well as using beep sound. To avoid continues sitting and working this script will help to remind to stand up or relax each hour. It will lock the PC at each hour too :)\n\n### What does it do\n\n> - It will beep according to the time.\n> - Show Desktop notification with time and message.\n> -  Lock the the computer automatically after the notification.\n\n*Screen Shot of Notification:*\n![alt text](/img/Notifiaction.png \"\")\n\n### To Do\n\n> - Get time interval for notification from user as command line parameter.\n> - Change the busy waiting to sleep.\n> - Re-factor the code.\n\n### How to Run it\n\n>  - Download the script from [github](https://github.com/vrnithinkumar/powershell/blob/master/StandUpAlarm.ps1).\n>  -  Run `powershell StandUpAlaram.ps1`\n\nPlease feel free to send the feedback, bug, or any suggestions.\n","slug":"Script","published":1,"updated":"2017-08-13T07:46:01.000Z","comments":1,"photos":[],"link":"","_id":"cj6pevd8e0006vmutxdom9zjw","content":"<h1 id=\"Stand-Up-Script\"><a href=\"#Stand-Up-Script\" class=\"headerlink\" title=\"Stand Up Script\"></a>Stand Up Script</h1><p>Powershell script that will alert at each hour by Desktop notification as well as using beep sound. To avoid continues sitting and working this script will help to remind to stand up or relax each hour. It will lock the PC at each hour too :)</p>\n<h3 id=\"What-does-it-do\"><a href=\"#What-does-it-do\" class=\"headerlink\" title=\"What does it do\"></a>What does it do</h3><blockquote>\n<ul>\n<li>It will beep according to the time.</li>\n<li>Show Desktop notification with time and message.</li>\n<li>Lock the the computer automatically after the notification.</li>\n</ul>\n</blockquote>\n<p><em>Screen Shot of Notification:</em><br><img src=\"/img/Notifiaction.png\" alt=\"alt text\"></p>\n<h3 id=\"To-Do\"><a href=\"#To-Do\" class=\"headerlink\" title=\"To Do\"></a>To Do</h3><blockquote>\n<ul>\n<li>Get time interval for notification from user as command line parameter.</li>\n<li>Change the busy waiting to sleep.</li>\n<li>Re-factor the code.</li>\n</ul>\n</blockquote>\n<h3 id=\"How-to-Run-it\"><a href=\"#How-to-Run-it\" class=\"headerlink\" title=\"How to Run it\"></a>How to Run it</h3><blockquote>\n<ul>\n<li>Download the script from <a href=\"https://github.com/vrnithinkumar/powershell/blob/master/StandUpAlarm.ps1\" target=\"_blank\" rel=\"external\">github</a>.</li>\n<li>Run <code>powershell StandUpAlaram.ps1</code></li>\n</ul>\n</blockquote>\n<p>Please feel free to send the feedback, bug, or any suggestions.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Stand-Up-Script\"><a href=\"#Stand-Up-Script\" class=\"headerlink\" title=\"Stand Up Script\"></a>Stand Up Script</h1><p>Powershell script that will alert at each hour by Desktop notification as well as using beep sound. To avoid continues sitting and working this script will help to remind to stand up or relax each hour. It will lock the PC at each hour too :)</p>\n<h3 id=\"What-does-it-do\"><a href=\"#What-does-it-do\" class=\"headerlink\" title=\"What does it do\"></a>What does it do</h3><blockquote>\n<ul>\n<li>It will beep according to the time.</li>\n<li>Show Desktop notification with time and message.</li>\n<li>Lock the the computer automatically after the notification.</li>\n</ul>\n</blockquote>\n<p><em>Screen Shot of Notification:</em><br><img src=\"/img/Notifiaction.png\" alt=\"alt text\"></p>\n<h3 id=\"To-Do\"><a href=\"#To-Do\" class=\"headerlink\" title=\"To Do\"></a>To Do</h3><blockquote>\n<ul>\n<li>Get time interval for notification from user as command line parameter.</li>\n<li>Change the busy waiting to sleep.</li>\n<li>Re-factor the code.</li>\n</ul>\n</blockquote>\n<h3 id=\"How-to-Run-it\"><a href=\"#How-to-Run-it\" class=\"headerlink\" title=\"How to Run it\"></a>How to Run it</h3><blockquote>\n<ul>\n<li>Download the script from <a href=\"https://github.com/vrnithinkumar/powershell/blob/master/StandUpAlarm.ps1\" target=\"_blank\" rel=\"external\">github</a>.</li>\n<li>Run <code>powershell StandUpAlaram.ps1</code></li>\n</ul>\n</blockquote>\n<p>Please feel free to send the feedback, bug, or any suggestions.</p>\n"},{"layout":"post","title":"Unblock Dll Extension","subtitle":" \"A helper extension remove extension dll from Visual Studio.\"","date":"2017-08-13T08:30:00.000Z","author":"Nithin VR","header-img":"vs.png","catalog":true,"_content":"## No Access Error in Visual Studio\nThe given below error is very common, frustrating and encountered by many Visual Studio users.\n```\nUnable to copy file \"obj\\Debug\\project.pdb\" to \"bin\\project.pdb\". Access to the path 'bin\\project.pdb' is denied.\n```\nIt was caused by the pdb or dll file made read only or hidden by the Visual studio itself. If you just remove those attributes from that file this error will go away. But the process is little ve\n[StackOverflow question](https://stackoverflow.com/questions/9750101/unable-to-copy-file-access-to-the-path-is-denied/12740768?noredirect=1#comment75731595_12740768)\nNo Access to the path error look like this:\n![Alt text](/2017/08/13/UnBlockDllExtension/NoAccessError.png \"No Access Error.\")<br />\n# Unblock Dll Extension\nA tiny helper to remove the ReadOnly and Hidden attribute from dll's and executables which blocking the Visual Studio from building the project. Link to download \n### What does it do\nRight click on the Error List window and click the Unblock Files menu item.\n![alt text](/2017/08/13/UnBlockDllExtension/UnBlockMenuItem.png \"Menu Item in Error Window.\")\nResult of the action will be shown in message box like this : \n![alt text](/2017/08/13/UnBlockDllExtension/ResultAfterUnblocking.png \"Result After Unblocking.\")\n> - The extension will find all the files causing the error and remove all the Read Only and Hidden attribute.\nPlease feel free to send the feedback, bug, or any suggestions.\n>- [Link to Download](https://marketplace.visualstudio.com/items?itemName=NithinVR.UnBlockDllExtension)\n>- [Link to Source](https://github.com/vrnithinkumar/UnblockDllExtension)","source":"_posts/UnBlockDllExtension.md","raw":"---\nlayout: post\ntitle: \"Unblock Dll Extension\"\nsubtitle: \" \\\"A helper extension remove extension dll from Visual Studio.\\\"\"\ndate: 2017-08-13 14:00:00\nauthor: \"Nithin VR\"\nheader-img: \"vs.png\"\ncatalog: true\ntags:\n    - VisualStdio\n    - Extension\n---\n## No Access Error in Visual Studio\nThe given below error is very common, frustrating and encountered by many Visual Studio users.\n```\nUnable to copy file \"obj\\Debug\\project.pdb\" to \"bin\\project.pdb\". Access to the path 'bin\\project.pdb' is denied.\n```\nIt was caused by the pdb or dll file made read only or hidden by the Visual studio itself. If you just remove those attributes from that file this error will go away. But the process is little ve\n[StackOverflow question](https://stackoverflow.com/questions/9750101/unable-to-copy-file-access-to-the-path-is-denied/12740768?noredirect=1#comment75731595_12740768)\nNo Access to the path error look like this:\n![Alt text](/2017/08/13/UnBlockDllExtension/NoAccessError.png \"No Access Error.\")<br />\n# Unblock Dll Extension\nA tiny helper to remove the ReadOnly and Hidden attribute from dll's and executables which blocking the Visual Studio from building the project. Link to download \n### What does it do\nRight click on the Error List window and click the Unblock Files menu item.\n![alt text](/2017/08/13/UnBlockDllExtension/UnBlockMenuItem.png \"Menu Item in Error Window.\")\nResult of the action will be shown in message box like this : \n![alt text](/2017/08/13/UnBlockDllExtension/ResultAfterUnblocking.png \"Result After Unblocking.\")\n> - The extension will find all the files causing the error and remove all the Read Only and Hidden attribute.\nPlease feel free to send the feedback, bug, or any suggestions.\n>- [Link to Download](https://marketplace.visualstudio.com/items?itemName=NithinVR.UnBlockDllExtension)\n>- [Link to Source](https://github.com/vrnithinkumar/UnblockDllExtension)","slug":"UnBlockDllExtension","published":1,"updated":"2017-08-13T17:18:31.000Z","comments":1,"photos":[],"link":"","_id":"cj6pevd8i0007vmutc63yd8xc","content":"<h2 id=\"No-Access-Error-in-Visual-Studio\"><a href=\"#No-Access-Error-in-Visual-Studio\" class=\"headerlink\" title=\"No Access Error in Visual Studio\"></a>No Access Error in Visual Studio</h2><p>The given below error is very common, frustrating and encountered by many Visual Studio users.<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Unable to copy file &quot;obj\\Debug\\project.pdb&quot; to &quot;bin\\project.pdb&quot;. Access to the path &apos;bin\\project.pdb&apos; is denied.</div></pre></td></tr></table></figure></p>\n<p>It was caused by the pdb or dll file made read only or hidden by the Visual studio itself. If you just remove those attributes from that file this error will go away. But the process is little ve<br><a href=\"https://stackoverflow.com/questions/9750101/unable-to-copy-file-access-to-the-path-is-denied/12740768?noredirect=1#comment75731595_12740768\" target=\"_blank\" rel=\"external\">StackOverflow question</a><br>No Access to the path error look like this:<br><img src=\"/2017/08/13/UnBlockDllExtension/NoAccessError.png\" alt=\"Alt text\" title=\"No Access Error.\"><br></p>\n<h1 id=\"Unblock-Dll-Extension\"><a href=\"#Unblock-Dll-Extension\" class=\"headerlink\" title=\"Unblock Dll Extension\"></a>Unblock Dll Extension</h1><p>A tiny helper to remove the ReadOnly and Hidden attribute from dll’s and executables which blocking the Visual Studio from building the project. Link to download </p>\n<h3 id=\"What-does-it-do\"><a href=\"#What-does-it-do\" class=\"headerlink\" title=\"What does it do\"></a>What does it do</h3><p>Right click on the Error List window and click the Unblock Files menu item.<br><img src=\"/2017/08/13/UnBlockDllExtension/UnBlockMenuItem.png\" alt=\"alt text\" title=\"Menu Item in Error Window.\"><br>Result of the action will be shown in message box like this :<br><img src=\"/2017/08/13/UnBlockDllExtension/ResultAfterUnblocking.png\" alt=\"alt text\" title=\"Result After Unblocking.\"></p>\n<blockquote>\n<ul>\n<li>The extension will find all the files causing the error and remove all the Read Only and Hidden attribute.<br>Please feel free to send the feedback, bug, or any suggestions.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=NithinVR.UnBlockDllExtension\" target=\"_blank\" rel=\"external\">Link to Download</a></li>\n<li><a href=\"https://github.com/vrnithinkumar/UnblockDllExtension\" target=\"_blank\" rel=\"external\">Link to Source</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"No-Access-Error-in-Visual-Studio\"><a href=\"#No-Access-Error-in-Visual-Studio\" class=\"headerlink\" title=\"No Access Error in Visual Studio\"></a>No Access Error in Visual Studio</h2><p>The given below error is very common, frustrating and encountered by many Visual Studio users.<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Unable to copy file &quot;obj\\Debug\\project.pdb&quot; to &quot;bin\\project.pdb&quot;. Access to the path &apos;bin\\project.pdb&apos; is denied.</div></pre></td></tr></table></figure></p>\n<p>It was caused by the pdb or dll file made read only or hidden by the Visual studio itself. If you just remove those attributes from that file this error will go away. But the process is little ve<br><a href=\"https://stackoverflow.com/questions/9750101/unable-to-copy-file-access-to-the-path-is-denied/12740768?noredirect=1#comment75731595_12740768\" target=\"_blank\" rel=\"external\">StackOverflow question</a><br>No Access to the path error look like this:<br><img src=\"/2017/08/13/UnBlockDllExtension/NoAccessError.png\" alt=\"Alt text\" title=\"No Access Error.\"><br></p>\n<h1 id=\"Unblock-Dll-Extension\"><a href=\"#Unblock-Dll-Extension\" class=\"headerlink\" title=\"Unblock Dll Extension\"></a>Unblock Dll Extension</h1><p>A tiny helper to remove the ReadOnly and Hidden attribute from dll’s and executables which blocking the Visual Studio from building the project. Link to download </p>\n<h3 id=\"What-does-it-do\"><a href=\"#What-does-it-do\" class=\"headerlink\" title=\"What does it do\"></a>What does it do</h3><p>Right click on the Error List window and click the Unblock Files menu item.<br><img src=\"/2017/08/13/UnBlockDllExtension/UnBlockMenuItem.png\" alt=\"alt text\" title=\"Menu Item in Error Window.\"><br>Result of the action will be shown in message box like this :<br><img src=\"/2017/08/13/UnBlockDllExtension/ResultAfterUnblocking.png\" alt=\"alt text\" title=\"Result After Unblocking.\"></p>\n<blockquote>\n<ul>\n<li>The extension will find all the files causing the error and remove all the Read Only and Hidden attribute.<br>Please feel free to send the feedback, bug, or any suggestions.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=NithinVR.UnBlockDllExtension\" target=\"_blank\" rel=\"external\">Link to Download</a></li>\n<li><a href=\"https://github.com/vrnithinkumar/UnblockDllExtension\" target=\"_blank\" rel=\"external\">Link to Source</a></li>\n</ul>\n</blockquote>\n"},{"layout":"post","title":"Welcome to My Blog","subtitle":" \"Hello World, Hello Blog\"","date":"2016-05-29T06:30:00.000Z","author":"Nithin VR","header-img":"post-bg-2015.jpg","_content":"\n> “Yeah It's on. ”\n\n\nHello World..\nWelcome to My Blog\n","source":"_posts/hello-2015.markdown","raw":"---\nlayout:     post\ntitle:      \"Welcome to My Blog\"\nsubtitle:   \" \\\"Hello World, Hello Blog\\\"\"\ndate:       2016-05-29 12:00:00\nauthor:     \"Nithin VR\"\nheader-img: \"post-bg-2015.jpg\"\ntags:\n    - random\n---\n\n> “Yeah It's on. ”\n\n\nHello World..\nWelcome to My Blog\n","slug":"hello-2015","published":1,"updated":"2017-08-13T07:46:01.000Z","comments":1,"photos":[],"link":"","_id":"cj6pevd8m0008vmutwibuihy3","content":"<blockquote>\n<p>“Yeah It’s on. ”</p>\n</blockquote>\n<p>Hello World..<br>Welcome to My Blog</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>“Yeah It’s on. ”</p>\n</blockquote>\n<p>Hello World..<br>Welcome to My Blog</p>\n"},{"layout":"post","title":"RegEx in Visual Studio","subtitle":" \"Swap parameters in Visual Studio using regular rxpression.\"","date":"2017-08-19T08:30:00.000Z","author":"Nithin VR","header-img":"vs.png","catalog":true,"_content":"## Swap parameters using regular expression\nThis issue is occurred to me many times while sending review request, for example when I use Assert.AreEqual() method and the parameters are not in the order ( expected value, actual value) is got swapped. It's boring and long vexing job to correct all the Assert.AreEqual() parameter order. While searching on Internet found this easy way to swap the parameters using Regular Expression.\n```csharp\npublic static void AreEqual(object expected,object actual)  \n```\nFor example, I wrote code like :\n```csharp\nAssert.AreEqual(\"ActualString1\", CretedString1);  \nAssert.AreEqual(\"ActualString2\", CretedString2);  \nAssert.AreEqual(\"ActualString3\", CretedString3);  \n```\nThe parameter is reversed order, it's not right and For sure I will get a review comment to change this. To swap this parameter we can use find and replace with regular expression.\n{% blockquote %}\nNote : Regular Expression in Visual Studio is bit different.\n{% endblockquote %}\n\n##### Add this as Search Term\n```csharp\n\\((\".*\"),([^\\)]*)  \n```\n##### Add this as Replace Term\n```csharp\n($2, $1  \n```\n\n##### How its works\n![alt text](/2017/08/19/vs-regex/RegEx.png \"How RegEx works.\")\nFor information about regular expressions that are used in replacement patterns, see [Substitutions in Regular Expressions](https://docs.microsoft.com/en-us/dotnet/standard/base-types/substitutions-in-regular-expressions). To use a numbered capture group, the syntax is $2 to specify the numbered group and (x) to specify the group in question. \nFor example, the grouped regular expression (\\d)([a-z]) finds four matches in the following string: 1a 2b 3c 4d. \nThe replacement string z$1 converts that string to z1 z2 z3 z4.\n\n##### Example Screenshots\nBefore :\n![alt text](/2017/08/19/vs-regex/before.png \"Before changes.\")\n\nAfter :\n![alt text](/2017/08/19/vs-regex/after.png \"After changes.\")\n\n- Be careful to select code part you want to swap parameter.Dont apply for whole Document or Solution, It might do some harmfull effects.\n- You can tweak the RegX for other use cases where parameter pattern is different.\n- There exist some shortcuts to reorder the parameter in VS but ii didn't work for me and even if it work, We need to select each AreEqual method and apply those shortcut.\n\n##### More Reference:\n>- [Using Regular Expressions in Visual Studio](https://msdn.microsoft.com/en-us/library/2k3te2cs.aspx)\n>- [Assert.AreEqual Method (Object, Object) (Microsoft.VisualStudio.TestTools.UnitTesting)](https://msdn.microsoft.com/en-us/library/ms243413.aspx)\n>- [shortcut to swap/reorder parameters in vs?](https://stackoverflow.com/questions/3292292/is-there-a-shortcut-to-swap-reorder-parameters-in-visual-studio-ide)","source":"_posts/vs-regex.md","raw":"---\nlayout: post\ntitle: \"RegEx in Visual Studio\"\nsubtitle: \" \\\"Swap parameters in Visual Studio using regular rxpression.\\\"\"\ndate: 2017-08-19 14:00:00\nauthor: \"Nithin VR\"\nheader-img: \"vs.png\"\ncatalog: true\ntags:\n    - VisualStdio\n    - RegEx\n---\n## Swap parameters using regular expression\nThis issue is occurred to me many times while sending review request, for example when I use Assert.AreEqual() method and the parameters are not in the order ( expected value, actual value) is got swapped. It's boring and long vexing job to correct all the Assert.AreEqual() parameter order. While searching on Internet found this easy way to swap the parameters using Regular Expression.\n```csharp\npublic static void AreEqual(object expected,object actual)  \n```\nFor example, I wrote code like :\n```csharp\nAssert.AreEqual(\"ActualString1\", CretedString1);  \nAssert.AreEqual(\"ActualString2\", CretedString2);  \nAssert.AreEqual(\"ActualString3\", CretedString3);  \n```\nThe parameter is reversed order, it's not right and For sure I will get a review comment to change this. To swap this parameter we can use find and replace with regular expression.\n{% blockquote %}\nNote : Regular Expression in Visual Studio is bit different.\n{% endblockquote %}\n\n##### Add this as Search Term\n```csharp\n\\((\".*\"),([^\\)]*)  \n```\n##### Add this as Replace Term\n```csharp\n($2, $1  \n```\n\n##### How its works\n![alt text](/2017/08/19/vs-regex/RegEx.png \"How RegEx works.\")\nFor information about regular expressions that are used in replacement patterns, see [Substitutions in Regular Expressions](https://docs.microsoft.com/en-us/dotnet/standard/base-types/substitutions-in-regular-expressions). To use a numbered capture group, the syntax is $2 to specify the numbered group and (x) to specify the group in question. \nFor example, the grouped regular expression (\\d)([a-z]) finds four matches in the following string: 1a 2b 3c 4d. \nThe replacement string z$1 converts that string to z1 z2 z3 z4.\n\n##### Example Screenshots\nBefore :\n![alt text](/2017/08/19/vs-regex/before.png \"Before changes.\")\n\nAfter :\n![alt text](/2017/08/19/vs-regex/after.png \"After changes.\")\n\n- Be careful to select code part you want to swap parameter.Dont apply for whole Document or Solution, It might do some harmfull effects.\n- You can tweak the RegX for other use cases where parameter pattern is different.\n- There exist some shortcuts to reorder the parameter in VS but ii didn't work for me and even if it work, We need to select each AreEqual method and apply those shortcut.\n\n##### More Reference:\n>- [Using Regular Expressions in Visual Studio](https://msdn.microsoft.com/en-us/library/2k3te2cs.aspx)\n>- [Assert.AreEqual Method (Object, Object) (Microsoft.VisualStudio.TestTools.UnitTesting)](https://msdn.microsoft.com/en-us/library/ms243413.aspx)\n>- [shortcut to swap/reorder parameters in vs?](https://stackoverflow.com/questions/3292292/is-there-a-shortcut-to-swap-reorder-parameters-in-visual-studio-ide)","slug":"vs-regex","published":1,"updated":"2017-08-23T18:11:36.000Z","comments":1,"photos":[],"link":"","_id":"cj6pevd8o000avmutpcxrsb04","content":"<h2 id=\"Swap-parameters-using-regular-expression\"><a href=\"#Swap-parameters-using-regular-expression\" class=\"headerlink\" title=\"Swap parameters using regular expression\"></a>Swap parameters using regular expression</h2><p>This issue is occurred to me many times while sending review request, for example when I use Assert.AreEqual() method and the parameters are not in the order ( expected value, actual value) is got swapped. It’s boring and long vexing job to correct all the Assert.AreEqual() parameter order. While searching on Internet found this easy way to swap the parameters using Regular Expression.<br><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">AreEqual</span>(<span class=\"params\"><span class=\"keyword\">object</span> expected,<span class=\"keyword\">object</span> actual</span>)</span></div></pre></td></tr></table></figure></p>\n<p>For example, I wrote code like :<br><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString1\"</span>, CretedString1);  </div><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString2\"</span>, CretedString2);  </div><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString3\"</span>, CretedString3);</div></pre></td></tr></table></figure></p>\n<p>The parameter is reversed order, it’s not right and For sure I will get a review comment to change this. To swap this parameter we can use find and replace with regular expression.<br><blockquote><p>Note : Regular Expression in Visual Studio is bit different.</p>\n</blockquote></p>\n<h5 id=\"Add-this-as-Search-Term\"><a href=\"#Add-this-as-Search-Term\" class=\"headerlink\" title=\"Add this as Search Term\"></a>Add this as Search Term</h5><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">\\((<span class=\"string\">\".*\"</span>),([^\\)]*)</div></pre></td></tr></table></figure>\n<h5 id=\"Add-this-as-Replace-Term\"><a href=\"#Add-this-as-Replace-Term\" class=\"headerlink\" title=\"Add this as Replace Term\"></a>Add this as Replace Term</h5><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">($<span class=\"number\">2</span>, $<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h5 id=\"How-its-works\"><a href=\"#How-its-works\" class=\"headerlink\" title=\"How its works\"></a>How its works</h5><p><img src=\"/2017/08/19/vs-regex/RegEx.png\" alt=\"alt text\" title=\"How RegEx works.\"><br>For information about regular expressions that are used in replacement patterns, see <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/substitutions-in-regular-expressions\" target=\"_blank\" rel=\"external\">Substitutions in Regular Expressions</a>. To use a numbered capture group, the syntax is $2 to specify the numbered group and (x) to specify the group in question.<br>For example, the grouped regular expression (\\d)([a-z]) finds four matches in the following string: 1a 2b 3c 4d.<br>The replacement string z$1 converts that string to z1 z2 z3 z4.</p>\n<h5 id=\"Example-Screenshots\"><a href=\"#Example-Screenshots\" class=\"headerlink\" title=\"Example Screenshots\"></a>Example Screenshots</h5><p>Before :<br><img src=\"/2017/08/19/vs-regex/before.png\" alt=\"alt text\" title=\"Before changes.\"></p>\n<p>After :<br><img src=\"/2017/08/19/vs-regex/after.png\" alt=\"alt text\" title=\"After changes.\"></p>\n<ul>\n<li>Be careful to select code part you want to swap parameter.Dont apply for whole Document or Solution, It might do some harmfull effects.</li>\n<li>You can tweak the RegX for other use cases where parameter pattern is different.</li>\n<li>There exist some shortcuts to reorder the parameter in VS but ii didn’t work for me and even if it work, We need to select each AreEqual method and apply those shortcut.</li>\n</ul>\n<h5 id=\"More-Reference\"><a href=\"#More-Reference\" class=\"headerlink\" title=\"More Reference:\"></a>More Reference:</h5><blockquote>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/2k3te2cs.aspx\" target=\"_blank\" rel=\"external\">Using Regular Expressions in Visual Studio</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms243413.aspx\" target=\"_blank\" rel=\"external\">Assert.AreEqual Method (Object, Object) (Microsoft.VisualStudio.TestTools.UnitTesting)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3292292/is-there-a-shortcut-to-swap-reorder-parameters-in-visual-studio-ide\" target=\"_blank\" rel=\"external\">shortcut to swap/reorder parameters in vs?</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Swap-parameters-using-regular-expression\"><a href=\"#Swap-parameters-using-regular-expression\" class=\"headerlink\" title=\"Swap parameters using regular expression\"></a>Swap parameters using regular expression</h2><p>This issue is occurred to me many times while sending review request, for example when I use Assert.AreEqual() method and the parameters are not in the order ( expected value, actual value) is got swapped. It’s boring and long vexing job to correct all the Assert.AreEqual() parameter order. While searching on Internet found this easy way to swap the parameters using Regular Expression.<br><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">AreEqual</span>(<span class=\"params\"><span class=\"keyword\">object</span> expected,<span class=\"keyword\">object</span> actual</span>)</span></div></pre></td></tr></table></figure></p>\n<p>For example, I wrote code like :<br><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString1\"</span>, CretedString1);  </div><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString2\"</span>, CretedString2);  </div><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString3\"</span>, CretedString3);</div></pre></td></tr></table></figure></p>\n<p>The parameter is reversed order, it’s not right and For sure I will get a review comment to change this. To swap this parameter we can use find and replace with regular expression.<br><blockquote><p>Note : Regular Expression in Visual Studio is bit different.</p>\n</blockquote></p>\n<h5 id=\"Add-this-as-Search-Term\"><a href=\"#Add-this-as-Search-Term\" class=\"headerlink\" title=\"Add this as Search Term\"></a>Add this as Search Term</h5><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">\\((<span class=\"string\">\".*\"</span>),([^\\)]*)</div></pre></td></tr></table></figure>\n<h5 id=\"Add-this-as-Replace-Term\"><a href=\"#Add-this-as-Replace-Term\" class=\"headerlink\" title=\"Add this as Replace Term\"></a>Add this as Replace Term</h5><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">($<span class=\"number\">2</span>, $<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h5 id=\"How-its-works\"><a href=\"#How-its-works\" class=\"headerlink\" title=\"How its works\"></a>How its works</h5><p><img src=\"/2017/08/19/vs-regex/RegEx.png\" alt=\"alt text\" title=\"How RegEx works.\"><br>For information about regular expressions that are used in replacement patterns, see <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/substitutions-in-regular-expressions\" target=\"_blank\" rel=\"external\">Substitutions in Regular Expressions</a>. To use a numbered capture group, the syntax is $2 to specify the numbered group and (x) to specify the group in question.<br>For example, the grouped regular expression (\\d)([a-z]) finds four matches in the following string: 1a 2b 3c 4d.<br>The replacement string z$1 converts that string to z1 z2 z3 z4.</p>\n<h5 id=\"Example-Screenshots\"><a href=\"#Example-Screenshots\" class=\"headerlink\" title=\"Example Screenshots\"></a>Example Screenshots</h5><p>Before :<br><img src=\"/2017/08/19/vs-regex/before.png\" alt=\"alt text\" title=\"Before changes.\"></p>\n<p>After :<br><img src=\"/2017/08/19/vs-regex/after.png\" alt=\"alt text\" title=\"After changes.\"></p>\n<ul>\n<li>Be careful to select code part you want to swap parameter.Dont apply for whole Document or Solution, It might do some harmfull effects.</li>\n<li>You can tweak the RegX for other use cases where parameter pattern is different.</li>\n<li>There exist some shortcuts to reorder the parameter in VS but ii didn’t work for me and even if it work, We need to select each AreEqual method and apply those shortcut.</li>\n</ul>\n<h5 id=\"More-Reference\"><a href=\"#More-Reference\" class=\"headerlink\" title=\"More Reference:\"></a>More Reference:</h5><blockquote>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/2k3te2cs.aspx\" target=\"_blank\" rel=\"external\">Using Regular Expressions in Visual Studio</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms243413.aspx\" target=\"_blank\" rel=\"external\">Assert.AreEqual Method (Object, Object) (Microsoft.VisualStudio.TestTools.UnitTesting)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3292292/is-there-a-shortcut-to-swap-reorder-parameters-in-visual-studio-ide\" target=\"_blank\" rel=\"external\">shortcut to swap/reorder parameters in vs?</a></li>\n</ul>\n</blockquote>\n"},{"layout":"post","title":"F# in Mac OS.","subtitle":" \"Setting up F# with VSCode and Ionide.\"","date":"2017-08-22T08:30:00.000Z","author":"Nithin VR","header-img":"FSharp_Basics.png","catalog":true,"_content":"## Introduction to F# in Mac OS\nIn short we will be setting up in the below order.\n- Install mono.\n- Install VS Code.\n- Install Ionide.","source":"_posts/FSharpInMac.md","raw":"---\nlayout: post\ntitle: \"F# in Mac OS.\"\nsubtitle: \" \\\"Setting up F# with VSCode and Ionide.\\\"\"\ndate: 2017-08-22 14:00:00\nauthor: \"Nithin VR\"\nheader-img: \"FSharp_Basics.png\"\ncatalog: true\ntags:\n    - F#\n    - Mac\n---\n## Introduction to F# in Mac OS\nIn short we will be setting up in the below order.\n- Install mono.\n- Install VS Code.\n- Install Ionide.","slug":"FSharpInMac","published":1,"updated":"2017-08-23T19:28:58.000Z","_id":"cj6pewk3w0000wjut4wmtay2g","comments":1,"photos":[],"link":"","content":"<h2 id=\"Introduction-to-F-in-Mac-OS\"><a href=\"#Introduction-to-F-in-Mac-OS\" class=\"headerlink\" title=\"Introduction to F# in Mac OS\"></a>Introduction to F# in Mac OS</h2><p>In short we will be setting up in the below order.</p>\n<ul>\n<li>Install mono.</li>\n<li>Install VS Code.</li>\n<li>Install Ionide.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction-to-F-in-Mac-OS\"><a href=\"#Introduction-to-F-in-Mac-OS\" class=\"headerlink\" title=\"Introduction to F# in Mac OS\"></a>Introduction to F# in Mac OS</h2><p>In short we will be setting up in the below order.</p>\n<ul>\n<li>Install mono.</li>\n<li>Install VS Code.</li>\n<li>Install Ionide.</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/AssemblerAndLinker/Compiler.png","slug":"Compiler.png","post":"cj6pevd840001vmutmtv5jiov","modified":0,"renderable":0},{"_id":"source/_posts/Script/StandUp_760_348.png","slug":"StandUp_760_348.png","post":"cj6pevd8e0006vmutxdom9zjw","modified":0,"renderable":0},{"_id":"source/_posts/hello-2015/post-bg-2015.jpg","slug":"post-bg-2015.jpg","post":"cj6pevd8m0008vmutwibuihy3","modified":0,"renderable":0},{"_id":"source/_posts/Revert-A-Commit/git.png","slug":"git.png","post":"cj6pevd890003vmut1rzw0wh4","modified":0,"renderable":0},{"_id":"source/_posts/Revert-A-Commit/Git-Logo.jpg","slug":"Git-Logo.jpg","post":"cj6pevd890003vmut1rzw0wh4","modified":0,"renderable":0},{"_id":"source/_posts/Script/Notifiaction.png","slug":"Notifiaction.png","post":"cj6pevd8e0006vmutxdom9zjw","modified":0,"renderable":0},{"_id":"source/_posts/AssemblerAndLinker/Assembly.jpg","slug":"Assembly.jpg","post":"cj6pevd840001vmutmtv5jiov","modified":0,"renderable":0},{"_id":"source/_posts/AssemblerAndLinker/PE_Windows.PNG","slug":"PE_Windows.PNG","post":"cj6pevd840001vmutmtv5jiov","modified":0,"renderable":0},{"_id":"source/_posts/UnBlockDllExtension/NoAccessError.png","slug":"NoAccessError.png","post":"cj6pevd8i0007vmutc63yd8xc","modified":0,"renderable":0},{"_id":"source/_posts/UnBlockDllExtension/ResultAfterUnblocking.png","slug":"ResultAfterUnblocking.png","post":"cj6pevd8i0007vmutc63yd8xc","modified":0,"renderable":0},{"_id":"source/_posts/UnBlockDllExtension/UnBlockMenuItem.png","slug":"UnBlockMenuItem.png","post":"cj6pevd8i0007vmutc63yd8xc","modified":0,"renderable":0},{"_id":"source/_posts/UnBlockDllExtension/vs.png","slug":"vs.png","post":"cj6pevd8i0007vmutc63yd8xc","modified":0,"renderable":0},{"_id":"source/_posts/vs-regex/RegEx.png","slug":"RegEx.png","post":"cj6pevd8o000avmutpcxrsb04","modified":0,"renderable":0},{"_id":"source/_posts/vs-regex/after.png","slug":"after.png","post":"cj6pevd8o000avmutpcxrsb04","modified":0,"renderable":0},{"_id":"source/_posts/vs-regex/before.png","slug":"before.png","post":"cj6pevd8o000avmutpcxrsb04","modified":0,"renderable":0},{"_id":"source/_posts/vs-regex/vs.png","slug":"vs.png","post":"cj6pevd8o000avmutpcxrsb04","modified":0,"renderable":0},{"_id":"source/_posts/FSharpInMac/packet_bootstrap_missing.png","slug":"packet_bootstrap_missing.png","post":"cj6pewk3w0000wjut4wmtay2g","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cj6pevd840001vmutmtv5jiov","tag_id":"cj6pevd8c0005vmut90dcu1op","_id":"cj6pevd8q000dvmutiv0zksdk"},{"post_id":"cj6pevd840001vmutmtv5jiov","tag_id":"cj6pevd8n0009vmutol8r4pf3","_id":"cj6pevd8r000evmutnl88imji"},{"post_id":"cj6pevd840001vmutmtv5jiov","tag_id":"cj6pevd8p000bvmut3emtbqjr","_id":"cj6pevd8r000gvmut4n9h9o10"},{"post_id":"cj6pevd890003vmut1rzw0wh4","tag_id":"cj6pevd8q000cvmutt3rspe6m","_id":"cj6pevd8s000ivmutjye31iyo"},{"post_id":"cj6pevd890003vmut1rzw0wh4","tag_id":"cj6pevd8r000fvmut9s5klhza","_id":"cj6pevd8s000jvmutvj9ba9yz"},{"post_id":"cj6pevd8e0006vmutxdom9zjw","tag_id":"cj6pevd8r000hvmutvjbf5vg5","_id":"cj6pevd8s000mvmutite1ox9u"},{"post_id":"cj6pevd8e0006vmutxdom9zjw","tag_id":"cj6pevd8s000kvmutiyx0y8b5","_id":"cj6pevd8t000nvmuthoavf406"},{"post_id":"cj6pevd8i0007vmutc63yd8xc","tag_id":"cj6pevd8s000lvmutgmlec29w","_id":"cj6pevd8v000qvmut22u6fmpo"},{"post_id":"cj6pevd8i0007vmutc63yd8xc","tag_id":"cj6pevd8t000ovmutz1qczuwn","_id":"cj6pevd8v000rvmutoj3vxh6l"},{"post_id":"cj6pevd8m0008vmutwibuihy3","tag_id":"cj6pevd8u000pvmut3xhl4iok","_id":"cj6pevd8y000tvmutvt4hhdwt"},{"post_id":"cj6pevd8o000avmutpcxrsb04","tag_id":"cj6pevd8s000lvmutgmlec29w","_id":"cj6pevd8z000vvmutma0cl40z"},{"post_id":"cj6pevd8o000avmutpcxrsb04","tag_id":"cj6pevd8y000uvmutal4jhjae","_id":"cj6pevd8z000wvmutftxwrvb3"},{"post_id":"cj6pewk3w0000wjut4wmtay2g","tag_id":"cj6pewk430001wjuti4gsgh70","_id":"cj6pewk470003wjutj79erquj"},{"post_id":"cj6pewk3w0000wjut4wmtay2g","tag_id":"cj6pewk460002wjutv25k4xfn","_id":"cj6pewk470004wjutr47lwoau"}],"Tag":[{"name":"Compiler","_id":"cj6pevd8c0005vmut90dcu1op"},{"name":"Assembler","_id":"cj6pevd8n0009vmutol8r4pf3"},{"name":"Linker","_id":"cj6pevd8p000bvmut3emtbqjr"},{"name":"Git","_id":"cj6pevd8q000cvmutt3rspe6m"},{"name":"Version Control","_id":"cj6pevd8r000fvmut9s5klhza"},{"name":"Powershell","_id":"cj6pevd8r000hvmutvjbf5vg5"},{"name":"Scripting","_id":"cj6pevd8s000kvmutiyx0y8b5"},{"name":"VisualStdio","_id":"cj6pevd8s000lvmutgmlec29w"},{"name":"Extension","_id":"cj6pevd8t000ovmutz1qczuwn"},{"name":"random","_id":"cj6pevd8u000pvmut3xhl4iok"},{"name":"RegEx","_id":"cj6pevd8y000uvmutal4jhjae"},{"name":"F#","_id":"cj6pewk430001wjuti4gsgh70"},{"name":"Mac","_id":"cj6pewk460002wjutv25k4xfn"}]}}