{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/Notifiaction.png","path":"img/Notifiaction.png","modified":0,"renderable":0},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/Aabout-bg.jpg","path":"img/Aabout-bg.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525625154882},{"_id":"source/.DS_Store","hash":"fd453181c5fd0c8224d3055d4a3b790143b23552","modified":1598872952342},{"_id":"source/404.md","hash":"bc7c13312667f3626b578ae9f25047797fa34d73","modified":1525625154846},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1525625154882},{"_id":"themes/huxblog/layout/archive.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525625154886},{"_id":"source/_drafts/FSharpDotNetAndMac.md","hash":"c2b7bcb984853ed6d60be8aaeba51b9bfdbbb44a","modified":1525625154846},{"_id":"source/about/index.md","hash":"dcda5d1d14b81445a56e81750094b0a665b0401f","modified":1525625154873},{"_id":"source/_drafts/GitInternals.md","hash":"97e9acfe188c1b8ac59cae7d21a2295edf220702","modified":1591119291125},{"_id":"source/_posts/.DS_Store","hash":"e294d99f7c6e3396cbfd5d5bbea44ac34d85d87b","modified":1598872496330},{"_id":"source/_posts/AssemblerAndLinker.md","hash":"1241ad86f6dd31a09792456723f42c68b81ab8a6","modified":1525625154855},{"_id":"source/_posts/FSharpDotNetAndMac.md","hash":"d5d052e21aa2ec6782a6c31609e195eb9bef5ed2","modified":1525625154858},{"_id":"source/_posts/FSharpMentorship-1.md","hash":"c3d0c1dd63f689be7f92ebd9e0063ee37a617cc5","modified":1525625154860},{"_id":"source/_posts/FSharpMentorship-2.md","hash":"4ee1e858a5fdde63b6435be3422146c29b1c9ccb","modified":1525625154860},{"_id":"source/_posts/GSoC-2020.md","hash":"60538f36b57f5a9f473438753c443699e8b06d17","modified":1591121128778},{"_id":"source/_posts/GenericsInDotNet.md","hash":"ee856e673e4dfe5730fec2a9e2fcfb0e9649b24c","modified":1527879653260},{"_id":"source/_posts/Git-Basic-Commands.md","hash":"6f1f85846b47ea784a3294400f46d6c2966cc8e6","modified":1525625154864},{"_id":"source/_posts/Revert-A-Commit.md","hash":"d680f1a1e99fa87a85a7786943f8721064f37df7","modified":1591122312527},{"_id":"source/_posts/Script.md","hash":"db5bb9f6df3836efb95b028105cb2fc113eb30f7","modified":1525625154866},{"_id":"source/_posts/UnBlockDllExtension.md","hash":"a4a0b15efa221a54015af015abb2ae4253475ee4","modified":1525625154868},{"_id":"source/_posts/build-llvm.md","hash":"55e7a00c5e3656b87df074a8c0a761f3d74400d5","modified":1591123992585},{"_id":"source/_posts/gsoc-report.md","hash":"18bb5321f82622285846ac863f39edc467dce6d3","modified":1598874951917},{"_id":"source/_posts/hello-2015.markdown","hash":"84713ead20d6537cf83e08db693143bfd0b2a8dd","modified":1525625154869},{"_id":"source/_posts/vim-Notes.md","hash":"c100a736082069763de45035afe5ca94b2522430","modified":1525627763759},{"_id":"source/_posts/vs-regex.md","hash":"03e60c34d9e9b3175e61e4f2bc903b55f06310c0","modified":1525625154871},{"_id":"source/img/Notifiaction.png","hash":"6cab6eeb36046e0989707825ce7070b63b9c335d","modified":1525625154876},{"_id":"source/img/about-bg.jpg","hash":"c8fd63678cab196fcc4a4e7502478a2b8740d6af","modified":1525625154876},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1525625154881},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1525625154882},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1525625154883},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1525625154883},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1525625154883},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1525625154883},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1525625154884},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1525625154884},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1525625154884},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1525625154884},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1525625154884},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1525625154884},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1525625154886},{"_id":"themes/huxblog/layout/index.ejs","hash":"e25cbd9e381fa473198b8edfbd735048926d3812","modified":1525625154886},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"16a4164c3d291131fb66078e8df93b31fe050040","modified":1525625154886},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1525625154886},{"_id":"themes/huxblog/layout/page.ejs","hash":"bcda374e6d03f5fbb453349eb8f3af014528297d","modified":1525625154887},{"_id":"themes/huxblog/layout/post.ejs","hash":"fcde4c712aff62c61627231006a4b5b721c616e9","modified":1525625154887},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1525625154887},{"_id":"source/img/avatar.jpg","hash":"9a048ec08b025ef86f2b16170bc1ffed2320922f","modified":1525625154877},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1525625154882},{"_id":"source/_drafts/FSharpInMac/FSharp_Debug_LaunchJson.png","hash":"4e3854eb86894e6fe36e4e4621ce475a58d2c98d","modified":1525625154847},{"_id":"source/_drafts/FSharpInMac/FSharp.WithF#ProjectExplorer.png","hash":"6a8b7ce2e70b964039779c27306882cfd4039f4a","modified":1525625154846},{"_id":"source/_drafts/FSharpInMac/FSharp_CreateIonideFile.png","hash":"fca8c0de523cced2e43e3e60c3be9728fd47bb23","modified":1525625154847},{"_id":"source/_drafts/FSharpInMac/FSharp_Debugging.png","hash":"27747a0201f18db959745eaf09cfc6c1e177d743","modified":1525625154847},{"_id":"source/_drafts/FSharpInMac/FSharp_Error_Invalid_CIL_Image.png","hash":"85b2373c8f91a91d6a2b1db1db837642e9c55523","modified":1525625154848},{"_id":"source/_drafts/FSharpInMac/FSharp_F#Project_Options.png","hash":"5c2fa855e394220c4a81cff2f232e91ee16a532c","modified":1525625154849},{"_id":"source/_drafts/FSharpInMac/FSharp_Error_BootStraperIsMissing.png","hash":"ffe73697d63262dd5df2afad380b11ef7dfd070f","modified":1525625154848},{"_id":"source/_drafts/FSharpInMac/FSharp_Fake_Options.png","hash":"5c88eb2330d485cac1f398fec82ff2314384404b","modified":1525625154849},{"_id":"source/_drafts/FSharpInMac/FSharp_Fixing_BootStrapperError.png","hash":"ce33480797178ecf719d228dd43a36d0d64e9d0f","modified":1525625154850},{"_id":"source/_drafts/FSharpInMac/FSharp_NewProject.SetProjectName.png","hash":"5f0aae65e818184877a704d9bd9c9cde96d62362","modified":1525625154850},{"_id":"source/_drafts/FSharpInMac/FSharp_IonideContent.png","hash":"04341e1f52cb9cd8c9c5ab3dabe1776b42fcdf86","modified":1525625154850},{"_id":"source/_drafts/FSharpInMac/FSharp_NewProject.png","hash":"5a5d40c43742d3fcacb5799d5bb93583670d20be","modified":1525625154851},{"_id":"source/_drafts/FSharpInMac/FSharp_NewProject_FolderStruct.png","hash":"2c15e2cd833052be60aed395e700ab6feafb9d6b","modified":1525625154851},{"_id":"source/_drafts/FSharpInMac/FSharp_NewProject_SetPath.png","hash":"48e3fc2f022eb0be6a4082cc7109a66c1f9c6f10","modified":1525625154852},{"_id":"source/_drafts/FSharpInMac/FSharp_ProjectFIleStruct.png","hash":"e5eb17bdadb448366ce4609a36511a28d0b919d0","modified":1525625154853},{"_id":"source/_posts/AssemblerAndLinker/Assembly.jpg","hash":"5a4c5859d040421c624f4a40b02ad94d5988c8f9","modified":1525625154855},{"_id":"source/_drafts/FSharpInMac/FSharp_RunningExe.png","hash":"e9537cc0a337b566622c1e007d5a128fe4df8f76","modified":1525625154853},{"_id":"source/_posts/FSharpDotNetAndMac/fsharporg.png","hash":"d91719717ddeaea108db09b583153b2e66294409","modified":1525625154859},{"_id":"source/_posts/FSharpDotNetAndMac/run_app.png","hash":"a4a0bf565e935b0012ef84dad36268240b6af9c9","modified":1525625154859},{"_id":"source/_posts/FSharpMentorship-2/FSharpInViolate.png","hash":"1d9a61c6ca9b0e16f2f909d566d011dfa07fa215","modified":1525625154860},{"_id":"source/_posts/FSharpMentorship-1/FSharpInViolate.png","hash":"1d9a61c6ca9b0e16f2f909d566d011dfa07fa215","modified":1525625154860},{"_id":"source/_posts/GSoC-2020/.DS_Store","hash":"89fa6abb1612ad3d87458634bc8ed56e4bf695dc","modified":1591121417440},{"_id":"source/_posts/GenericsInDotNet/Goal_Clarity.png","hash":"d9bfe0b1cb39a3b46234f516d141490c7586733a","modified":1525625154861},{"_id":"source/_posts/GenericsInDotNet/BeforeGenerics.png","hash":"c9a7b30de30ab915aa89e5f17614bff765ca5cb1","modified":1525625154861},{"_id":"source/_posts/GenericsInDotNet/Goal_Expressivity.png","hash":"135330b79151fb7e3828044bbe9b8032dc782a9f","modified":1525625154862},{"_id":"source/_posts/GenericsInDotNet/Goal_Safety.png","hash":"f27110eeb4aa858ea4001dac5dc93432b70325f7","modified":1525625154862},{"_id":"source/_posts/GenericsInDotNet/dotnet.jpg","hash":"5ae6a7869f7b01e7804d364255fb6dc939fe4be0","modified":1525625154864},{"_id":"source/_posts/Revert-A-Commit/Git-Logo.jpg","hash":"ca19baefbb3f95ebd50650dfab16af76b011feef","modified":1525625154865},{"_id":"source/_posts/Script/Notifiaction.png","hash":"6cab6eeb36046e0989707825ce7070b63b9c335d","modified":1525625154867},{"_id":"source/_posts/UnBlockDllExtension/NoAccessError.png","hash":"16fe7e6cc5ef96930878f38422ffad8f397a3bf9","modified":1525625154869},{"_id":"source/_posts/UnBlockDllExtension/ResultAfterUnblocking.png","hash":"c0639a8246ed4d173c3e1b4b36e803553c2ab163","modified":1525625154869},{"_id":"source/_posts/UnBlockDllExtension/vs.png","hash":"95abf436496a74f3140e1f0e3064ff2a7421f0d7","modified":1525625154869},{"_id":"source/_posts/UnBlockDllExtension/UnBlockMenuItem.png","hash":"1c62bff2e9eada57dcc4afd380c510baa8cbee54","modified":1525625154869},{"_id":"source/_posts/build-llvm/.DS_Store","hash":"83b09911fef95251de5afb6ffb92ab542484d7c4","modified":1591123098382},{"_id":"source/_posts/vs-regex/RegEx.png","hash":"3ca355c762173e16d5de27259480a80e025b75a6","modified":1525625154871},{"_id":"source/_posts/vs-regex/before.png","hash":"b490121950b3e9b2c8fc9ea80f1b719af16829e5","modified":1525625154872},{"_id":"source/_posts/vs-regex/vs.png","hash":"95abf436496a74f3140e1f0e3064ff2a7421f0d7","modified":1525625154872},{"_id":"source/_posts/vs-regex/after.png","hash":"db2a76347104c1976db3f3ab23e42321b7faf548","modified":1525625154871},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1525625154874},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1525625154880},{"_id":"source/img/favicon.ico","hash":"d6b21336a582b21f7db76514a80d2b6d857a23e1","modified":1525625154879},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"7a7966c9310193953bd7bad06e4b89eef5ca7c01","modified":1525625154885},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1525625154885},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1525625154885},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"1affb397a5f08d4ab629c5431cce4df0c5480409","modified":1525625154885},{"_id":"themes/huxblog/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1525625154889},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1525625154889},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1525625154889},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1525625154891},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1525625154890},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1525625154891},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1525625154893},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1525625154891},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1525625154892},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1525625154893},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1525625154896},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1525625154896},{"_id":"source/_drafts/FSharpInMac/FSharp_NewProject_SelectType.png","hash":"973d317137f226fa077ea453831315e4c91d23ac","modified":1525625154852},{"_id":"source/_posts/AssemblerAndLinker/PE_Windows.PNG","hash":"c3a24beee8ae86fd62d93d5345c3fb1c5b4c7289","modified":1525625154858},{"_id":"source/_posts/FSharpDotNetAndMac/VSCode.png","hash":"82cbce6f86b81c829dde81c7c8479686ba845804","modified":1525625154859},{"_id":"source/_posts/GSoC-2020/llvm.png","hash":"679d07ba89bb43819759c3121c023de528eac6a2","modified":1591121339584},{"_id":"source/_posts/build-llvm/llvm.png","hash":"679d07ba89bb43819759c3121c023de528eac6a2","modified":1591121505105},{"_id":"source/_posts/build-llvm/report.png","hash":"3418a70ba49e34d889c28cab8e3087640f867e06","modified":1591122963122},{"_id":"source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1525625154881},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1525625154889},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1525625154890},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1525625154892},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1525625154896},{"_id":"source/_posts/AssemblerAndLinker/Compiler.png","hash":"4e7ff9d715a0c6dc0eeab737ca637e69ab87cdbf","modified":1525625154857},{"_id":"source/_posts/Script/StandUp_760_348.png","hash":"58119bb3cdf59ea661d5664e7c8c209e1a54a798","modified":1525625154868},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1525625154878},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1525625154888},{"_id":"source/_posts/GenericsInDotNet/boxing.png","hash":"db4b2a03363046437551871c42e16770bbabb3e5","modified":1525625154863},{"_id":"source/_posts/hello-2015/post-bg-2015.jpg","hash":"7118d1af8ac638dc55ee63d0b17e704811c6a37a","modified":1525625154871},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1525625154895},{"_id":"source/_posts/Git-Basic-Commands/git.png","hash":"217e632276382918be9c80dca75e3e5f1e66aeac","modified":1525625154865},{"_id":"source/_posts/Revert-A-Commit/git.png","hash":"217e632276382918be9c80dca75e3e5f1e66aeac","modified":1525625154866},{"_id":"source/img/Aabout-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1525625154875},{"_id":"source/_posts/gsoc-report/.DS_Store","hash":"a158f77437fe3cd46a5041dedb82e01755a8dbaa","modified":1598872952340},{"_id":"source/_posts/gsoc-report/get.png","hash":"147a2230182ad9fa52a6cf77f62dc9dd059d9bf7","modified":1598640791041},{"_id":"source/_posts/gsoc-report/llvm_1.png","hash":"dd20bef8a19d6a744fc96b697d7b7e447441df5b","modified":1598862270086},{"_id":"source/_posts/gsoc-report/notetag.png","hash":"3bfc1958dc3159e8f266dff06c2c195b02329a45","modified":1598639245886},{"_id":"source/_posts/gsoc-report/llvm_2.png","hash":"1e9054d648744c55739c7e505cf242a64b6a46bd","modified":1598862103990},{"_id":"source/_posts/gsoc-report/llvm.png","hash":"679d07ba89bb43819759c3121c023de528eac6a2","modified":1591121339584},{"_id":"source/_posts/gsoc-report/llvm_3.png","hash":"4fc1e8abcea2cbb751ab3e04f08b5eddd5995eaa","modified":1598861985796},{"_id":"public/404.html","hash":"8fbd9342f1acf7379b8178e0d074d8e54abcf67d","modified":1598871116713},{"_id":"public/2016/05/29/hello-2015/index.html","hash":"f9bf4976a2a71c829c9de7288a676c010c5634cf","modified":1598871116758},{"_id":"public/archives/index.html","hash":"cbceb287ccd7612ae15382dfd8740bb5a62ef224","modified":1598871116759},{"_id":"public/archives/page/2/index.html","hash":"5b5a8fa0212d0e6f284c14eca595dd69c47954aa","modified":1598871116760},{"_id":"public/archives/2016/index.html","hash":"756a4e93ecffaf130c04ab3c448634741c6c975a","modified":1598871116760},{"_id":"public/archives/2016/05/index.html","hash":"d59c28b6cc45fa1c76d7d2567c7a78ca2ac0fd39","modified":1598871116760},{"_id":"public/archives/2016/06/index.html","hash":"648bab061f9c5cf3e19b7a9b05118834af129167","modified":1598871116760},{"_id":"public/archives/2016/12/index.html","hash":"da16f5e976e2a769d71005c3cecb898b8b78269e","modified":1598871116760},{"_id":"public/archives/2017/index.html","hash":"0dfaeb6cb93564aeb3593849379e7e92fde4ee4e","modified":1598871116760},{"_id":"public/archives/2017/08/index.html","hash":"2272d644a0827dad0a37cd7264256cd6eadb731f","modified":1598871116760},{"_id":"public/archives/2017/10/index.html","hash":"f1dc62319d2f1fa6b23db28bfac8b13033a91986","modified":1598871116760},{"_id":"public/archives/2018/index.html","hash":"d48e068f72f49ea02bcf56710887e7781f8f4bc6","modified":1598871116761},{"_id":"public/archives/2018/01/index.html","hash":"c7f6c16de33b60f9946a9f486101e89e8f2325b1","modified":1598871116761},{"_id":"public/archives/2018/05/index.html","hash":"9668b16bacfefed21abddfcf590cd5a5fb688780","modified":1598871116761},{"_id":"public/archives/2020/index.html","hash":"8819e2754cf71cc047fc0c46a476ef8ae0842d72","modified":1598871116761},{"_id":"public/archives/2020/06/index.html","hash":"83ac05c0a2f25d2d9a39b96efd896313b78a1ff2","modified":1598871116761},{"_id":"public/tags/F/index.html","hash":"e9624ed63c8189f9a81e60779633f9461b4014a0","modified":1598871116761},{"_id":"public/tags/Mac/index.html","hash":"05c7d6e7e9e9ebd0d6d7d0b0ac8c71ca443c6b55","modified":1598871116761},{"_id":"public/tags/NET-Core/index.html","hash":"fb1f1bad34ce7118338165dd364abcc15b270ad4","modified":1598871116761},{"_id":"public/tags/Compiler/index.html","hash":"e86a67f9e3abd7e8f9a0134f1ce0c2c8555cddca","modified":1598871116761},{"_id":"public/tags/Assembler/index.html","hash":"ba44b5330b407ffd3e08207de1dbd8b39b4559fe","modified":1598871116762},{"_id":"public/tags/Linker/index.html","hash":"1954f8ac6396b10356893338d9628fa02004f790","modified":1598871116762},{"_id":"public/tags/LLVM/index.html","hash":"dad06b56e0ede3f801180f7e168de8e0c76d4bff","modified":1598871116762},{"_id":"public/tags/Clang/index.html","hash":"df3b5ccaabd6650a50a6fec08bcb2879a1686ab2","modified":1598871116776},{"_id":"public/tags/Static-Analysis/index.html","hash":"9fc3566720b3bcac4cf2a34bc2da1a48f75ee708","modified":1598871116776},{"_id":"public/tags/NET/index.html","hash":"fdace8a5b4219ad8e4a4b26eaee91ab03ffd144c","modified":1598871116776},{"_id":"public/tags/C/index.html","hash":"11abe28de878f7b23826934c617850a49aac0411","modified":1598871116777},{"_id":"public/tags/Git/index.html","hash":"226c016431d2481f512ef56f94b0e7e766607193","modified":1598871116777},{"_id":"public/tags/Version-Control/index.html","hash":"1d5e0a6e7ef6be5c6b6eda21f912a1ad1df471e3","modified":1598871116777},{"_id":"public/tags/Powershell/index.html","hash":"62d59fabdc875297eb8811294080b55a22322a21","modified":1598871116777},{"_id":"public/tags/Scripting/index.html","hash":"ce76afc15deacc8ea45748e0a79f2adb8fe95e05","modified":1598871116777},{"_id":"public/tags/VisualStdio/index.html","hash":"d4e9e6007ae88f2d700a9bd9703441a985d94aab","modified":1598871116777},{"_id":"public/tags/Extension/index.html","hash":"1bf31b5441d17001bd62e318878f2ba4f6372ff7","modified":1598871116778},{"_id":"public/tags/random/index.html","hash":"83fec6324cb8b7d2cf0b57dfc99e908ac4e8634e","modified":1598871116778},{"_id":"public/tags/vim/index.html","hash":"21229892845e1ba964b1e0eb9c674d763a4b1925","modified":1598871116778},{"_id":"public/tags/VisualStudio/index.html","hash":"8cf24def2c9a7123b0ced40187877572e12667be","modified":1598871116778},{"_id":"public/tags/RegEx/index.html","hash":"5ccc3d3f8ffd803d0e17d77361dc79f91ba75ffd","modified":1598871116778},{"_id":"public/tags/index.html","hash":"897cd118036ab5cebe87e288fb7c7f2f43a47710","modified":1598872102226},{"_id":"public/2020/06/02/build-llvm/index.html","hash":"cd02103bf88a4ae4c34b486fd1373732460b4574","modified":1598872102227},{"_id":"public/2020/06/02/GSoC-2020/index.html","hash":"400c2fcf07127efa2f64cc69b5948886f61a5d2c","modified":1598871116778},{"_id":"public/2018/05/06/vim-Notes/index.html","hash":"695fb29b07086044024a2cadd143c6c7d2ba8e40","modified":1598871116779},{"_id":"public/2018/01/30/GenericsInDotNet/index.html","hash":"a6377e777f58fcd57c15fb5ef7af31849a9dc256","modified":1598871116779},{"_id":"public/2017/10/29/FSharpMentorship-2/index.html","hash":"b92f7427798e6ebc69cb82058df3574a7dc0c0da","modified":1598871116779},{"_id":"public/2017/10/02/FSharpMentorship-1/index.html","hash":"b585c18105e6239781485fe5c49216d5405a5375","modified":1598871116779},{"_id":"public/2017/10/02/FSharpDotNetAndMac/index.html","hash":"18fa8e7bd7064cf1f7466716c740cbd5f8db5bfd","modified":1598871116779},{"_id":"public/2017/08/21/Git-Basic-Commands/index.html","hash":"e951d421cac7fad75f980ecb7e5c88ca935747f0","modified":1598871116780},{"_id":"public/2017/08/19/vs-regex/index.html","hash":"a3b0df642fbd7e60badfc7093de936a343ba227b","modified":1598871116780},{"_id":"public/2017/08/13/UnBlockDllExtension/index.html","hash":"e329d1d87ba2722261a0231a8ed14d67335b7e0e","modified":1598871116780},{"_id":"public/2016/12/04/AssemblerAndLinker/index.html","hash":"c60dced263d5b6f291a1af033fbf43652c204998","modified":1598871116780},{"_id":"public/2016/06/06/Script/index.html","hash":"78903c3113bf32d240a6f356598735c50c42335f","modified":1598871116780},{"_id":"public/2016/05/30/Revert-A-Commit/index.html","hash":"d246e794a4b32172739d16f5de185b1ce3d3904a","modified":1598871116781},{"_id":"public/about/index.html","hash":"c83996739e2d416fc79ce8f54ee2546fe6bb57f6","modified":1598871116781},{"_id":"public/index.html","hash":"d737b6497713e687d9cceca239db4248b8878954","modified":1598872102227},{"_id":"public/page/2/index.html","hash":"c772f6897831f40c2c1ea7072a657e88af7f5090","modified":1598871116781},{"_id":"public/archives/2020/08/index.html","hash":"bb2a169d11b79f8d0351b9667fd0b0d938448b5b","modified":1598871116806},{"_id":"public/tags/GSoC2020/index.html","hash":"f30c19e5811070ab6dd4d496676df9e313213179","modified":1598871116806},{"_id":"public/2020/08/31/gsoc-report/index.html","hash":"9563761da96b34ed49c866ef533d44ad107a9155","modified":1598874962813},{"_id":"public/2020/08/31/gsoc-report/get.png","hash":"147a2230182ad9fa52a6cf77f62dc9dd059d9bf7","modified":1598871116810},{"_id":"public/2020/08/31/gsoc-report/notetag.png","hash":"3bfc1958dc3159e8f266dff06c2c195b02329a45","modified":1598871116810},{"_id":"public/2020/08/31/gsoc-report/llvm_1.png","hash":"dd20bef8a19d6a744fc96b697d7b7e447441df5b","modified":1598871116810},{"_id":"public/2020/08/31/gsoc-report/llvm_2.png","hash":"1e9054d648744c55739c7e505cf242a64b6a46bd","modified":1598871116810},{"_id":"public/2020/08/31/gsoc-report/llvm.png","hash":"679d07ba89bb43819759c3121c023de528eac6a2","modified":1598871116815},{"_id":"public/2020/08/31/gsoc-report/llvm_3.png","hash":"4fc1e8abcea2cbb751ab3e04f08b5eddd5995eaa","modified":1598871116815},{"_id":"source/_posts/gsoc-report/wk_1.png","hash":"3f6754dc927fbc0bf761a8ae34e8fbf6e15d1af9","modified":1598645732000},{"_id":"source/_posts/gsoc-report/wk_3.png","hash":"730a72da519c92f1e9263d3795795a4c97ef6b52","modified":1598645732000},{"_id":"source/_posts/gsoc-report/wk_4.png","hash":"b2b09f1fd5881403e32c092c39328ee4d74f9392","modified":1598661100199},{"_id":"source/_posts/gsoc-report/wk_2.png","hash":"2ce28ddfda2d105f65e1507354943aeb71252aa2","modified":1598645732000},{"_id":"public/2020/08/31/gsoc-report/wk_1.png","hash":"3f6754dc927fbc0bf761a8ae34e8fbf6e15d1af9","modified":1598871614270},{"_id":"public/2020/08/31/gsoc-report/wk_2.png","hash":"2ce28ddfda2d105f65e1507354943aeb71252aa2","modified":1598871614270},{"_id":"public/2020/08/31/gsoc-report/wk_3.png","hash":"730a72da519c92f1e9263d3795795a4c97ef6b52","modified":1598871614270},{"_id":"public/2020/08/31/gsoc-report/wk_4.png","hash":"b2b09f1fd5881403e32c092c39328ee4d74f9392","modified":1598871614279},{"_id":"source/_posts/gsoc-report/ntafter.png","hash":"09938a4e97c24a90eaade1f35f65e361cee7576e","modified":1598872565605},{"_id":"source/_posts/gsoc-report/ntbefore.png","hash":"8f4c57f4ba483d69ccdf9973e69e21422b98da7f","modified":1598276313192},{"_id":"public/2020/08/31/gsoc-report/ntbefore.png","hash":"8f4c57f4ba483d69ccdf9973e69e21422b98da7f","modified":1598872619705},{"_id":"public/2020/08/31/gsoc-report/ntafter.png","hash":"09938a4e97c24a90eaade1f35f65e361cee7576e","modified":1598872619705}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"Error 404: Resource not found. :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"Error 404: Resource not found. :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2018-05-06T16:45:54.846Z","updated":"2018-05-06T16:45:54.846Z","path":"404.html","title":"","comments":1,"_id":"ckeicsccm0000nncvvynfuok0","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-21T02:48:33.000Z","description":"","header-img":"img/about-bg.jpg","_content":"I’m a computer programmer, interested in compiler and programming languages.\n\nമലയാളി, A Liverpool fan, An atheist. Interested in things like religion, atheism, politics, communism, socialism, economics, history, and philosophy.\n\nYou can reach me over email(vrnithinkumar{at}gmail{dot}com).","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"\"\nheader-img: \"img/about-bg.jpg\"\n---\nI’m a computer programmer, interested in compiler and programming languages.\n\nമലയാളി, A Liverpool fan, An atheist. Interested in things like religion, atheism, politics, communism, socialism, economics, history, and philosophy.\n\nYou can reach me over email(vrnithinkumar{at}gmail{dot}com).","updated":"2018-05-06T16:45:54.873Z","path":"about/index.html","comments":1,"_id":"ckeicsch60001nncvhpyvuoak","content":"<p>I’m a computer programmer, interested in compiler and programming languages.</p>\n<p>മലയാളി, A Liverpool fan, An atheist. Interested in things like religion, atheism, politics, communism, socialism, economics, history, and philosophy.</p>\n<p>You can reach me over email(vrnithinkumar{at}gmail{dot}com).</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I’m a computer programmer, interested in compiler and programming languages.</p>\n<p>മലയാളി, A Liverpool fan, An atheist. Interested in things like religion, atheism, politics, communism, socialism, economics, history, and philosophy.</p>\n<p>You can reach me over email(vrnithinkumar{at}gmail{dot}com).</p>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2018-05-06T16:45:54.882Z","updated":"2018-05-06T16:45:54.882Z","path":"tags/index.html","comments":1,"_id":"ckeicschd0003nncvcba6lfgm","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"F# in Mac OS.","subtitle":" \"Setting up F# with .NET Core, VSCode and Ionide.\"","date":"2017-10-02T12:00:00.000Z","author":"Nithin VR","header-img":"FSharp_Basics.png","catalog":true,"_content":"# Introduction to F# in Mac OS\nIn short we will be setting up in the below order.\n- Install .NET Core.\n- Install VS Code.\n- Install Ionide.\n## Installing .NET Core\nDownload and install .NET Core SDK from [.NET Core for Mac](https://www.microsoft.com/net/core#macos). \n### Installing VS Code\n[Download Visual Studio Code](https://code.visualstudio.com) for Mac and Install.\n### Installing Ionide\nIonide F# Language Features for Visual Studio Code\nOpen VS Code, press Cmd+P and enter the following command to install the Ionide package.\n```\next install Ionide-fsharp\n```\nOr\nSearch ionide in VS Code extensions and install from there.\n### Hello World\n1) Create a F# project.\n2) Build it.\n3) Execute it.\n\n### Trouble shooting with possible errors\n\n###More Details\n1) [Use F# on Mac OSX](http://fsharp.org/use/mac/)\n2) []()","source":"_drafts/FSharpDotNetAndMac.md","raw":"---\ntitle: \"F# in Mac OS.\"\nsubtitle: \" \\\"Setting up F# with .NET Core, VSCode and Ionide.\\\"\"\ndate: 2017-10-02 14:00:00\nauthor: \"Nithin VR\"\nheader-img: \"FSharp_Basics.png\"\ncatalog: true\ntags:\n    - F#\n    - Mac\n    - .NET Core\n---\n# Introduction to F# in Mac OS\nIn short we will be setting up in the below order.\n- Install .NET Core.\n- Install VS Code.\n- Install Ionide.\n## Installing .NET Core\nDownload and install .NET Core SDK from [.NET Core for Mac](https://www.microsoft.com/net/core#macos). \n### Installing VS Code\n[Download Visual Studio Code](https://code.visualstudio.com) for Mac and Install.\n### Installing Ionide\nIonide F# Language Features for Visual Studio Code\nOpen VS Code, press Cmd+P and enter the following command to install the Ionide package.\n```\next install Ionide-fsharp\n```\nOr\nSearch ionide in VS Code extensions and install from there.\n### Hello World\n1) Create a F# project.\n2) Build it.\n3) Execute it.\n\n### Trouble shooting with possible errors\n\n###More Details\n1) [Use F# on Mac OSX](http://fsharp.org/use/mac/)\n2) []()","slug":"FSharpDotNetAndMac","published":0,"updated":"2018-05-06T16:45:54.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeicsch70002nncvmf5f06bm","content":"<h1 id=\"Introduction-to-F-in-Mac-OS\"><a href=\"#Introduction-to-F-in-Mac-OS\" class=\"headerlink\" title=\"Introduction to F# in Mac OS\"></a>Introduction to F# in Mac OS</h1><p>In short we will be setting up in the below order.</p>\n<ul>\n<li>Install .NET Core.</li>\n<li>Install VS Code.</li>\n<li>Install Ionide.<h2 id=\"Installing-NET-Core\"><a href=\"#Installing-NET-Core\" class=\"headerlink\" title=\"Installing .NET Core\"></a>Installing .NET Core</h2>Download and install .NET Core SDK from <a href=\"https://www.microsoft.com/net/core#macos\" target=\"_blank\" rel=\"external\">.NET Core for Mac</a>. <h3 id=\"Installing-VS-Code\"><a href=\"#Installing-VS-Code\" class=\"headerlink\" title=\"Installing VS Code\"></a>Installing VS Code</h3><a href=\"https://code.visualstudio.com\" target=\"_blank\" rel=\"external\">Download Visual Studio Code</a> for Mac and Install.<h3 id=\"Installing-Ionide\"><a href=\"#Installing-Ionide\" class=\"headerlink\" title=\"Installing Ionide\"></a>Installing Ionide</h3>Ionide F# Language Features for Visual Studio Code<br>Open VS Code, press Cmd+P and enter the following command to install the Ionide package.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ext install Ionide-fsharp</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Or<br>Search ionide in VS Code extensions and install from there.</p>\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><p>1) Create a F# project.<br>2) Build it.<br>3) Execute it.</p>\n<h3 id=\"Trouble-shooting-with-possible-errors\"><a href=\"#Trouble-shooting-with-possible-errors\" class=\"headerlink\" title=\"Trouble shooting with possible errors\"></a>Trouble shooting with possible errors</h3><p>###More Details<br>1) <a href=\"http://fsharp.org/use/mac/\" target=\"_blank\" rel=\"external\">Use F# on Mac OSX</a><br>2) <a href=\"\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction-to-F-in-Mac-OS\"><a href=\"#Introduction-to-F-in-Mac-OS\" class=\"headerlink\" title=\"Introduction to F# in Mac OS\"></a>Introduction to F# in Mac OS</h1><p>In short we will be setting up in the below order.</p>\n<ul>\n<li>Install .NET Core.</li>\n<li>Install VS Code.</li>\n<li>Install Ionide.<h2 id=\"Installing-NET-Core\"><a href=\"#Installing-NET-Core\" class=\"headerlink\" title=\"Installing .NET Core\"></a>Installing .NET Core</h2>Download and install .NET Core SDK from <a href=\"https://www.microsoft.com/net/core#macos\" target=\"_blank\" rel=\"external\">.NET Core for Mac</a>. <h3 id=\"Installing-VS-Code\"><a href=\"#Installing-VS-Code\" class=\"headerlink\" title=\"Installing VS Code\"></a>Installing VS Code</h3><a href=\"https://code.visualstudio.com\" target=\"_blank\" rel=\"external\">Download Visual Studio Code</a> for Mac and Install.<h3 id=\"Installing-Ionide\"><a href=\"#Installing-Ionide\" class=\"headerlink\" title=\"Installing Ionide\"></a>Installing Ionide</h3>Ionide F# Language Features for Visual Studio Code<br>Open VS Code, press Cmd+P and enter the following command to install the Ionide package.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ext install Ionide-fsharp</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Or<br>Search ionide in VS Code extensions and install from there.</p>\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><p>1) Create a F# project.<br>2) Build it.<br>3) Execute it.</p>\n<h3 id=\"Trouble-shooting-with-possible-errors\"><a href=\"#Trouble-shooting-with-possible-errors\" class=\"headerlink\" title=\"Trouble shooting with possible errors\"></a>Trouble shooting with possible errors</h3><p>###More Details<br>1) <a href=\"http://fsharp.org/use/mac/\" target=\"_blank\" rel=\"external\">Use F# on Mac OSX</a><br>2) <a href=\"\"></a></p>\n"},{"title":"Learning Git Internals","_content":"# Learning Git Internals\nAfter learning the basics of git, I want to know more about the internals of git and how it works. So I started reading the book [Git Internals](https://github.com/pluralsight/git-internals-pdf/releases/download/v2.0/peepcode-git.pdf) by **Scott Chacon**. This post is all the notes from this book as well as my outside readings.\n## History\nGit project started by **Linus Torvaldes** for source code management for Linux. He was not impressed by all the existing source control systems, so he started to create a new distributed source code management system. In current state, git is the [most commonly used version control system](https://insights.stackoverflow.com/survey/2018#work-version-control). Not just Linux many other free and open source software adopted git as default version control system.\n","source":"_drafts/GitInternals.md","raw":"---\ntitle: Learning Git Internals\ntags:\n    git\n---\n# Learning Git Internals\nAfter learning the basics of git, I want to know more about the internals of git and how it works. So I started reading the book [Git Internals](https://github.com/pluralsight/git-internals-pdf/releases/download/v2.0/peepcode-git.pdf) by **Scott Chacon**. This post is all the notes from this book as well as my outside readings.\n## History\nGit project started by **Linus Torvaldes** for source code management for Linux. He was not impressed by all the existing source control systems, so he started to create a new distributed source code management system. In current state, git is the [most commonly used version control system](https://insights.stackoverflow.com/survey/2018#work-version-control). Not just Linux many other free and open source software adopted git as default version control system.\n","slug":"GitInternals","published":0,"date":"2020-06-02T17:34:51.124Z","updated":"2020-06-02T17:34:51.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeicsche0004nncvfml6sjdv","content":"<h1 id=\"Learning-Git-Internals\"><a href=\"#Learning-Git-Internals\" class=\"headerlink\" title=\"Learning Git Internals\"></a>Learning Git Internals</h1><p>After learning the basics of git, I want to know more about the internals of git and how it works. So I started reading the book <a href=\"https://github.com/pluralsight/git-internals-pdf/releases/download/v2.0/peepcode-git.pdf\" target=\"_blank\" rel=\"external\">Git Internals</a> by <strong>Scott Chacon</strong>. This post is all the notes from this book as well as my outside readings.</p>\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><p>Git project started by <strong>Linus Torvaldes</strong> for source code management for Linux. He was not impressed by all the existing source control systems, so he started to create a new distributed source code management system. In current state, git is the <a href=\"https://insights.stackoverflow.com/survey/2018#work-version-control\" target=\"_blank\" rel=\"external\">most commonly used version control system</a>. Not just Linux many other free and open source software adopted git as default version control system.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Learning-Git-Internals\"><a href=\"#Learning-Git-Internals\" class=\"headerlink\" title=\"Learning Git Internals\"></a>Learning Git Internals</h1><p>After learning the basics of git, I want to know more about the internals of git and how it works. So I started reading the book <a href=\"https://github.com/pluralsight/git-internals-pdf/releases/download/v2.0/peepcode-git.pdf\" target=\"_blank\" rel=\"external\">Git Internals</a> by <strong>Scott Chacon</strong>. This post is all the notes from this book as well as my outside readings.</p>\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><p>Git project started by <strong>Linus Torvaldes</strong> for source code management for Linux. He was not impressed by all the existing source control systems, so he started to create a new distributed source code management system. In current state, git is the <a href=\"https://insights.stackoverflow.com/survey/2018#work-version-control\" target=\"_blank\" rel=\"external\">most commonly used version control system</a>. Not just Linux many other free and open source software adopted git as default version control system.</p>\n"},{"title":"F# in Mac OS.","subtitle":" \"Setting up F# with .NET Core, VSCode and Ionide.\"","date":"2017-10-02T12:00:00.000Z","author":"Nithin VR","header-img":"fsharporg.png","catalog":true,"_content":"# Introduction to F# in Mac OS\nIn short we will be setting up in the below order.\n- Install .NET Core.\n- Install VS Code.\n- Install Ionide.\n### Installing .NET Core\nDownload and install .NET Core SDK from [.NET Core for Mac](https://www.microsoft.com/net/core#macos). \n### Installing VS Code\n[Download Visual Studio Code](https://code.visualstudio.com) for Mac and Install.\n### Installing Ionide\nIonide is a plugin to support F# language features for VS Code. Open VS Code, press `Cmd+P` and enter the  command `ext install Ionide-fsharp` to install the Ionide package.\nOr search ionide in VS Code extensions and install from there.\n### Hello World\n1. **Create a solution to have multiple projects.**\n{% codeblock %}\ndotnet new sln --name Everything\n{% endcodeblock %}\nIf we did not specify  the `--name` it will take the folder name as the solution name.\n2. **Create F# console project and add it to the solution.**\n{% codeblock %}\ndotnet new console -lang f# -o hwFSharpApp\n{% endcodeblock %}\nIn above command `-o hwFSharpApp` sets an output directory of hwFSharpApp and creates hwFSharpApp.fsproj. `console -lang F#` will create a console app in F# language.\n{% codeblock %}\ndotnet sln add hwFSharpApp/hwFSharpApp.fsproj \n{% endcodeblock %}\nThis will add project `hwFSharpApp/hwFSharpApp.fsproj` to the solution.\n3. **Build and run.**\nThe below command will build the solution with all the projects. \n{% codeblock %}\ndotnet build Everything.sln \n{% endcodeblock %}\nTo run the console application use the below command with `dotnet run` which specifies the projects to run.\n{% codeblock %}\ndotnet run --project hwFSharpApp/hwFSharpApp.fsproj \n{% endcodeblock %}\n![alt text](/2017/10/02/FSharpDotNetAndMac/run_app.png \"Running .NET project\")\n4. **Use VS Code to edit.**\nUsing VS Code open the folder with solution(Everything.sln) we created. We can use the F# Project Explorer to Build Run and Debug the F# Projects by setting it as startup project.\n![alt text](/2017/10/02/FSharpDotNetAndMac/VSCode.png \"VS Code with loaded solution.\")\nUse `--help` to explore more options in .NET CLI. \n### More Details\n1) [Use F# on Mac OSX](http://fsharp.org/use/mac/)\n2) [Get started with F# and .NET Core](https://channel9.msdn.com/Events/dotnetConf/2017/T318)\n","source":"_posts/FSharpDotNetAndMac.md","raw":"---\ntitle: \"F# in Mac OS.\"\nsubtitle: \" \\\"Setting up F# with .NET Core, VSCode and Ionide.\\\"\"\ndate: 2017-10-02 14:00:00\nauthor: \"Nithin VR\"\nheader-img: \"fsharporg.png\"\ncatalog: true\ntags:\n    - F#\n    - Mac\n    - .NET Core\n---\n# Introduction to F# in Mac OS\nIn short we will be setting up in the below order.\n- Install .NET Core.\n- Install VS Code.\n- Install Ionide.\n### Installing .NET Core\nDownload and install .NET Core SDK from [.NET Core for Mac](https://www.microsoft.com/net/core#macos). \n### Installing VS Code\n[Download Visual Studio Code](https://code.visualstudio.com) for Mac and Install.\n### Installing Ionide\nIonide is a plugin to support F# language features for VS Code. Open VS Code, press `Cmd+P` and enter the  command `ext install Ionide-fsharp` to install the Ionide package.\nOr search ionide in VS Code extensions and install from there.\n### Hello World\n1. **Create a solution to have multiple projects.**\n{% codeblock %}\ndotnet new sln --name Everything\n{% endcodeblock %}\nIf we did not specify  the `--name` it will take the folder name as the solution name.\n2. **Create F# console project and add it to the solution.**\n{% codeblock %}\ndotnet new console -lang f# -o hwFSharpApp\n{% endcodeblock %}\nIn above command `-o hwFSharpApp` sets an output directory of hwFSharpApp and creates hwFSharpApp.fsproj. `console -lang F#` will create a console app in F# language.\n{% codeblock %}\ndotnet sln add hwFSharpApp/hwFSharpApp.fsproj \n{% endcodeblock %}\nThis will add project `hwFSharpApp/hwFSharpApp.fsproj` to the solution.\n3. **Build and run.**\nThe below command will build the solution with all the projects. \n{% codeblock %}\ndotnet build Everything.sln \n{% endcodeblock %}\nTo run the console application use the below command with `dotnet run` which specifies the projects to run.\n{% codeblock %}\ndotnet run --project hwFSharpApp/hwFSharpApp.fsproj \n{% endcodeblock %}\n![alt text](/2017/10/02/FSharpDotNetAndMac/run_app.png \"Running .NET project\")\n4. **Use VS Code to edit.**\nUsing VS Code open the folder with solution(Everything.sln) we created. We can use the F# Project Explorer to Build Run and Debug the F# Projects by setting it as startup project.\n![alt text](/2017/10/02/FSharpDotNetAndMac/VSCode.png \"VS Code with loaded solution.\")\nUse `--help` to explore more options in .NET CLI. \n### More Details\n1) [Use F# on Mac OSX](http://fsharp.org/use/mac/)\n2) [Get started with F# and .NET Core](https://channel9.msdn.com/Events/dotnetConf/2017/T318)\n","slug":"FSharpDotNetAndMac","published":1,"updated":"2018-05-06T16:45:54.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeicscht0006nncvd6h4v2j4","content":"<h1 id=\"Introduction-to-F-in-Mac-OS\"><a href=\"#Introduction-to-F-in-Mac-OS\" class=\"headerlink\" title=\"Introduction to F# in Mac OS\"></a>Introduction to F# in Mac OS</h1><p>In short we will be setting up in the below order.</p>\n<ul>\n<li>Install .NET Core.</li>\n<li>Install VS Code.</li>\n<li>Install Ionide.<h3 id=\"Installing-NET-Core\"><a href=\"#Installing-NET-Core\" class=\"headerlink\" title=\"Installing .NET Core\"></a>Installing .NET Core</h3>Download and install .NET Core SDK from <a href=\"https://www.microsoft.com/net/core#macos\" target=\"_blank\" rel=\"external\">.NET Core for Mac</a>. <h3 id=\"Installing-VS-Code\"><a href=\"#Installing-VS-Code\" class=\"headerlink\" title=\"Installing VS Code\"></a>Installing VS Code</h3><a href=\"https://code.visualstudio.com\" target=\"_blank\" rel=\"external\">Download Visual Studio Code</a> for Mac and Install.<h3 id=\"Installing-Ionide\"><a href=\"#Installing-Ionide\" class=\"headerlink\" title=\"Installing Ionide\"></a>Installing Ionide</h3>Ionide is a plugin to support F# language features for VS Code. Open VS Code, press <code>Cmd+P</code> and enter the  command <code>ext install Ionide-fsharp</code> to install the Ionide package.<br>Or search ionide in VS Code extensions and install from there.<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3></li>\n</ul>\n<ol>\n<li><strong>Create a solution to have multiple projects.</strong><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">dotnet new sln --name Everything</div></pre></td></tr></table></figure>\nIf we did not specify  the <code>--name</code> it will take the folder name as the solution name.</li>\n<li><strong>Create F# console project and add it to the solution.</strong><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">dotnet new console -lang f# -o hwFSharpApp</div></pre></td></tr></table></figure>\nIn above command <code>-o hwFSharpApp</code> sets an output directory of hwFSharpApp and creates hwFSharpApp.fsproj. <code>console -lang F#</code> will create a console app in F# language.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">dotnet sln add hwFSharpApp/hwFSharpApp.fsproj </div></pre></td></tr></table></figure>\nThis will add project <code>hwFSharpApp/hwFSharpApp.fsproj</code> to the solution.</li>\n<li><strong>Build and run.</strong><br>The below command will build the solution with all the projects. <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">dotnet build Everything.sln </div></pre></td></tr></table></figure>\nTo run the console application use the below command with <code>dotnet run</code> which specifies the projects to run.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">dotnet run --project hwFSharpApp/hwFSharpApp.fsproj </div></pre></td></tr></table></figure>\n<img src=\"/2017/10/02/FSharpDotNetAndMac/run_app.png\" alt=\"alt text\" title=\"Running .NET project\"></li>\n<li><strong>Use VS Code to edit.</strong><br>Using VS Code open the folder with solution(Everything.sln) we created. We can use the F# Project Explorer to Build Run and Debug the F# Projects by setting it as startup project.<br><img src=\"/2017/10/02/FSharpDotNetAndMac/VSCode.png\" alt=\"alt text\" title=\"VS Code with loaded solution.\"><br>Use <code>--help</code> to explore more options in .NET CLI. <h3 id=\"More-Details\"><a href=\"#More-Details\" class=\"headerlink\" title=\"More Details\"></a>More Details</h3>1) <a href=\"http://fsharp.org/use/mac/\" target=\"_blank\" rel=\"external\">Use F# on Mac OSX</a><br>2) <a href=\"https://channel9.msdn.com/Events/dotnetConf/2017/T318\" target=\"_blank\" rel=\"external\">Get started with F# and .NET Core</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction-to-F-in-Mac-OS\"><a href=\"#Introduction-to-F-in-Mac-OS\" class=\"headerlink\" title=\"Introduction to F# in Mac OS\"></a>Introduction to F# in Mac OS</h1><p>In short we will be setting up in the below order.</p>\n<ul>\n<li>Install .NET Core.</li>\n<li>Install VS Code.</li>\n<li>Install Ionide.<h3 id=\"Installing-NET-Core\"><a href=\"#Installing-NET-Core\" class=\"headerlink\" title=\"Installing .NET Core\"></a>Installing .NET Core</h3>Download and install .NET Core SDK from <a href=\"https://www.microsoft.com/net/core#macos\" target=\"_blank\" rel=\"external\">.NET Core for Mac</a>. <h3 id=\"Installing-VS-Code\"><a href=\"#Installing-VS-Code\" class=\"headerlink\" title=\"Installing VS Code\"></a>Installing VS Code</h3><a href=\"https://code.visualstudio.com\" target=\"_blank\" rel=\"external\">Download Visual Studio Code</a> for Mac and Install.<h3 id=\"Installing-Ionide\"><a href=\"#Installing-Ionide\" class=\"headerlink\" title=\"Installing Ionide\"></a>Installing Ionide</h3>Ionide is a plugin to support F# language features for VS Code. Open VS Code, press <code>Cmd+P</code> and enter the  command <code>ext install Ionide-fsharp</code> to install the Ionide package.<br>Or search ionide in VS Code extensions and install from there.<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3></li>\n</ul>\n<ol>\n<li><strong>Create a solution to have multiple projects.</strong><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">dotnet new sln --name Everything</div></pre></td></tr></table></figure>\nIf we did not specify  the <code>--name</code> it will take the folder name as the solution name.</li>\n<li><strong>Create F# console project and add it to the solution.</strong><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">dotnet new console -lang f# -o hwFSharpApp</div></pre></td></tr></table></figure>\nIn above command <code>-o hwFSharpApp</code> sets an output directory of hwFSharpApp and creates hwFSharpApp.fsproj. <code>console -lang F#</code> will create a console app in F# language.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">dotnet sln add hwFSharpApp/hwFSharpApp.fsproj </div></pre></td></tr></table></figure>\nThis will add project <code>hwFSharpApp/hwFSharpApp.fsproj</code> to the solution.</li>\n<li><strong>Build and run.</strong><br>The below command will build the solution with all the projects. <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">dotnet build Everything.sln </div></pre></td></tr></table></figure>\nTo run the console application use the below command with <code>dotnet run</code> which specifies the projects to run.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">dotnet run --project hwFSharpApp/hwFSharpApp.fsproj </div></pre></td></tr></table></figure>\n<img src=\"/2017/10/02/FSharpDotNetAndMac/run_app.png\" alt=\"alt text\" title=\"Running .NET project\"></li>\n<li><strong>Use VS Code to edit.</strong><br>Using VS Code open the folder with solution(Everything.sln) we created. We can use the F# Project Explorer to Build Run and Debug the F# Projects by setting it as startup project.<br><img src=\"/2017/10/02/FSharpDotNetAndMac/VSCode.png\" alt=\"alt text\" title=\"VS Code with loaded solution.\"><br>Use <code>--help</code> to explore more options in .NET CLI. <h3 id=\"More-Details\"><a href=\"#More-Details\" class=\"headerlink\" title=\"More Details\"></a>More Details</h3>1) <a href=\"http://fsharp.org/use/mac/\" target=\"_blank\" rel=\"external\">Use F# on Mac OSX</a><br>2) <a href=\"https://channel9.msdn.com/Events/dotnetConf/2017/T318\" target=\"_blank\" rel=\"external\">Get started with F# and .NET Core</a></li>\n</ol>\n"},{"layout":"post","title":"Assembler & Linker","date":"2016-12-03T23:10:03.000Z","subtitle":"","author":"Nithin VR","header-img":"Assembly.jpg","catalog":true,"_content":"## Introduction\n\nBetween compiling and executing a High-Level programming language, Many intermediate steps like Lexical Analyzing, Syntax Analyzing, Semantic Analyzing, Pre Optimizing, Assembly Code generation, Post Optimizing,  Assembling,  Linking and Loading are happening. In this post we are mainly covering \n  - Assembler\n  - Linker\n  - Loader\n  - Disassembler\n\n### Assembler\n\nAssembler will create  object code from the assembly code. After Assembly Code generation and Post Optimizing, the generated assembly code is translated to Object code. Assembly Language aka **asm** is low-level programming language which is specific for CPU architecture. Its actually human readable representation of machine code.\nFor example:\nAssembly Code for moving value 55 hex into register BL\n\n    MOV BL, 055H\n\nCorresponding Machine Code\n\n    10111000\n\nAn assembler will generate object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents. Each object code file combined to create the executable file.\n\n**In short, assembler will** \n - Translate assembly instructions, macros, and  pseudo-instructions into binary machine instructions\n - Convert decimal numbers, etc. specified by programmer into binary.\n - Put the translated instructions into a file for future use.\n\n**Types of Assemblers**\n\n** 1) Two pass assembler **\nIn two pass assembler we use two pass to complete generation of machine code. First pass we will create a symbol table **(SYMTAB)** where we keep all the symbols and their values. Any unknown values or addressed we encounter we will add it to the symbol table and update it when we encounter that value in future. For example \n\n    10 JMP LOOP_END \t\\\\ Address of label2 is unknown we add this to symbol table.\n    11 ADD  EAX EBX\n    12 LOOP_END:       \\\\ Here we update the symbol table with actual address.\n    \n    Symbol Table \n\n    | Symbol Name | Symbol Value |\n    |:-----------:|:------------:|\n    |    LOOP_END |      12      |\n    |    Label2   |      18      |\n\nUsing the symbol table we will create valid machine code on the second pass.\n\n**2) One pass assembler**\nIn one pass assembler, we convert the whole assembly code in to machine code by one pass unlike two pass assembler. We keep different type of symbol table where each unknown symbols and all locations it used are stored. Whenever we encounter the initialization of the symbol we will check the symbol table and go back to  update all places it used with the actual value. \n\n**Object File** \n\nObject files are group of blocks of information about the program in binary format. Blocks contain program code,  program data, and data structures that guide the linker and loader. Its the output from the assembler there are different forms of object file based on how it used.: \n 1. **Relocatable object file**. Contains binary code and data in a form that can be combined with other relocatable object files at compile time to create an executable object file.\n 2. **Executable object file**. Contains binary code and data in a form that can be copied directly into memory and executed.\n 3. **Shared object file**. A special type of relocatable object file that can be loaded into memory and linked dynamically, at either load time or run time.  \n\nCommon object file formats\n - **COFF :** Common Object File format. Windows uses a variant of COFF called the Portable Executable (PE) format.\n - **ELF :** Executable and Linkable Format Mainly used in Linux.\n\n### Linker\nLinker will take all the object file created by the assembler and combine them into a single executable file , library or another big object file.Which can be be loaded to the memory and execute. It enable separate compilation and gives modularity to big programs.\n\n- **Symbol resolution.** \nObject files define and reference symbols. The purpose of symbol resolution is to associate each symbol reference with exactly one symbol definition.\n\n- **Relocation.** \nCompilers and assemblers generate code and data sections that start at address 0. The linker relocates these sections by associating a memory location with each symbol definition, and then modifying all of the references to those symbols so that they point to this memory location.\n\n- **Static linkers.**\nSuch as the Unix ld program take as input a collection of relocatable object files and command line arguments and generate as output a fully linked executable object file that can be loaded and run.","source":"_posts/AssemblerAndLinker.md","raw":"---\nlayout:     post\ntitle: Assembler & Linker\ndate: 2016-12-04 00:10:03\nsubtitle: \"\"\nauthor:     \"Nithin VR\"\nheader-img: \"Assembly.jpg\"\ncatalog: true\ntags:\n  - Compiler\n  - Assembler\n  - Linker\n---\n## Introduction\n\nBetween compiling and executing a High-Level programming language, Many intermediate steps like Lexical Analyzing, Syntax Analyzing, Semantic Analyzing, Pre Optimizing, Assembly Code generation, Post Optimizing,  Assembling,  Linking and Loading are happening. In this post we are mainly covering \n  - Assembler\n  - Linker\n  - Loader\n  - Disassembler\n\n### Assembler\n\nAssembler will create  object code from the assembly code. After Assembly Code generation and Post Optimizing, the generated assembly code is translated to Object code. Assembly Language aka **asm** is low-level programming language which is specific for CPU architecture. Its actually human readable representation of machine code.\nFor example:\nAssembly Code for moving value 55 hex into register BL\n\n    MOV BL, 055H\n\nCorresponding Machine Code\n\n    10111000\n\nAn assembler will generate object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents. Each object code file combined to create the executable file.\n\n**In short, assembler will** \n - Translate assembly instructions, macros, and  pseudo-instructions into binary machine instructions\n - Convert decimal numbers, etc. specified by programmer into binary.\n - Put the translated instructions into a file for future use.\n\n**Types of Assemblers**\n\n** 1) Two pass assembler **\nIn two pass assembler we use two pass to complete generation of machine code. First pass we will create a symbol table **(SYMTAB)** where we keep all the symbols and their values. Any unknown values or addressed we encounter we will add it to the symbol table and update it when we encounter that value in future. For example \n\n    10 JMP LOOP_END \t\\\\ Address of label2 is unknown we add this to symbol table.\n    11 ADD  EAX EBX\n    12 LOOP_END:       \\\\ Here we update the symbol table with actual address.\n    \n    Symbol Table \n\n    | Symbol Name | Symbol Value |\n    |:-----------:|:------------:|\n    |    LOOP_END |      12      |\n    |    Label2   |      18      |\n\nUsing the symbol table we will create valid machine code on the second pass.\n\n**2) One pass assembler**\nIn one pass assembler, we convert the whole assembly code in to machine code by one pass unlike two pass assembler. We keep different type of symbol table where each unknown symbols and all locations it used are stored. Whenever we encounter the initialization of the symbol we will check the symbol table and go back to  update all places it used with the actual value. \n\n**Object File** \n\nObject files are group of blocks of information about the program in binary format. Blocks contain program code,  program data, and data structures that guide the linker and loader. Its the output from the assembler there are different forms of object file based on how it used.: \n 1. **Relocatable object file**. Contains binary code and data in a form that can be combined with other relocatable object files at compile time to create an executable object file.\n 2. **Executable object file**. Contains binary code and data in a form that can be copied directly into memory and executed.\n 3. **Shared object file**. A special type of relocatable object file that can be loaded into memory and linked dynamically, at either load time or run time.  \n\nCommon object file formats\n - **COFF :** Common Object File format. Windows uses a variant of COFF called the Portable Executable (PE) format.\n - **ELF :** Executable and Linkable Format Mainly used in Linux.\n\n### Linker\nLinker will take all the object file created by the assembler and combine them into a single executable file , library or another big object file.Which can be be loaded to the memory and execute. It enable separate compilation and gives modularity to big programs.\n\n- **Symbol resolution.** \nObject files define and reference symbols. The purpose of symbol resolution is to associate each symbol reference with exactly one symbol definition.\n\n- **Relocation.** \nCompilers and assemblers generate code and data sections that start at address 0. The linker relocates these sections by associating a memory location with each symbol definition, and then modifying all of the references to those symbols so that they point to this memory location.\n\n- **Static linkers.**\nSuch as the Unix ld program take as input a collection of relocatable object files and command line arguments and generate as output a fully linked executable object file that can be loaded and run.","slug":"AssemblerAndLinker","published":1,"updated":"2018-05-06T16:45:54.855Z","comments":1,"photos":[],"link":"","_id":"ckeicschy0007nncvia0vwbht","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Between compiling and executing a High-Level programming language, Many intermediate steps like Lexical Analyzing, Syntax Analyzing, Semantic Analyzing, Pre Optimizing, Assembly Code generation, Post Optimizing,  Assembling,  Linking and Loading are happening. In this post we are mainly covering </p>\n<ul>\n<li>Assembler</li>\n<li>Linker</li>\n<li>Loader</li>\n<li>Disassembler</li>\n</ul>\n<h3 id=\"Assembler\"><a href=\"#Assembler\" class=\"headerlink\" title=\"Assembler\"></a>Assembler</h3><p>Assembler will create  object code from the assembly code. After Assembly Code generation and Post Optimizing, the generated assembly code is translated to Object code. Assembly Language aka <strong>asm</strong> is low-level programming language which is specific for CPU architecture. Its actually human readable representation of machine code.<br>For example:<br>Assembly Code for moving value 55 hex into register BL</p>\n<pre><code>MOV BL, 055H\n</code></pre><p>Corresponding Machine Code</p>\n<pre><code>10111000\n</code></pre><p>An assembler will generate object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents. Each object code file combined to create the executable file.</p>\n<p><strong>In short, assembler will</strong> </p>\n<ul>\n<li>Translate assembly instructions, macros, and  pseudo-instructions into binary machine instructions</li>\n<li>Convert decimal numbers, etc. specified by programmer into binary.</li>\n<li>Put the translated instructions into a file for future use.</li>\n</ul>\n<p><strong>Types of Assemblers</strong></p>\n<p><strong> 1) Two pass assembler </strong><br>In two pass assembler we use two pass to complete generation of machine code. First pass we will create a symbol table <strong>(SYMTAB)</strong> where we keep all the symbols and their values. Any unknown values or addressed we encounter we will add it to the symbol table and update it when we encounter that value in future. For example </p>\n<pre><code>10 JMP LOOP_END     \\\\ Address of label2 is unknown we add this to symbol table.\n11 ADD  EAX EBX\n12 LOOP_END:       \\\\ Here we update the symbol table with actual address.\n\nSymbol Table \n\n| Symbol Name | Symbol Value |\n|:-----------:|:------------:|\n|    LOOP_END |      12      |\n|    Label2   |      18      |\n</code></pre><p>Using the symbol table we will create valid machine code on the second pass.</p>\n<p><strong>2) One pass assembler</strong><br>In one pass assembler, we convert the whole assembly code in to machine code by one pass unlike two pass assembler. We keep different type of symbol table where each unknown symbols and all locations it used are stored. Whenever we encounter the initialization of the symbol we will check the symbol table and go back to  update all places it used with the actual value. </p>\n<p><strong>Object File</strong> </p>\n<p>Object files are group of blocks of information about the program in binary format. Blocks contain program code,  program data, and data structures that guide the linker and loader. Its the output from the assembler there are different forms of object file based on how it used.: </p>\n<ol>\n<li><strong>Relocatable object file</strong>. Contains binary code and data in a form that can be combined with other relocatable object files at compile time to create an executable object file.</li>\n<li><strong>Executable object file</strong>. Contains binary code and data in a form that can be copied directly into memory and executed.</li>\n<li><strong>Shared object file</strong>. A special type of relocatable object file that can be loaded into memory and linked dynamically, at either load time or run time.  </li>\n</ol>\n<p>Common object file formats</p>\n<ul>\n<li><strong>COFF :</strong> Common Object File format. Windows uses a variant of COFF called the Portable Executable (PE) format.</li>\n<li><strong>ELF :</strong> Executable and Linkable Format Mainly used in Linux.</li>\n</ul>\n<h3 id=\"Linker\"><a href=\"#Linker\" class=\"headerlink\" title=\"Linker\"></a>Linker</h3><p>Linker will take all the object file created by the assembler and combine them into a single executable file , library or another big object file.Which can be be loaded to the memory and execute. It enable separate compilation and gives modularity to big programs.</p>\n<ul>\n<li><p><strong>Symbol resolution.</strong><br>Object files define and reference symbols. The purpose of symbol resolution is to associate each symbol reference with exactly one symbol definition.</p>\n</li>\n<li><p><strong>Relocation.</strong><br>Compilers and assemblers generate code and data sections that start at address 0. The linker relocates these sections by associating a memory location with each symbol definition, and then modifying all of the references to those symbols so that they point to this memory location.</p>\n</li>\n<li><p><strong>Static linkers.</strong><br>Such as the Unix ld program take as input a collection of relocatable object files and command line arguments and generate as output a fully linked executable object file that can be loaded and run.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Between compiling and executing a High-Level programming language, Many intermediate steps like Lexical Analyzing, Syntax Analyzing, Semantic Analyzing, Pre Optimizing, Assembly Code generation, Post Optimizing,  Assembling,  Linking and Loading are happening. In this post we are mainly covering </p>\n<ul>\n<li>Assembler</li>\n<li>Linker</li>\n<li>Loader</li>\n<li>Disassembler</li>\n</ul>\n<h3 id=\"Assembler\"><a href=\"#Assembler\" class=\"headerlink\" title=\"Assembler\"></a>Assembler</h3><p>Assembler will create  object code from the assembly code. After Assembly Code generation and Post Optimizing, the generated assembly code is translated to Object code. Assembly Language aka <strong>asm</strong> is low-level programming language which is specific for CPU architecture. Its actually human readable representation of machine code.<br>For example:<br>Assembly Code for moving value 55 hex into register BL</p>\n<pre><code>MOV BL, 055H\n</code></pre><p>Corresponding Machine Code</p>\n<pre><code>10111000\n</code></pre><p>An assembler will generate object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents. Each object code file combined to create the executable file.</p>\n<p><strong>In short, assembler will</strong> </p>\n<ul>\n<li>Translate assembly instructions, macros, and  pseudo-instructions into binary machine instructions</li>\n<li>Convert decimal numbers, etc. specified by programmer into binary.</li>\n<li>Put the translated instructions into a file for future use.</li>\n</ul>\n<p><strong>Types of Assemblers</strong></p>\n<p><strong> 1) Two pass assembler </strong><br>In two pass assembler we use two pass to complete generation of machine code. First pass we will create a symbol table <strong>(SYMTAB)</strong> where we keep all the symbols and their values. Any unknown values or addressed we encounter we will add it to the symbol table and update it when we encounter that value in future. For example </p>\n<pre><code>10 JMP LOOP_END     \\\\ Address of label2 is unknown we add this to symbol table.\n11 ADD  EAX EBX\n12 LOOP_END:       \\\\ Here we update the symbol table with actual address.\n\nSymbol Table \n\n| Symbol Name | Symbol Value |\n|:-----------:|:------------:|\n|    LOOP_END |      12      |\n|    Label2   |      18      |\n</code></pre><p>Using the symbol table we will create valid machine code on the second pass.</p>\n<p><strong>2) One pass assembler</strong><br>In one pass assembler, we convert the whole assembly code in to machine code by one pass unlike two pass assembler. We keep different type of symbol table where each unknown symbols and all locations it used are stored. Whenever we encounter the initialization of the symbol we will check the symbol table and go back to  update all places it used with the actual value. </p>\n<p><strong>Object File</strong> </p>\n<p>Object files are group of blocks of information about the program in binary format. Blocks contain program code,  program data, and data structures that guide the linker and loader. Its the output from the assembler there are different forms of object file based on how it used.: </p>\n<ol>\n<li><strong>Relocatable object file</strong>. Contains binary code and data in a form that can be combined with other relocatable object files at compile time to create an executable object file.</li>\n<li><strong>Executable object file</strong>. Contains binary code and data in a form that can be copied directly into memory and executed.</li>\n<li><strong>Shared object file</strong>. A special type of relocatable object file that can be loaded into memory and linked dynamically, at either load time or run time.  </li>\n</ol>\n<p>Common object file formats</p>\n<ul>\n<li><strong>COFF :</strong> Common Object File format. Windows uses a variant of COFF called the Portable Executable (PE) format.</li>\n<li><strong>ELF :</strong> Executable and Linkable Format Mainly used in Linux.</li>\n</ul>\n<h3 id=\"Linker\"><a href=\"#Linker\" class=\"headerlink\" title=\"Linker\"></a>Linker</h3><p>Linker will take all the object file created by the assembler and combine them into a single executable file , library or another big object file.Which can be be loaded to the memory and execute. It enable separate compilation and gives modularity to big programs.</p>\n<ul>\n<li><p><strong>Symbol resolution.</strong><br>Object files define and reference symbols. The purpose of symbol resolution is to associate each symbol reference with exactly one symbol definition.</p>\n</li>\n<li><p><strong>Relocation.</strong><br>Compilers and assemblers generate code and data sections that start at address 0. The linker relocates these sections by associating a memory location with each symbol definition, and then modifying all of the references to those symbols so that they point to this memory location.</p>\n</li>\n<li><p><strong>Static linkers.</strong><br>Such as the Unix ld program take as input a collection of relocatable object files and command line arguments and generate as output a fully linked executable object file that can be loaded and run.</p>\n</li>\n</ul>\n"},{"layout":"post","title":"F# Mentorship Program : Week-1","subtitle":" \"F# Software Foundation’s Mentorship Program.\"","date":"2017-10-02T17:32:15.000Z","author":"Nithin VR","header-img":"FSharpInViolate.png","catalog":true,"_content":"# F# Software Foundation’s Mentorship Program\nIt is my pleasure to share that I have got selected in [F# Software Foundation’s Mentorship](http://fsharp.org/mentorship/about.html) Program. I got a great mentor, Oleg Golovin. As per the discussion we decided to meet one hour in every weekend using Skype. For the first 30 minutes will to clearing my doubts regarding F# and next 30 minutes will be used to do solving challenges in HackerRank via pair programming. I am totally excited about this. Hoping I will fully utilize this opportunity.\nFirst week meet up held on 10-Sep-2017, we had a Skype call. We started off with a general introduction to F#. I discussed about how I am learning F# now and which all materials I am following. Oleg suggested me to refer the [F# for fun and profit](https://fsharpforfunandprofit.com) web site and suggested on practicing more questions from the [HackerRank Functional Programming](https://www.hackerrank.com/domains/fp/intro).\n**My setup:** Mac OS X, VS Code, Ionide.\n### New concepts I learned\n- **map**\nmap method on a list, will apply the passing function to each element and create a new list. `map` is supported with Array, List, Seq , etc.\n```FSharp\nlet list1 = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\nlet list2 = \n    list1 \n    |> List.map (fun x -> x * 2)\n// list2 = [2; 4; 6; 8; 10; 12; 14; 16; 18; 20]\n```\n- **fold**\nA \"fold\" operation applies given function to each element in a list and pass around the accumulator which is initialized. Returns the accumulator as the result of the fold operation. `fold` is supported with Array, List, Seq, Set and Map.\n```FSharp\nlet list1 = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\nlet sum =\n    list1\n    |> List.fold (fun elmnt sum -> elmnt + sum) 0 // we are initializing\n// return value of the function will be passed as accumulator(sum) in next iteration.\n// sum = 55\n```\n- **How calling function is different**\n```FSharp\nlet foo() =\n    printfn \"Hello world\"\nfoo   // this won't call the foo it will return the function\nfoo() // this will call the actual foo since we are passing `()` unit type\n```\nIn F# every function accept a single parameter we have to pass the unit type `()` even if the function accepts nothing. \n\n- **unit type**\nunit type means absence of any values. It is just a placeholder to use the when no value is available or required. Its value is `()`. For example functions like printf will return nothing but a unit type. TLDR : F# unit = C# void\n### Here are the few questions we discussed.\n1. *Type representation is little confusing, like tuple is (a, b) but in type highlighter will show it as a * b , Is there a good place look for more details to understand about this type representation?*\nI think this is done in part to avoid confusion with multi-argument generics like 'Dictionary<string, int>'. Imagine that dictionary values is tuples of two integers '(int, int)'. So, 'Dictionary<string, int, int>'? 'Dictionary<string, (int, int)>'? To me, 'Dictionary<string, int * int>' is cleaner, because '*' is easily recognized as tuple mark, where for '()' you have to look more carefully into type definition.\n\n2. *Why do we need to explicitly specify a function is recursive using rec?*\nThere is excellent answer here: [Stack Overflow](https://stackoverflow.com/questions/900585/why-are-functions-in-ocaml-f-not-recursive-by-default) Basically, that's just historical choice.\n\n3. *Won't the immutability cause to use more memory, since every time we create a new change we are creating a new object/value?*\nYes, immutability would cause to use a lot more memory... if you are careless with collections and object passing. Also, FSharp structures is heavily optimized. So, for example, when you add new element to the list, it doesn't create new copy of a list with all copies of its elements. FSharp just creates one new list element, marks it as head for 'new' list, and attaches old list as tail. Arrays are not that way, they actually copy all of their contents.\n\n4. *I read some where using mutable variable is not a functional way, in F# do we always try or prefer to not use mutable variables?*\nIt's better when your function always returns the same result with the same inputs. But if we declare and use mutable variable somewhere inside that function - the 'same result' guarantee is lower. If we use mutable variable that's declared elsewhere - there's no guarantee, that some other function hasn't changed it, so we wouldn't get 'same result'. Of course going strict 'no mutables' is not a good way. I find it preferable to not use public mutables - when you absolutely need to have some state that changes over time on long-living entity, it's totally okay to use private mutable.\n\n5. *Why arrays are mutable while lists are not?*\nArray in F# has the same base as in C# - System.Array. So, naturally, they behave the same as in C#. Lists, on the other hand, is immutable special 'FSharpList'. When you add an element, you actually create new list as I described above. If you try to mutate the element in the list - the head that previously was pointing to that element is now pointing into corrupted memory, because the list is singly-linked. You change the element - and the tail gets disconnected from former head.","source":"_posts/FSharpMentorship-1.md","raw":"---\nlayout: post\ntitle: \"F# Mentorship Program : Week-1\"\nsubtitle: \" \\\"F# Software Foundation’s Mentorship Program.\\\"\"\ndate: 2017-10-02 19:32:15\nauthor: \"Nithin VR\"\nheader-img: \"FSharpInViolate.png\"\ncatalog: true\ntags:\n    - F#\n---\n# F# Software Foundation’s Mentorship Program\nIt is my pleasure to share that I have got selected in [F# Software Foundation’s Mentorship](http://fsharp.org/mentorship/about.html) Program. I got a great mentor, Oleg Golovin. As per the discussion we decided to meet one hour in every weekend using Skype. For the first 30 minutes will to clearing my doubts regarding F# and next 30 minutes will be used to do solving challenges in HackerRank via pair programming. I am totally excited about this. Hoping I will fully utilize this opportunity.\nFirst week meet up held on 10-Sep-2017, we had a Skype call. We started off with a general introduction to F#. I discussed about how I am learning F# now and which all materials I am following. Oleg suggested me to refer the [F# for fun and profit](https://fsharpforfunandprofit.com) web site and suggested on practicing more questions from the [HackerRank Functional Programming](https://www.hackerrank.com/domains/fp/intro).\n**My setup:** Mac OS X, VS Code, Ionide.\n### New concepts I learned\n- **map**\nmap method on a list, will apply the passing function to each element and create a new list. `map` is supported with Array, List, Seq , etc.\n```FSharp\nlet list1 = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\nlet list2 = \n    list1 \n    |> List.map (fun x -> x * 2)\n// list2 = [2; 4; 6; 8; 10; 12; 14; 16; 18; 20]\n```\n- **fold**\nA \"fold\" operation applies given function to each element in a list and pass around the accumulator which is initialized. Returns the accumulator as the result of the fold operation. `fold` is supported with Array, List, Seq, Set and Map.\n```FSharp\nlet list1 = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\nlet sum =\n    list1\n    |> List.fold (fun elmnt sum -> elmnt + sum) 0 // we are initializing\n// return value of the function will be passed as accumulator(sum) in next iteration.\n// sum = 55\n```\n- **How calling function is different**\n```FSharp\nlet foo() =\n    printfn \"Hello world\"\nfoo   // this won't call the foo it will return the function\nfoo() // this will call the actual foo since we are passing `()` unit type\n```\nIn F# every function accept a single parameter we have to pass the unit type `()` even if the function accepts nothing. \n\n- **unit type**\nunit type means absence of any values. It is just a placeholder to use the when no value is available or required. Its value is `()`. For example functions like printf will return nothing but a unit type. TLDR : F# unit = C# void\n### Here are the few questions we discussed.\n1. *Type representation is little confusing, like tuple is (a, b) but in type highlighter will show it as a * b , Is there a good place look for more details to understand about this type representation?*\nI think this is done in part to avoid confusion with multi-argument generics like 'Dictionary<string, int>'. Imagine that dictionary values is tuples of two integers '(int, int)'. So, 'Dictionary<string, int, int>'? 'Dictionary<string, (int, int)>'? To me, 'Dictionary<string, int * int>' is cleaner, because '*' is easily recognized as tuple mark, where for '()' you have to look more carefully into type definition.\n\n2. *Why do we need to explicitly specify a function is recursive using rec?*\nThere is excellent answer here: [Stack Overflow](https://stackoverflow.com/questions/900585/why-are-functions-in-ocaml-f-not-recursive-by-default) Basically, that's just historical choice.\n\n3. *Won't the immutability cause to use more memory, since every time we create a new change we are creating a new object/value?*\nYes, immutability would cause to use a lot more memory... if you are careless with collections and object passing. Also, FSharp structures is heavily optimized. So, for example, when you add new element to the list, it doesn't create new copy of a list with all copies of its elements. FSharp just creates one new list element, marks it as head for 'new' list, and attaches old list as tail. Arrays are not that way, they actually copy all of their contents.\n\n4. *I read some where using mutable variable is not a functional way, in F# do we always try or prefer to not use mutable variables?*\nIt's better when your function always returns the same result with the same inputs. But if we declare and use mutable variable somewhere inside that function - the 'same result' guarantee is lower. If we use mutable variable that's declared elsewhere - there's no guarantee, that some other function hasn't changed it, so we wouldn't get 'same result'. Of course going strict 'no mutables' is not a good way. I find it preferable to not use public mutables - when you absolutely need to have some state that changes over time on long-living entity, it's totally okay to use private mutable.\n\n5. *Why arrays are mutable while lists are not?*\nArray in F# has the same base as in C# - System.Array. So, naturally, they behave the same as in C#. Lists, on the other hand, is immutable special 'FSharpList'. When you add an element, you actually create new list as I described above. If you try to mutate the element in the list - the head that previously was pointing to that element is now pointing into corrupted memory, because the list is singly-linked. You change the element - and the tail gets disconnected from former head.","slug":"FSharpMentorship-1","published":1,"updated":"2018-05-06T16:45:54.860Z","comments":1,"photos":[],"link":"","_id":"ckeicscid0008nncv7tgj43hx","content":"<h1 id=\"F-Software-Foundation’s-Mentorship-Program\"><a href=\"#F-Software-Foundation’s-Mentorship-Program\" class=\"headerlink\" title=\"F# Software Foundation’s Mentorship Program\"></a>F# Software Foundation’s Mentorship Program</h1><p>It is my pleasure to share that I have got selected in <a href=\"http://fsharp.org/mentorship/about.html\" target=\"_blank\" rel=\"external\">F# Software Foundation’s Mentorship</a> Program. I got a great mentor, Oleg Golovin. As per the discussion we decided to meet one hour in every weekend using Skype. For the first 30 minutes will to clearing my doubts regarding F# and next 30 minutes will be used to do solving challenges in HackerRank via pair programming. I am totally excited about this. Hoping I will fully utilize this opportunity.<br>First week meet up held on 10-Sep-2017, we had a Skype call. We started off with a general introduction to F#. I discussed about how I am learning F# now and which all materials I am following. Oleg suggested me to refer the <a href=\"https://fsharpforfunandprofit.com\" target=\"_blank\" rel=\"external\">F# for fun and profit</a> web site and suggested on practicing more questions from the <a href=\"https://www.hackerrank.com/domains/fp/intro\" target=\"_blank\" rel=\"external\">HackerRank Functional Programming</a>.<br><strong>My setup:</strong> Mac OS X, VS Code, Ionide.</p>\n<h3 id=\"New-concepts-I-learned\"><a href=\"#New-concepts-I-learned\" class=\"headerlink\" title=\"New concepts I learned\"></a>New concepts I learned</h3><ul>\n<li><p><strong>map</strong><br>map method on a list, will apply the passing function to each element and create a new list. <code>map</code> is supported with Array, List, Seq , etc.</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> list1 = [<span class=\"number\">1</span>; <span class=\"number\">2</span>; <span class=\"number\">3</span>; <span class=\"number\">4</span>; <span class=\"number\">5</span>; <span class=\"number\">6</span>; <span class=\"number\">7</span>; <span class=\"number\">8</span>; <span class=\"number\">9</span>; <span class=\"number\">10</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> list2 = </div><div class=\"line\">    list1 </div><div class=\"line\">    |&gt; List.map (<span class=\"keyword\">fun</span> x -&gt; x * <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// list2 = [2; 4; 6; 8; 10; 12; 14; 16; 18; 20]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>fold</strong><br>A “fold” operation applies given function to each element in a list and pass around the accumulator which is initialized. Returns the accumulator as the result of the fold operation. <code>fold</code> is supported with Array, List, Seq, Set and Map.</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> list1 = [<span class=\"number\">1</span>; <span class=\"number\">2</span>; <span class=\"number\">3</span>; <span class=\"number\">4</span>; <span class=\"number\">5</span>; <span class=\"number\">6</span>; <span class=\"number\">7</span>; <span class=\"number\">8</span>; <span class=\"number\">9</span>; <span class=\"number\">10</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> sum =</div><div class=\"line\">    list1</div><div class=\"line\">    |&gt; List.fold (<span class=\"keyword\">fun</span> elmnt sum -&gt; elmnt + sum) <span class=\"number\">0</span> <span class=\"comment\">// we are initializing</span></div><div class=\"line\"><span class=\"comment\">// return value of the function will be passed as accumulator(sum) in next iteration.</span></div><div class=\"line\"><span class=\"comment\">// sum = 55</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>How calling function is different</strong></p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> foo() =</div><div class=\"line\">    printfn <span class=\"string\">\"Hello world\"</span></div><div class=\"line\">foo   <span class=\"comment\">// this won't call the foo it will return the function</span></div><div class=\"line\">foo() <span class=\"comment\">// this will call the actual foo since we are passing `()` unit type</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>In F# every function accept a single parameter we have to pass the unit type <code>()</code> even if the function accepts nothing. </p>\n<ul>\n<li><strong>unit type</strong><br>unit type means absence of any values. It is just a placeholder to use the when no value is available or required. Its value is <code>()</code>. For example functions like printf will return nothing but a unit type. TLDR : F# unit = C# void<h3 id=\"Here-are-the-few-questions-we-discussed\"><a href=\"#Here-are-the-few-questions-we-discussed\" class=\"headerlink\" title=\"Here are the few questions we discussed.\"></a>Here are the few questions we discussed.</h3></li>\n</ul>\n<ol>\n<li><p><em>Type representation is little confusing, like tuple is (a, b) but in type highlighter will show it as a </em> b , Is there a good place look for more details to understand about this type representation?<em><br>I think this is done in part to avoid confusion with multi-argument generics like ‘Dictionary<string, int=\"\">‘. Imagine that dictionary values is tuples of two integers ‘(int, int)’. So, ‘Dictionary<string, int,=\"\" int=\"\">‘? ‘Dictionary<string, (int,=\"\" int)=\"\">‘? To me, ‘Dictionary&lt;string, int </string,></string,></string,></em> int&gt;’ is cleaner, because ‘*’ is easily recognized as tuple mark, where for ‘()’ you have to look more carefully into type definition.</p>\n</li>\n<li><p><em>Why do we need to explicitly specify a function is recursive using rec?</em><br>There is excellent answer here: <a href=\"https://stackoverflow.com/questions/900585/why-are-functions-in-ocaml-f-not-recursive-by-default\" target=\"_blank\" rel=\"external\">Stack Overflow</a> Basically, that’s just historical choice.</p>\n</li>\n<li><p><em>Won’t the immutability cause to use more memory, since every time we create a new change we are creating a new object/value?</em><br>Yes, immutability would cause to use a lot more memory… if you are careless with collections and object passing. Also, FSharp structures is heavily optimized. So, for example, when you add new element to the list, it doesn’t create new copy of a list with all copies of its elements. FSharp just creates one new list element, marks it as head for ‘new’ list, and attaches old list as tail. Arrays are not that way, they actually copy all of their contents.</p>\n</li>\n<li><p><em>I read some where using mutable variable is not a functional way, in F# do we always try or prefer to not use mutable variables?</em><br>It’s better when your function always returns the same result with the same inputs. But if we declare and use mutable variable somewhere inside that function - the ‘same result’ guarantee is lower. If we use mutable variable that’s declared elsewhere - there’s no guarantee, that some other function hasn’t changed it, so we wouldn’t get ‘same result’. Of course going strict ‘no mutables’ is not a good way. I find it preferable to not use public mutables - when you absolutely need to have some state that changes over time on long-living entity, it’s totally okay to use private mutable.</p>\n</li>\n<li><p><em>Why arrays are mutable while lists are not?</em><br>Array in F# has the same base as in C# - System.Array. So, naturally, they behave the same as in C#. Lists, on the other hand, is immutable special ‘FSharpList’. When you add an element, you actually create new list as I described above. If you try to mutate the element in the list - the head that previously was pointing to that element is now pointing into corrupted memory, because the list is singly-linked. You change the element - and the tail gets disconnected from former head.</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"F-Software-Foundation’s-Mentorship-Program\"><a href=\"#F-Software-Foundation’s-Mentorship-Program\" class=\"headerlink\" title=\"F# Software Foundation’s Mentorship Program\"></a>F# Software Foundation’s Mentorship Program</h1><p>It is my pleasure to share that I have got selected in <a href=\"http://fsharp.org/mentorship/about.html\" target=\"_blank\" rel=\"external\">F# Software Foundation’s Mentorship</a> Program. I got a great mentor, Oleg Golovin. As per the discussion we decided to meet one hour in every weekend using Skype. For the first 30 minutes will to clearing my doubts regarding F# and next 30 minutes will be used to do solving challenges in HackerRank via pair programming. I am totally excited about this. Hoping I will fully utilize this opportunity.<br>First week meet up held on 10-Sep-2017, we had a Skype call. We started off with a general introduction to F#. I discussed about how I am learning F# now and which all materials I am following. Oleg suggested me to refer the <a href=\"https://fsharpforfunandprofit.com\" target=\"_blank\" rel=\"external\">F# for fun and profit</a> web site and suggested on practicing more questions from the <a href=\"https://www.hackerrank.com/domains/fp/intro\" target=\"_blank\" rel=\"external\">HackerRank Functional Programming</a>.<br><strong>My setup:</strong> Mac OS X, VS Code, Ionide.</p>\n<h3 id=\"New-concepts-I-learned\"><a href=\"#New-concepts-I-learned\" class=\"headerlink\" title=\"New concepts I learned\"></a>New concepts I learned</h3><ul>\n<li><p><strong>map</strong><br>map method on a list, will apply the passing function to each element and create a new list. <code>map</code> is supported with Array, List, Seq , etc.</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> list1 = [<span class=\"number\">1</span>; <span class=\"number\">2</span>; <span class=\"number\">3</span>; <span class=\"number\">4</span>; <span class=\"number\">5</span>; <span class=\"number\">6</span>; <span class=\"number\">7</span>; <span class=\"number\">8</span>; <span class=\"number\">9</span>; <span class=\"number\">10</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> list2 = </div><div class=\"line\">    list1 </div><div class=\"line\">    |&gt; List.map (<span class=\"keyword\">fun</span> x -&gt; x * <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// list2 = [2; 4; 6; 8; 10; 12; 14; 16; 18; 20]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>fold</strong><br>A “fold” operation applies given function to each element in a list and pass around the accumulator which is initialized. Returns the accumulator as the result of the fold operation. <code>fold</code> is supported with Array, List, Seq, Set and Map.</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> list1 = [<span class=\"number\">1</span>; <span class=\"number\">2</span>; <span class=\"number\">3</span>; <span class=\"number\">4</span>; <span class=\"number\">5</span>; <span class=\"number\">6</span>; <span class=\"number\">7</span>; <span class=\"number\">8</span>; <span class=\"number\">9</span>; <span class=\"number\">10</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> sum =</div><div class=\"line\">    list1</div><div class=\"line\">    |&gt; List.fold (<span class=\"keyword\">fun</span> elmnt sum -&gt; elmnt + sum) <span class=\"number\">0</span> <span class=\"comment\">// we are initializing</span></div><div class=\"line\"><span class=\"comment\">// return value of the function will be passed as accumulator(sum) in next iteration.</span></div><div class=\"line\"><span class=\"comment\">// sum = 55</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>How calling function is different</strong></p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> foo() =</div><div class=\"line\">    printfn <span class=\"string\">\"Hello world\"</span></div><div class=\"line\">foo   <span class=\"comment\">// this won't call the foo it will return the function</span></div><div class=\"line\">foo() <span class=\"comment\">// this will call the actual foo since we are passing `()` unit type</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>In F# every function accept a single parameter we have to pass the unit type <code>()</code> even if the function accepts nothing. </p>\n<ul>\n<li><strong>unit type</strong><br>unit type means absence of any values. It is just a placeholder to use the when no value is available or required. Its value is <code>()</code>. For example functions like printf will return nothing but a unit type. TLDR : F# unit = C# void<h3 id=\"Here-are-the-few-questions-we-discussed\"><a href=\"#Here-are-the-few-questions-we-discussed\" class=\"headerlink\" title=\"Here are the few questions we discussed.\"></a>Here are the few questions we discussed.</h3></li>\n</ul>\n<ol>\n<li><p><em>Type representation is little confusing, like tuple is (a, b) but in type highlighter will show it as a </em> b , Is there a good place look for more details to understand about this type representation?<em><br>I think this is done in part to avoid confusion with multi-argument generics like ‘Dictionary<string, int=\"\">‘. Imagine that dictionary values is tuples of two integers ‘(int, int)’. So, ‘Dictionary<string, int,=\"\" int=\"\">‘? ‘Dictionary<string, (int,=\"\" int)=\"\">‘? To me, ‘Dictionary&lt;string, int </string,></string,></string,></em> int&gt;’ is cleaner, because ‘*’ is easily recognized as tuple mark, where for ‘()’ you have to look more carefully into type definition.</p>\n</li>\n<li><p><em>Why do we need to explicitly specify a function is recursive using rec?</em><br>There is excellent answer here: <a href=\"https://stackoverflow.com/questions/900585/why-are-functions-in-ocaml-f-not-recursive-by-default\" target=\"_blank\" rel=\"external\">Stack Overflow</a> Basically, that’s just historical choice.</p>\n</li>\n<li><p><em>Won’t the immutability cause to use more memory, since every time we create a new change we are creating a new object/value?</em><br>Yes, immutability would cause to use a lot more memory… if you are careless with collections and object passing. Also, FSharp structures is heavily optimized. So, for example, when you add new element to the list, it doesn’t create new copy of a list with all copies of its elements. FSharp just creates one new list element, marks it as head for ‘new’ list, and attaches old list as tail. Arrays are not that way, they actually copy all of their contents.</p>\n</li>\n<li><p><em>I read some where using mutable variable is not a functional way, in F# do we always try or prefer to not use mutable variables?</em><br>It’s better when your function always returns the same result with the same inputs. But if we declare and use mutable variable somewhere inside that function - the ‘same result’ guarantee is lower. If we use mutable variable that’s declared elsewhere - there’s no guarantee, that some other function hasn’t changed it, so we wouldn’t get ‘same result’. Of course going strict ‘no mutables’ is not a good way. I find it preferable to not use public mutables - when you absolutely need to have some state that changes over time on long-living entity, it’s totally okay to use private mutable.</p>\n</li>\n<li><p><em>Why arrays are mutable while lists are not?</em><br>Array in F# has the same base as in C# - System.Array. So, naturally, they behave the same as in C#. Lists, on the other hand, is immutable special ‘FSharpList’. When you add an element, you actually create new list as I described above. If you try to mutate the element in the list - the head that previously was pointing to that element is now pointing into corrupted memory, because the list is singly-linked. You change the element - and the tail gets disconnected from former head.</p>\n</li>\n</ol>\n"},{"layout":"post","title":"GSoC 2020 - Find null smart pointer dereferences with the LLVM-Clang Static Analyzer","date":"2020-06-02T17:50:03.000Z","subtitle":"","author":"Nithin","header-img":"llvm.png","catalog":true,"_content":"I am happy to announce that my proposal for GSoC 2020 - Find null smart pointer dereferences with the LLVM-Clang Static Analyzer got accepted. This summer I will be working on adding the feature to the static analyser to find null smart pointer dereferences. \n\nI am very much excited and terrified. Hopefully with help from my mentors **Artem Dergachev**, **Gabor Horwath**, and **Valeriy Savchenkod**, I will be able to finish the project with.\n\nI will try to blog my progress and anything exciting I find in my journey.\n\n---\n[More Details: Find null smart pointer dereferences with the Static Analyzer](https://summerofcode.withgoogle.com/projects/#5376312975294464)\n","source":"_posts/GSoC-2020.md","raw":"---\nlayout:     post\ntitle: GSoC 2020 - Find null smart pointer dereferences with the LLVM-Clang Static Analyzer\ndate: 2020-06-2 19:50:03\nsubtitle: \"\"\nauthor:     \"Nithin\"\nheader-img: \"llvm.png\"\ncatalog: true\ntags:\n    - LLVM\n    - Clang\n    - Static-Analysis\n---\nI am happy to announce that my proposal for GSoC 2020 - Find null smart pointer dereferences with the LLVM-Clang Static Analyzer got accepted. This summer I will be working on adding the feature to the static analyser to find null smart pointer dereferences. \n\nI am very much excited and terrified. Hopefully with help from my mentors **Artem Dergachev**, **Gabor Horwath**, and **Valeriy Savchenkod**, I will be able to finish the project with.\n\nI will try to blog my progress and anything exciting I find in my journey.\n\n---\n[More Details: Find null smart pointer dereferences with the Static Analyzer](https://summerofcode.withgoogle.com/projects/#5376312975294464)\n","slug":"GSoC-2020","published":1,"updated":"2020-06-02T18:05:28.778Z","comments":1,"photos":[],"link":"","_id":"ckeicscig000anncvni9aybye","content":"<p>I am happy to announce that my proposal for GSoC 2020 - Find null smart pointer dereferences with the LLVM-Clang Static Analyzer got accepted. This summer I will be working on adding the feature to the static analyser to find null smart pointer dereferences. </p>\n<p>I am very much excited and terrified. Hopefully with help from my mentors <strong>Artem Dergachev</strong>, <strong>Gabor Horwath</strong>, and <strong>Valeriy Savchenkod</strong>, I will be able to finish the project with.</p>\n<p>I will try to blog my progress and anything exciting I find in my journey.</p>\n<hr>\n<p><a href=\"https://summerofcode.withgoogle.com/projects/#5376312975294464\" target=\"_blank\" rel=\"external\">More Details: Find null smart pointer dereferences with the Static Analyzer</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>I am happy to announce that my proposal for GSoC 2020 - Find null smart pointer dereferences with the LLVM-Clang Static Analyzer got accepted. This summer I will be working on adding the feature to the static analyser to find null smart pointer dereferences. </p>\n<p>I am very much excited and terrified. Hopefully with help from my mentors <strong>Artem Dergachev</strong>, <strong>Gabor Horwath</strong>, and <strong>Valeriy Savchenkod</strong>, I will be able to finish the project with.</p>\n<p>I will try to blog my progress and anything exciting I find in my journey.</p>\n<hr>\n<p><a href=\"https://summerofcode.withgoogle.com/projects/#5376312975294464\" target=\"_blank\" rel=\"external\">More Details: Find null smart pointer dereferences with the Static Analyzer</a></p>\n"},{"layout":"post","title":"F# Mentorship Program : Week-2","subtitle":" \"F# Software Foundation’s Mentorship Program. Week-2\"","date":"2017-10-29T19:41:49.000Z","author":"Nithin VR","header-img":"FSharpInViolate.png","catalog":true,"_content":"\n### Summary:\nI updated my progress in both sharp for fun and profit and hacker rank, we discussed one of my solution in hacker rank. Oleg suggested to try Fibonacci in different ways. We tried solving the a problem from hackerrank - [Compute the Perimeter of a Polygon](https://www.hackerrank.com/challenges/lambda-march-compute-the-perimeter-of-a-polygon).\n#### My initial code\n```CSharp\n//Enter your code here. Read input from STDIN. Print output to STDOUT\nlet distance (x1:int,y1:int) (x2:int,y2:int) =\n    let xDiff = abs x1-x2\n    let yDiff = abs y1-y2\n    let sqrSum = (pown xDiff 2)+( pown yDiff 2)\n    sqrt (double sqrSum)\n    \nlet getPoint (s:string) =\n    let va = \n        s.Split(' ') \n        |> Array.map System.Int32.Parse\n    (va.[0], va.[1])\n\n[<EntryPoint>]\nlet main argv = \n    let t = System.Console.ReadLine()|> int\n    let values = \n        Seq.initInfinite(fun _ -> System.Console.ReadLine())\n        |> Seq.takeWhile(isNull >> not)\n        |> Seq.map getPoint\n        |> Seq.toList\n\n    let first, rest  = values.[0], List.tail values\n    \n    let foldFunc (perimeter, prevPoint) nxtPoint =\n        perimeter+(distance prevPoint nxtPoint), nxtPoint\n\n    let (finalPerimeter , last) = List.fold foldFunc (0.0, first) rest\n    \n    printfn \"%f\" (finalPerimeter + (distance first last))\n    0\n```\n#### Cleaned up code\n```CSharp\n//Enter your code here. Read input from STDIN. Print output to STDOUT\nlet distance ((x1:int,y1:int), (x2:int,y2:int)) =\n    let xDiff = abs x1-x2\n    let yDiff = abs y1-y2\n    let sqrSum = (pown xDiff 2)+( pown yDiff 2)\n    sqrt (double sqrSum)\n\nlet getPoint (s:string) =\n    let [| x ; y |] = \n        s.Split(' ') \n        |> Array.map System.Int32.Parse\n    x, y\n\n[<EntryPoint>]\nlet main argv = \n    let testCases = System.Console.ReadLine()|> int\n    let mutable firstPoint = (0,0)\n    let values = \n        Seq.init testCases (fun i -> System.Console.ReadLine())\n        |> Seq.map getPoint\n        |> Seq.toList\n        \n    let lines = Seq.pairwise (values.[0]::(List.rev values))\n    \n    let perimeter = \n        lines\n        |> Seq.map distance \n        |> Seq.sum\n    \n    printfn \"%f\" perimeter\n    0\n```\n### New concepts I learned\n- **Seq.pairwise**\nSeq.pairwise method will take a sequence and returns a sequence of tuple with element in the input sequence and its predecessor.\neg: `Seq.pairwise [1..4]` returns `[(1, 2); (2, 3); (3, 4)]`\n- **Seq.init**\nGenerates a new sequence which, when iterated, will return successive elements by calling the given function, up to the given count. eg :Seq.init count initializer\neg : `Seq.init 4 (fun n -> n * 2)` returns `[0, 2, 4, 6]`\n\n- **yield** **VS** **yield!(yield bang)**\n```csharp\nlet simpleYield = seq { for i in 1..5 do yield i}\n\\\\ returns {1, 2, 3, 4, 5}\n\nlet simpleYieldBang = seq { for i in 6..10 do yield i; yield!  simpleYield}\n\\\\ returns {6, 7, 8, 9, 10, 1, 2, 3, 4, 5} \n```\n`yield!` will allow to yield a seq as elements not just as seq. It will yield each elements in the sequence.\n\n### Here are the few questions we discussed\n1. *Is None is same as null of C#?*\nYes. When we convert the F# to C# it is similar to null. It is used to represent a value that may not exist or invalid.\n\n2. *Is there any types for None or Some?*\nYes. It is called Option type a union type of two case `None` and `Some`. eg : `int option` is a option type which wraps a int value. It is used with pattern matching for handling cases like where valid value not exists. [More Details](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/options)\n\n3. *Is List.fold is recursive calling or for loop inside implementation?*\nAnalyze a recursive data structure, fold recombine the results of recursively processing its constituent parts, building up a return value.\n\n4. *Is Seq.unfold similar to lazy list in C#? Is it storing any state internally?*\nInternal structure for iterator and we a calculating on the fly. Elements in the stream are generated on-demand by applying the element generator, until a None value is returned by the element generator. Each call to the element generator returns a new residual state.\n\n5. *Partial application, is the parameter passing always follow from the left to right?*\nYes. It follows parameter passing order always follow from the left to right.\n\n6. *While finding the type by type inference do we actually handle the runtime case?* \nFor example : \n    `let x = 2147483647 + 1` **No error** \n    `let y = 2147483648 ` **Shows error FS1147: This number is outside the allowable range for 32-bit signed integers.**\nCompiler will check only the current values is in the set of supported values of the type. It will not do any operation to verify the type.\n","source":"_posts/FSharpMentorship-2.md","raw":"---\nlayout: post\ntitle: \"F# Mentorship Program : Week-2\"\nsubtitle: \" \\\"F# Software Foundation’s Mentorship Program. Week-2\\\"\"\ndate: 2017-10-29 20:41:49\nauthor: \"Nithin VR\"\nheader-img: \"FSharpInViolate.png\"\ncatalog: true\ntags:\n    - F#\n---\n\n### Summary:\nI updated my progress in both sharp for fun and profit and hacker rank, we discussed one of my solution in hacker rank. Oleg suggested to try Fibonacci in different ways. We tried solving the a problem from hackerrank - [Compute the Perimeter of a Polygon](https://www.hackerrank.com/challenges/lambda-march-compute-the-perimeter-of-a-polygon).\n#### My initial code\n```CSharp\n//Enter your code here. Read input from STDIN. Print output to STDOUT\nlet distance (x1:int,y1:int) (x2:int,y2:int) =\n    let xDiff = abs x1-x2\n    let yDiff = abs y1-y2\n    let sqrSum = (pown xDiff 2)+( pown yDiff 2)\n    sqrt (double sqrSum)\n    \nlet getPoint (s:string) =\n    let va = \n        s.Split(' ') \n        |> Array.map System.Int32.Parse\n    (va.[0], va.[1])\n\n[<EntryPoint>]\nlet main argv = \n    let t = System.Console.ReadLine()|> int\n    let values = \n        Seq.initInfinite(fun _ -> System.Console.ReadLine())\n        |> Seq.takeWhile(isNull >> not)\n        |> Seq.map getPoint\n        |> Seq.toList\n\n    let first, rest  = values.[0], List.tail values\n    \n    let foldFunc (perimeter, prevPoint) nxtPoint =\n        perimeter+(distance prevPoint nxtPoint), nxtPoint\n\n    let (finalPerimeter , last) = List.fold foldFunc (0.0, first) rest\n    \n    printfn \"%f\" (finalPerimeter + (distance first last))\n    0\n```\n#### Cleaned up code\n```CSharp\n//Enter your code here. Read input from STDIN. Print output to STDOUT\nlet distance ((x1:int,y1:int), (x2:int,y2:int)) =\n    let xDiff = abs x1-x2\n    let yDiff = abs y1-y2\n    let sqrSum = (pown xDiff 2)+( pown yDiff 2)\n    sqrt (double sqrSum)\n\nlet getPoint (s:string) =\n    let [| x ; y |] = \n        s.Split(' ') \n        |> Array.map System.Int32.Parse\n    x, y\n\n[<EntryPoint>]\nlet main argv = \n    let testCases = System.Console.ReadLine()|> int\n    let mutable firstPoint = (0,0)\n    let values = \n        Seq.init testCases (fun i -> System.Console.ReadLine())\n        |> Seq.map getPoint\n        |> Seq.toList\n        \n    let lines = Seq.pairwise (values.[0]::(List.rev values))\n    \n    let perimeter = \n        lines\n        |> Seq.map distance \n        |> Seq.sum\n    \n    printfn \"%f\" perimeter\n    0\n```\n### New concepts I learned\n- **Seq.pairwise**\nSeq.pairwise method will take a sequence and returns a sequence of tuple with element in the input sequence and its predecessor.\neg: `Seq.pairwise [1..4]` returns `[(1, 2); (2, 3); (3, 4)]`\n- **Seq.init**\nGenerates a new sequence which, when iterated, will return successive elements by calling the given function, up to the given count. eg :Seq.init count initializer\neg : `Seq.init 4 (fun n -> n * 2)` returns `[0, 2, 4, 6]`\n\n- **yield** **VS** **yield!(yield bang)**\n```csharp\nlet simpleYield = seq { for i in 1..5 do yield i}\n\\\\ returns {1, 2, 3, 4, 5}\n\nlet simpleYieldBang = seq { for i in 6..10 do yield i; yield!  simpleYield}\n\\\\ returns {6, 7, 8, 9, 10, 1, 2, 3, 4, 5} \n```\n`yield!` will allow to yield a seq as elements not just as seq. It will yield each elements in the sequence.\n\n### Here are the few questions we discussed\n1. *Is None is same as null of C#?*\nYes. When we convert the F# to C# it is similar to null. It is used to represent a value that may not exist or invalid.\n\n2. *Is there any types for None or Some?*\nYes. It is called Option type a union type of two case `None` and `Some`. eg : `int option` is a option type which wraps a int value. It is used with pattern matching for handling cases like where valid value not exists. [More Details](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/options)\n\n3. *Is List.fold is recursive calling or for loop inside implementation?*\nAnalyze a recursive data structure, fold recombine the results of recursively processing its constituent parts, building up a return value.\n\n4. *Is Seq.unfold similar to lazy list in C#? Is it storing any state internally?*\nInternal structure for iterator and we a calculating on the fly. Elements in the stream are generated on-demand by applying the element generator, until a None value is returned by the element generator. Each call to the element generator returns a new residual state.\n\n5. *Partial application, is the parameter passing always follow from the left to right?*\nYes. It follows parameter passing order always follow from the left to right.\n\n6. *While finding the type by type inference do we actually handle the runtime case?* \nFor example : \n    `let x = 2147483647 + 1` **No error** \n    `let y = 2147483648 ` **Shows error FS1147: This number is outside the allowable range for 32-bit signed integers.**\nCompiler will check only the current values is in the set of supported values of the type. It will not do any operation to verify the type.\n","slug":"FSharpMentorship-2","published":1,"updated":"2018-05-06T16:45:54.860Z","comments":1,"photos":[],"link":"","_id":"ckeicscij000cnncvrrxngc87","content":"<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary:\"></a>Summary:</h3><p>I updated my progress in both sharp for fun and profit and hacker rank, we discussed one of my solution in hacker rank. Oleg suggested to try Fibonacci in different ways. We tried solving the a problem from hackerrank - <a href=\"https://www.hackerrank.com/challenges/lambda-march-compute-the-perimeter-of-a-polygon\" target=\"_blank\" rel=\"external\">Compute the Perimeter of a Polygon</a>.</p>\n<h4 id=\"My-initial-code\"><a href=\"#My-initial-code\" class=\"headerlink\" title=\"My initial code\"></a>My initial code</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Enter your code here. Read input from STDIN. Print output to STDOUT</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">let</span> <span class=\"title\">distance</span> (<span class=\"params\">x1:<span class=\"keyword\">int</span>,y1:<span class=\"keyword\">int</span></span>) (<span class=\"params\">x2:<span class=\"keyword\">int</span>,y2:<span class=\"keyword\">int</span></span>) </span>=</div><div class=\"line\">    <span class=\"keyword\">let</span> xDiff = abs x1-x2</div><div class=\"line\">    <span class=\"keyword\">let</span> yDiff = abs y1-y2</div><div class=\"line\">    <span class=\"keyword\">let</span> sqrSum = (pown xDiff <span class=\"number\">2</span>)+( pown yDiff <span class=\"number\">2</span>)</div><div class=\"line\">    sqrt (<span class=\"keyword\">double</span> sqrSum)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">let</span> <span class=\"title\">getPoint</span> (<span class=\"params\">s:<span class=\"keyword\">string</span></span>) </span>=</div><div class=\"line\">    <span class=\"keyword\">let</span> va = </div><div class=\"line\">        s.Split(<span class=\"string\">' '</span>) </div><div class=\"line\">        |&gt; Array.map System.Int32.Parse</div><div class=\"line\">    (va.[<span class=\"number\">0</span>], va.[<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\">[<span class=\"meta\">&lt;EntryPoint&gt;</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> main argv = </div><div class=\"line\">    <span class=\"keyword\">let</span> t = System.Console.ReadLine()|&gt; <span class=\"keyword\">int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> values = </div><div class=\"line\">        Seq.initInfinite(fun _ -&gt; System.Console.ReadLine())</div><div class=\"line\">        |&gt; Seq.takeWhile(isNull &gt;&gt; not)</div><div class=\"line\">        |&gt; Seq.map getPoint</div><div class=\"line\">        |&gt; Seq.toList</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> first, rest  = values.[<span class=\"number\">0</span>], List.tail values</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">let</span> <span class=\"title\">foldFunc</span> (<span class=\"params\">perimeter, prevPoint</span>) nxtPoint </span>=</div><div class=\"line\">        perimeter+(distance prevPoint nxtPoint), nxtPoint</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> (finalPerimeter , last) = List.<span class=\"function\">fold <span class=\"title\">foldFunc</span> (<span class=\"params\"><span class=\"number\">0.0</span>, first</span>) rest</span></div><div class=\"line\"><span class=\"function\">    </span></div><div class=\"line\"><span class=\"function\">    printfn \"%f\" (<span class=\"params\">finalPerimeter + (distance first last</span>))</span></div><div class=\"line\"><span class=\"function\">    0</span></div></pre></td></tr></table></figure>\n<h4 id=\"Cleaned-up-code\"><a href=\"#Cleaned-up-code\" class=\"headerlink\" title=\"Cleaned up code\"></a>Cleaned up code</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Enter your code here. Read input from STDIN. Print output to STDOUT</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">let</span> <span class=\"title\">distance</span> (<span class=\"params\">(x1:<span class=\"keyword\">int</span>,y1:<span class=\"keyword\">int</span></span>), (<span class=\"params\">x2:<span class=\"keyword\">int</span>,y2:<span class=\"keyword\">int</span></span>)) </span>=</div><div class=\"line\">    <span class=\"keyword\">let</span> xDiff = abs x1-x2</div><div class=\"line\">    <span class=\"keyword\">let</span> yDiff = abs y1-y2</div><div class=\"line\">    <span class=\"keyword\">let</span> sqrSum = (pown xDiff <span class=\"number\">2</span>)+( pown yDiff <span class=\"number\">2</span>)</div><div class=\"line\">    sqrt (<span class=\"keyword\">double</span> sqrSum)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">let</span> <span class=\"title\">getPoint</span> (<span class=\"params\">s:<span class=\"keyword\">string</span></span>) </span>=</div><div class=\"line\">    <span class=\"keyword\">let</span> [| x ; y |] = </div><div class=\"line\">        s.Split(<span class=\"string\">' '</span>) </div><div class=\"line\">        |&gt; Array.map System.Int32.Parse</div><div class=\"line\">    x, y</div><div class=\"line\"></div><div class=\"line\">[<span class=\"meta\">&lt;EntryPoint&gt;</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> main argv = </div><div class=\"line\">    <span class=\"keyword\">let</span> testCases = System.Console.ReadLine()|&gt; <span class=\"keyword\">int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> mutable firstPoint = (<span class=\"number\">0</span>,<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> values = </div><div class=\"line\">        Seq.<span class=\"function\">init <span class=\"title\">testCases</span> (<span class=\"params\">fun i -&gt; System.Console.ReadLine(</span>))</span></div><div class=\"line\"><span class=\"function\">        |&gt; Seq.map getPoint</span></div><div class=\"line\"><span class=\"function\">        |&gt; Seq.toList</span></div><div class=\"line\"><span class=\"function\">        </span></div><div class=\"line\">    let lines = Seq.pairwise (values.[0]::(List.rev values))</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> perimeter = </div><div class=\"line\">        lines</div><div class=\"line\">        |&gt; Seq.map distance </div><div class=\"line\">        |&gt; Seq.sum</div><div class=\"line\">    </div><div class=\"line\">    printfn <span class=\"string\">\"%f\"</span> perimeter</div><div class=\"line\">    <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<h3 id=\"New-concepts-I-learned\"><a href=\"#New-concepts-I-learned\" class=\"headerlink\" title=\"New concepts I learned\"></a>New concepts I learned</h3><ul>\n<li><strong>Seq.pairwise</strong><br>Seq.pairwise method will take a sequence and returns a sequence of tuple with element in the input sequence and its predecessor.<br>eg: <code>Seq.pairwise [1..4]</code> returns <code>[(1, 2); (2, 3); (3, 4)]</code></li>\n<li><p><strong>Seq.init</strong><br>Generates a new sequence which, when iterated, will return successive elements by calling the given function, up to the given count. eg :Seq.init count initializer<br>eg : <code>Seq.init 4 (fun n -&gt; n * 2)</code> returns <code>[0, 2, 4, 6]</code></p>\n</li>\n<li><p><strong>yield</strong> <strong>VS</strong> <strong>yield!(yield bang)</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> simpleYield = seq &#123; <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.5</span> <span class=\"keyword\">do</span> <span class=\"keyword\">yield</span> i&#125;</div><div class=\"line\">\\\\ returns &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> simpleYieldBang = seq &#123; <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">6.</span><span class=\"number\">.10</span> <span class=\"keyword\">do</span> <span class=\"keyword\">yield</span> i; <span class=\"keyword\">yield</span>!  simpleYield&#125;</div><div class=\"line\">\\\\ returns &#123;<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>yield!</code> will allow to yield a seq as elements not just as seq. It will yield each elements in the sequence.</p>\n<h3 id=\"Here-are-the-few-questions-we-discussed\"><a href=\"#Here-are-the-few-questions-we-discussed\" class=\"headerlink\" title=\"Here are the few questions we discussed\"></a>Here are the few questions we discussed</h3><ol>\n<li><p><em>Is None is same as null of C#?</em><br>Yes. When we convert the F# to C# it is similar to null. It is used to represent a value that may not exist or invalid.</p>\n</li>\n<li><p><em>Is there any types for None or Some?</em><br>Yes. It is called Option type a union type of two case <code>None</code> and <code>Some</code>. eg : <code>int option</code> is a option type which wraps a int value. It is used with pattern matching for handling cases like where valid value not exists. <a href=\"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/options\" target=\"_blank\" rel=\"external\">More Details</a></p>\n</li>\n<li><p><em>Is List.fold is recursive calling or for loop inside implementation?</em><br>Analyze a recursive data structure, fold recombine the results of recursively processing its constituent parts, building up a return value.</p>\n</li>\n<li><p><em>Is Seq.unfold similar to lazy list in C#? Is it storing any state internally?</em><br>Internal structure for iterator and we a calculating on the fly. Elements in the stream are generated on-demand by applying the element generator, until a None value is returned by the element generator. Each call to the element generator returns a new residual state.</p>\n</li>\n<li><p><em>Partial application, is the parameter passing always follow from the left to right?</em><br>Yes. It follows parameter passing order always follow from the left to right.</p>\n</li>\n<li><p><em>While finding the type by type inference do we actually handle the runtime case?</em><br>For example :<br> <code>let x = 2147483647 + 1</code> <strong>No error</strong><br> <code>let y = 2147483648</code> <strong>Shows error FS1147: This number is outside the allowable range for 32-bit signed integers.</strong><br>Compiler will check only the current values is in the set of supported values of the type. It will not do any operation to verify the type.</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary:\"></a>Summary:</h3><p>I updated my progress in both sharp for fun and profit and hacker rank, we discussed one of my solution in hacker rank. Oleg suggested to try Fibonacci in different ways. We tried solving the a problem from hackerrank - <a href=\"https://www.hackerrank.com/challenges/lambda-march-compute-the-perimeter-of-a-polygon\" target=\"_blank\" rel=\"external\">Compute the Perimeter of a Polygon</a>.</p>\n<h4 id=\"My-initial-code\"><a href=\"#My-initial-code\" class=\"headerlink\" title=\"My initial code\"></a>My initial code</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Enter your code here. Read input from STDIN. Print output to STDOUT</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">let</span> <span class=\"title\">distance</span> (<span class=\"params\">x1:<span class=\"keyword\">int</span>,y1:<span class=\"keyword\">int</span></span>) (<span class=\"params\">x2:<span class=\"keyword\">int</span>,y2:<span class=\"keyword\">int</span></span>) </span>=</div><div class=\"line\">    <span class=\"keyword\">let</span> xDiff = abs x1-x2</div><div class=\"line\">    <span class=\"keyword\">let</span> yDiff = abs y1-y2</div><div class=\"line\">    <span class=\"keyword\">let</span> sqrSum = (pown xDiff <span class=\"number\">2</span>)+( pown yDiff <span class=\"number\">2</span>)</div><div class=\"line\">    sqrt (<span class=\"keyword\">double</span> sqrSum)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">let</span> <span class=\"title\">getPoint</span> (<span class=\"params\">s:<span class=\"keyword\">string</span></span>) </span>=</div><div class=\"line\">    <span class=\"keyword\">let</span> va = </div><div class=\"line\">        s.Split(<span class=\"string\">' '</span>) </div><div class=\"line\">        |&gt; Array.map System.Int32.Parse</div><div class=\"line\">    (va.[<span class=\"number\">0</span>], va.[<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\">[<span class=\"meta\">&lt;EntryPoint&gt;</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> main argv = </div><div class=\"line\">    <span class=\"keyword\">let</span> t = System.Console.ReadLine()|&gt; <span class=\"keyword\">int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> values = </div><div class=\"line\">        Seq.initInfinite(fun _ -&gt; System.Console.ReadLine())</div><div class=\"line\">        |&gt; Seq.takeWhile(isNull &gt;&gt; not)</div><div class=\"line\">        |&gt; Seq.map getPoint</div><div class=\"line\">        |&gt; Seq.toList</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> first, rest  = values.[<span class=\"number\">0</span>], List.tail values</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">let</span> <span class=\"title\">foldFunc</span> (<span class=\"params\">perimeter, prevPoint</span>) nxtPoint </span>=</div><div class=\"line\">        perimeter+(distance prevPoint nxtPoint), nxtPoint</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> (finalPerimeter , last) = List.<span class=\"function\">fold <span class=\"title\">foldFunc</span> (<span class=\"params\"><span class=\"number\">0.0</span>, first</span>) rest</span></div><div class=\"line\"><span class=\"function\">    </span></div><div class=\"line\"><span class=\"function\">    printfn \"%f\" (<span class=\"params\">finalPerimeter + (distance first last</span>))</span></div><div class=\"line\"><span class=\"function\">    0</span></div></pre></td></tr></table></figure>\n<h4 id=\"Cleaned-up-code\"><a href=\"#Cleaned-up-code\" class=\"headerlink\" title=\"Cleaned up code\"></a>Cleaned up code</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Enter your code here. Read input from STDIN. Print output to STDOUT</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">let</span> <span class=\"title\">distance</span> (<span class=\"params\">(x1:<span class=\"keyword\">int</span>,y1:<span class=\"keyword\">int</span></span>), (<span class=\"params\">x2:<span class=\"keyword\">int</span>,y2:<span class=\"keyword\">int</span></span>)) </span>=</div><div class=\"line\">    <span class=\"keyword\">let</span> xDiff = abs x1-x2</div><div class=\"line\">    <span class=\"keyword\">let</span> yDiff = abs y1-y2</div><div class=\"line\">    <span class=\"keyword\">let</span> sqrSum = (pown xDiff <span class=\"number\">2</span>)+( pown yDiff <span class=\"number\">2</span>)</div><div class=\"line\">    sqrt (<span class=\"keyword\">double</span> sqrSum)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">let</span> <span class=\"title\">getPoint</span> (<span class=\"params\">s:<span class=\"keyword\">string</span></span>) </span>=</div><div class=\"line\">    <span class=\"keyword\">let</span> [| x ; y |] = </div><div class=\"line\">        s.Split(<span class=\"string\">' '</span>) </div><div class=\"line\">        |&gt; Array.map System.Int32.Parse</div><div class=\"line\">    x, y</div><div class=\"line\"></div><div class=\"line\">[<span class=\"meta\">&lt;EntryPoint&gt;</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> main argv = </div><div class=\"line\">    <span class=\"keyword\">let</span> testCases = System.Console.ReadLine()|&gt; <span class=\"keyword\">int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> mutable firstPoint = (<span class=\"number\">0</span>,<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> values = </div><div class=\"line\">        Seq.<span class=\"function\">init <span class=\"title\">testCases</span> (<span class=\"params\">fun i -&gt; System.Console.ReadLine(</span>))</span></div><div class=\"line\"><span class=\"function\">        |&gt; Seq.map getPoint</span></div><div class=\"line\"><span class=\"function\">        |&gt; Seq.toList</span></div><div class=\"line\"><span class=\"function\">        </span></div><div class=\"line\">    let lines = Seq.pairwise (values.[0]::(List.rev values))</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> perimeter = </div><div class=\"line\">        lines</div><div class=\"line\">        |&gt; Seq.map distance </div><div class=\"line\">        |&gt; Seq.sum</div><div class=\"line\">    </div><div class=\"line\">    printfn <span class=\"string\">\"%f\"</span> perimeter</div><div class=\"line\">    <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<h3 id=\"New-concepts-I-learned\"><a href=\"#New-concepts-I-learned\" class=\"headerlink\" title=\"New concepts I learned\"></a>New concepts I learned</h3><ul>\n<li><strong>Seq.pairwise</strong><br>Seq.pairwise method will take a sequence and returns a sequence of tuple with element in the input sequence and its predecessor.<br>eg: <code>Seq.pairwise [1..4]</code> returns <code>[(1, 2); (2, 3); (3, 4)]</code></li>\n<li><p><strong>Seq.init</strong><br>Generates a new sequence which, when iterated, will return successive elements by calling the given function, up to the given count. eg :Seq.init count initializer<br>eg : <code>Seq.init 4 (fun n -&gt; n * 2)</code> returns <code>[0, 2, 4, 6]</code></p>\n</li>\n<li><p><strong>yield</strong> <strong>VS</strong> <strong>yield!(yield bang)</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> simpleYield = seq &#123; <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.5</span> <span class=\"keyword\">do</span> <span class=\"keyword\">yield</span> i&#125;</div><div class=\"line\">\\\\ returns &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> simpleYieldBang = seq &#123; <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">6.</span><span class=\"number\">.10</span> <span class=\"keyword\">do</span> <span class=\"keyword\">yield</span> i; <span class=\"keyword\">yield</span>!  simpleYield&#125;</div><div class=\"line\">\\\\ returns &#123;<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>yield!</code> will allow to yield a seq as elements not just as seq. It will yield each elements in the sequence.</p>\n<h3 id=\"Here-are-the-few-questions-we-discussed\"><a href=\"#Here-are-the-few-questions-we-discussed\" class=\"headerlink\" title=\"Here are the few questions we discussed\"></a>Here are the few questions we discussed</h3><ol>\n<li><p><em>Is None is same as null of C#?</em><br>Yes. When we convert the F# to C# it is similar to null. It is used to represent a value that may not exist or invalid.</p>\n</li>\n<li><p><em>Is there any types for None or Some?</em><br>Yes. It is called Option type a union type of two case <code>None</code> and <code>Some</code>. eg : <code>int option</code> is a option type which wraps a int value. It is used with pattern matching for handling cases like where valid value not exists. <a href=\"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/options\" target=\"_blank\" rel=\"external\">More Details</a></p>\n</li>\n<li><p><em>Is List.fold is recursive calling or for loop inside implementation?</em><br>Analyze a recursive data structure, fold recombine the results of recursively processing its constituent parts, building up a return value.</p>\n</li>\n<li><p><em>Is Seq.unfold similar to lazy list in C#? Is it storing any state internally?</em><br>Internal structure for iterator and we a calculating on the fly. Elements in the stream are generated on-demand by applying the element generator, until a None value is returned by the element generator. Each call to the element generator returns a new residual state.</p>\n</li>\n<li><p><em>Partial application, is the parameter passing always follow from the left to right?</em><br>Yes. It follows parameter passing order always follow from the left to right.</p>\n</li>\n<li><p><em>While finding the type by type inference do we actually handle the runtime case?</em><br>For example :<br> <code>let x = 2147483647 + 1</code> <strong>No error</strong><br> <code>let y = 2147483648</code> <strong>Shows error FS1147: This number is outside the allowable range for 32-bit signed integers.</strong><br>Compiler will check only the current values is in the set of supported values of the type. It will not do any operation to verify the type.</p>\n</li>\n</ol>\n"},{"layout":"post","title":"Generics in .NET","date":"2018-01-29T23:10:03.000Z","subtitle":"\" Design and Implementation of Generics in .NET \"","author":"Nithin VR","header-img":"dotnet.jpg","catalog":true,"_content":"# Introduction\nRecently I gave talk in my office related to generics in .NET. How it got introduced and how it work behind the scenes. I mainly referred the [Design and Implementation of Generics for the .NET Common Language Runtime](https://www.microsoft.com/en-us/research/wp-content/uploads/2001/01/designandimplementationofgenerics.pdf) by **Andrew Kennedy** and **Don Syme**.\n## What is generics?\nGenerics is methodology to write programs or logic, without specialising to any type. As the program loging will be generic and it can accept type as a parameter and specialize/instantiate it for that. It is also known as [Parametric Polymorphism](https://en.wikipedia.org/wiki/Parametric_polymorphism). It is commonly used to avoid code duplication and keep the logics independent of types in single place.\n## Generics in .NET\n### Initial Design Goals\n- Safety : Bugs are caught at compile time.\n- Expressivity : Different specialization using type parameter.\n- Clarity : Less casting between types.\n- Efficiency : Reduced or no need for run-time checks.\n### Before generics\nBefore Generics was introduced in C# the object is used as its the top most in class hierarchy. But it was not type safe and there was an overhead of boxing and unboxing for primitive element types.\n*Example : Boxing and unboxing IL instructions*\n![alt text](/2018/01/30/GenericsInDotNet/boxing.png \"Boxing and unboxing.\")\n*Example : Object Stack vs Generic Stack*\n![alt text](/2018/01/30/GenericsInDotNet/BeforeGenerics.png \"Generics vs Object\")\n### IL code\n## BenchMarking\n## Reference\n","source":"_posts/GenericsInDotNet.md","raw":"---\nlayout:     post\ntitle: Generics in .NET\ndate: 2018-01-30 00:10:03\nsubtitle: \"\\\" Design and Implementation of Generics in .NET \\\"\"\nauthor:     \"Nithin VR\"\nheader-img: \"dotnet.jpg\"\ncatalog: true\ntags:\n\t- .NET\n\t- C#\n---\n# Introduction\nRecently I gave talk in my office related to generics in .NET. How it got introduced and how it work behind the scenes. I mainly referred the [Design and Implementation of Generics for the .NET Common Language Runtime](https://www.microsoft.com/en-us/research/wp-content/uploads/2001/01/designandimplementationofgenerics.pdf) by **Andrew Kennedy** and **Don Syme**.\n## What is generics?\nGenerics is methodology to write programs or logic, without specialising to any type. As the program loging will be generic and it can accept type as a parameter and specialize/instantiate it for that. It is also known as [Parametric Polymorphism](https://en.wikipedia.org/wiki/Parametric_polymorphism). It is commonly used to avoid code duplication and keep the logics independent of types in single place.\n## Generics in .NET\n### Initial Design Goals\n- Safety : Bugs are caught at compile time.\n- Expressivity : Different specialization using type parameter.\n- Clarity : Less casting between types.\n- Efficiency : Reduced or no need for run-time checks.\n### Before generics\nBefore Generics was introduced in C# the object is used as its the top most in class hierarchy. But it was not type safe and there was an overhead of boxing and unboxing for primitive element types.\n*Example : Boxing and unboxing IL instructions*\n![alt text](/2018/01/30/GenericsInDotNet/boxing.png \"Boxing and unboxing.\")\n*Example : Object Stack vs Generic Stack*\n![alt text](/2018/01/30/GenericsInDotNet/BeforeGenerics.png \"Generics vs Object\")\n### IL code\n## BenchMarking\n## Reference\n","slug":"GenericsInDotNet","published":1,"updated":"2018-06-01T19:00:53.260Z","comments":1,"photos":[],"link":"","_id":"ckeicscis000enncvhet2jj02","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Recently I gave talk in my office related to generics in .NET. How it got introduced and how it work behind the scenes. I mainly referred the <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2001/01/designandimplementationofgenerics.pdf\" target=\"_blank\" rel=\"external\">Design and Implementation of Generics for the .NET Common Language Runtime</a> by <strong>Andrew Kennedy</strong> and <strong>Don Syme</strong>.</p>\n<h2 id=\"What-is-generics\"><a href=\"#What-is-generics\" class=\"headerlink\" title=\"What is generics?\"></a>What is generics?</h2><p>Generics is methodology to write programs or logic, without specialising to any type. As the program loging will be generic and it can accept type as a parameter and specialize/instantiate it for that. It is also known as <a href=\"https://en.wikipedia.org/wiki/Parametric_polymorphism\" target=\"_blank\" rel=\"external\">Parametric Polymorphism</a>. It is commonly used to avoid code duplication and keep the logics independent of types in single place.</p>\n<h2 id=\"Generics-in-NET\"><a href=\"#Generics-in-NET\" class=\"headerlink\" title=\"Generics in .NET\"></a>Generics in .NET</h2><h3 id=\"Initial-Design-Goals\"><a href=\"#Initial-Design-Goals\" class=\"headerlink\" title=\"Initial Design Goals\"></a>Initial Design Goals</h3><ul>\n<li>Safety : Bugs are caught at compile time.</li>\n<li>Expressivity : Different specialization using type parameter.</li>\n<li>Clarity : Less casting between types.</li>\n<li>Efficiency : Reduced or no need for run-time checks.<h3 id=\"Before-generics\"><a href=\"#Before-generics\" class=\"headerlink\" title=\"Before generics\"></a>Before generics</h3>Before Generics was introduced in C# the object is used as its the top most in class hierarchy. But it was not type safe and there was an overhead of boxing and unboxing for primitive element types.<br><em>Example : Boxing and unboxing IL instructions</em><br><img src=\"/2018/01/30/GenericsInDotNet/boxing.png\" alt=\"alt text\" title=\"Boxing and unboxing.\"><br><em>Example : Object Stack vs Generic Stack</em><br><img src=\"/2018/01/30/GenericsInDotNet/BeforeGenerics.png\" alt=\"alt text\" title=\"Generics vs Object\"><h3 id=\"IL-code\"><a href=\"#IL-code\" class=\"headerlink\" title=\"IL code\"></a>IL code</h3><h2 id=\"BenchMarking\"><a href=\"#BenchMarking\" class=\"headerlink\" title=\"BenchMarking\"></a>BenchMarking</h2><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Recently I gave talk in my office related to generics in .NET. How it got introduced and how it work behind the scenes. I mainly referred the <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2001/01/designandimplementationofgenerics.pdf\" target=\"_blank\" rel=\"external\">Design and Implementation of Generics for the .NET Common Language Runtime</a> by <strong>Andrew Kennedy</strong> and <strong>Don Syme</strong>.</p>\n<h2 id=\"What-is-generics\"><a href=\"#What-is-generics\" class=\"headerlink\" title=\"What is generics?\"></a>What is generics?</h2><p>Generics is methodology to write programs or logic, without specialising to any type. As the program loging will be generic and it can accept type as a parameter and specialize/instantiate it for that. It is also known as <a href=\"https://en.wikipedia.org/wiki/Parametric_polymorphism\" target=\"_blank\" rel=\"external\">Parametric Polymorphism</a>. It is commonly used to avoid code duplication and keep the logics independent of types in single place.</p>\n<h2 id=\"Generics-in-NET\"><a href=\"#Generics-in-NET\" class=\"headerlink\" title=\"Generics in .NET\"></a>Generics in .NET</h2><h3 id=\"Initial-Design-Goals\"><a href=\"#Initial-Design-Goals\" class=\"headerlink\" title=\"Initial Design Goals\"></a>Initial Design Goals</h3><ul>\n<li>Safety : Bugs are caught at compile time.</li>\n<li>Expressivity : Different specialization using type parameter.</li>\n<li>Clarity : Less casting between types.</li>\n<li>Efficiency : Reduced or no need for run-time checks.<h3 id=\"Before-generics\"><a href=\"#Before-generics\" class=\"headerlink\" title=\"Before generics\"></a>Before generics</h3>Before Generics was introduced in C# the object is used as its the top most in class hierarchy. But it was not type safe and there was an overhead of boxing and unboxing for primitive element types.<br><em>Example : Boxing and unboxing IL instructions</em><br><img src=\"/2018/01/30/GenericsInDotNet/boxing.png\" alt=\"alt text\" title=\"Boxing and unboxing.\"><br><em>Example : Object Stack vs Generic Stack</em><br><img src=\"/2018/01/30/GenericsInDotNet/BeforeGenerics.png\" alt=\"alt text\" title=\"Generics vs Object\"><h3 id=\"IL-code\"><a href=\"#IL-code\" class=\"headerlink\" title=\"IL code\"></a>IL code</h3><h2 id=\"BenchMarking\"><a href=\"#BenchMarking\" class=\"headerlink\" title=\"BenchMarking\"></a>BenchMarking</h2><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2></li>\n</ul>\n"},{"layout":"post","title":"Git Basic Commands","subtitle":" \"Enough basics to get started with Git.\"","date":"2017-08-21T12:00:00.000Z","author":"Nithin VR","header-img":"git.png","catalog":true,"_content":"## Introduction to Git\n[Git](https://git-scm.com/), a version control created by [Linus](https://en.wikipedia.org/wiki/Linus_Torvalds), creator of Linux. It was created for managing contributions to linux code base. This post is covering some of the basic commands which used regularly.\n#### Git Terms\n**Branch** : Branch is to start a new line of development. It will be independent of the main and act as new workspace. It will allow the developer to move in new working directory without messing the main code.\n\n**Remote** : A remote repository is hosted in internet and we keep our project copy there. It will act as a center repository for the project and different local repositories will push code to the remote.\n`$ git remote` - to list all the remotes.\n\n**Upstream** : It is used to refer the original repository we used to fork. While we fork a repository, it will not set the upstream by default. We must configure a upstream repository in Git to sync changes made in the original repository.\n\n**Forking** : Forking gives a way to create a copy of server side repository from the original server repository. It will act as the remote for the local repository and allow the contributor to have a public repository to share. Contributor will have both private local one and public server-side one.\n#### Git Commands\n- **Forking the repository**\nIn the top-right corner of the page, click Fork. Clicking on the fork button from project page will create a forked project under your account.\n- **Cloning the forked repository**\n`$ git clone https://github.com/user/awesome.git`\n- **Setting up upstream**\n`$ git remote add upstream https://github.com/original_author/awesome.git`\nAfter setting up the upstream, we can sync the upstream to get changes made in the original repository.\n- **Creating a new branch**\n`$ git checkout -b MyNewBranch` - This will create a new branch and checkout it.\n- **Committing changes to the new branch**\n`$ git push origin MyNewBranch`\n- **Deleting the branch after merging**\n`$ git branch -D MyNewBranch` - This will delete the branch even if we did not merge or rebase it.\n- **Pruning all branches**\n`$ git remote prune origin`\n- **Fetching changes from the upstream**\nTo get the latest changes made in the original repository, we can fetch it from upstream.\n`$ git fetch upstream`\n- **Merging our master with upstream**\n`$ git merge upstream/master`\n#### More Reference\n- [Fork a repository](https://help.github.com/articles/fork-a-repo/)\n- [Add upstream](https://help.github.com/articles/configuring-a-remote-for-a-fork/)\n- [Cleaning up old remote branches](https://stackoverflow.com/questions/3184555/cleaning-up-old-remote-git-branches)","source":"_posts/Git-Basic-Commands.md","raw":"---\nlayout: post\ntitle: Git Basic Commands\nsubtitle: \" \\\"Enough basics to get started with Git.\\\"\"\ndate: 2017-08-21 14:00:00\nauthor: \"Nithin VR\"\nheader-img: \"git.png\"\ncatalog: true\ntags:\n    - Git\n---\n## Introduction to Git\n[Git](https://git-scm.com/), a version control created by [Linus](https://en.wikipedia.org/wiki/Linus_Torvalds), creator of Linux. It was created for managing contributions to linux code base. This post is covering some of the basic commands which used regularly.\n#### Git Terms\n**Branch** : Branch is to start a new line of development. It will be independent of the main and act as new workspace. It will allow the developer to move in new working directory without messing the main code.\n\n**Remote** : A remote repository is hosted in internet and we keep our project copy there. It will act as a center repository for the project and different local repositories will push code to the remote.\n`$ git remote` - to list all the remotes.\n\n**Upstream** : It is used to refer the original repository we used to fork. While we fork a repository, it will not set the upstream by default. We must configure a upstream repository in Git to sync changes made in the original repository.\n\n**Forking** : Forking gives a way to create a copy of server side repository from the original server repository. It will act as the remote for the local repository and allow the contributor to have a public repository to share. Contributor will have both private local one and public server-side one.\n#### Git Commands\n- **Forking the repository**\nIn the top-right corner of the page, click Fork. Clicking on the fork button from project page will create a forked project under your account.\n- **Cloning the forked repository**\n`$ git clone https://github.com/user/awesome.git`\n- **Setting up upstream**\n`$ git remote add upstream https://github.com/original_author/awesome.git`\nAfter setting up the upstream, we can sync the upstream to get changes made in the original repository.\n- **Creating a new branch**\n`$ git checkout -b MyNewBranch` - This will create a new branch and checkout it.\n- **Committing changes to the new branch**\n`$ git push origin MyNewBranch`\n- **Deleting the branch after merging**\n`$ git branch -D MyNewBranch` - This will delete the branch even if we did not merge or rebase it.\n- **Pruning all branches**\n`$ git remote prune origin`\n- **Fetching changes from the upstream**\nTo get the latest changes made in the original repository, we can fetch it from upstream.\n`$ git fetch upstream`\n- **Merging our master with upstream**\n`$ git merge upstream/master`\n#### More Reference\n- [Fork a repository](https://help.github.com/articles/fork-a-repo/)\n- [Add upstream](https://help.github.com/articles/configuring-a-remote-for-a-fork/)\n- [Cleaning up old remote branches](https://stackoverflow.com/questions/3184555/cleaning-up-old-remote-git-branches)","slug":"Git-Basic-Commands","published":1,"updated":"2018-05-06T16:45:54.864Z","comments":1,"photos":[],"link":"","_id":"ckeicsciu000gnncvglq689d9","content":"<h2 id=\"Introduction-to-Git\"><a href=\"#Introduction-to-Git\" class=\"headerlink\" title=\"Introduction to Git\"></a>Introduction to Git</h2><p><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a>, a version control created by <a href=\"https://en.wikipedia.org/wiki/Linus_Torvalds\" target=\"_blank\" rel=\"external\">Linus</a>, creator of Linux. It was created for managing contributions to linux code base. This post is covering some of the basic commands which used regularly.</p>\n<h4 id=\"Git-Terms\"><a href=\"#Git-Terms\" class=\"headerlink\" title=\"Git Terms\"></a>Git Terms</h4><p><strong>Branch</strong> : Branch is to start a new line of development. It will be independent of the main and act as new workspace. It will allow the developer to move in new working directory without messing the main code.</p>\n<p><strong>Remote</strong> : A remote repository is hosted in internet and we keep our project copy there. It will act as a center repository for the project and different local repositories will push code to the remote.<br><code>$ git remote</code> - to list all the remotes.</p>\n<p><strong>Upstream</strong> : It is used to refer the original repository we used to fork. While we fork a repository, it will not set the upstream by default. We must configure a upstream repository in Git to sync changes made in the original repository.</p>\n<p><strong>Forking</strong> : Forking gives a way to create a copy of server side repository from the original server repository. It will act as the remote for the local repository and allow the contributor to have a public repository to share. Contributor will have both private local one and public server-side one.</p>\n<h4 id=\"Git-Commands\"><a href=\"#Git-Commands\" class=\"headerlink\" title=\"Git Commands\"></a>Git Commands</h4><ul>\n<li><strong>Forking the repository</strong><br>In the top-right corner of the page, click Fork. Clicking on the fork button from project page will create a forked project under your account.</li>\n<li><strong>Cloning the forked repository</strong><br><code>$ git clone https://github.com/user/awesome.git</code></li>\n<li><strong>Setting up upstream</strong><br><code>$ git remote add upstream https://github.com/original_author/awesome.git</code><br>After setting up the upstream, we can sync the upstream to get changes made in the original repository.</li>\n<li><strong>Creating a new branch</strong><br><code>$ git checkout -b MyNewBranch</code> - This will create a new branch and checkout it.</li>\n<li><strong>Committing changes to the new branch</strong><br><code>$ git push origin MyNewBranch</code></li>\n<li><strong>Deleting the branch after merging</strong><br><code>$ git branch -D MyNewBranch</code> - This will delete the branch even if we did not merge or rebase it.</li>\n<li><strong>Pruning all branches</strong><br><code>$ git remote prune origin</code></li>\n<li><strong>Fetching changes from the upstream</strong><br>To get the latest changes made in the original repository, we can fetch it from upstream.<br><code>$ git fetch upstream</code></li>\n<li><strong>Merging our master with upstream</strong><br><code>$ git merge upstream/master</code><h4 id=\"More-Reference\"><a href=\"#More-Reference\" class=\"headerlink\" title=\"More Reference\"></a>More Reference</h4></li>\n<li><a href=\"https://help.github.com/articles/fork-a-repo/\" target=\"_blank\" rel=\"external\">Fork a repository</a></li>\n<li><a href=\"https://help.github.com/articles/configuring-a-remote-for-a-fork/\" target=\"_blank\" rel=\"external\">Add upstream</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3184555/cleaning-up-old-remote-git-branches\" target=\"_blank\" rel=\"external\">Cleaning up old remote branches</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction-to-Git\"><a href=\"#Introduction-to-Git\" class=\"headerlink\" title=\"Introduction to Git\"></a>Introduction to Git</h2><p><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a>, a version control created by <a href=\"https://en.wikipedia.org/wiki/Linus_Torvalds\" target=\"_blank\" rel=\"external\">Linus</a>, creator of Linux. It was created for managing contributions to linux code base. This post is covering some of the basic commands which used regularly.</p>\n<h4 id=\"Git-Terms\"><a href=\"#Git-Terms\" class=\"headerlink\" title=\"Git Terms\"></a>Git Terms</h4><p><strong>Branch</strong> : Branch is to start a new line of development. It will be independent of the main and act as new workspace. It will allow the developer to move in new working directory without messing the main code.</p>\n<p><strong>Remote</strong> : A remote repository is hosted in internet and we keep our project copy there. It will act as a center repository for the project and different local repositories will push code to the remote.<br><code>$ git remote</code> - to list all the remotes.</p>\n<p><strong>Upstream</strong> : It is used to refer the original repository we used to fork. While we fork a repository, it will not set the upstream by default. We must configure a upstream repository in Git to sync changes made in the original repository.</p>\n<p><strong>Forking</strong> : Forking gives a way to create a copy of server side repository from the original server repository. It will act as the remote for the local repository and allow the contributor to have a public repository to share. Contributor will have both private local one and public server-side one.</p>\n<h4 id=\"Git-Commands\"><a href=\"#Git-Commands\" class=\"headerlink\" title=\"Git Commands\"></a>Git Commands</h4><ul>\n<li><strong>Forking the repository</strong><br>In the top-right corner of the page, click Fork. Clicking on the fork button from project page will create a forked project under your account.</li>\n<li><strong>Cloning the forked repository</strong><br><code>$ git clone https://github.com/user/awesome.git</code></li>\n<li><strong>Setting up upstream</strong><br><code>$ git remote add upstream https://github.com/original_author/awesome.git</code><br>After setting up the upstream, we can sync the upstream to get changes made in the original repository.</li>\n<li><strong>Creating a new branch</strong><br><code>$ git checkout -b MyNewBranch</code> - This will create a new branch and checkout it.</li>\n<li><strong>Committing changes to the new branch</strong><br><code>$ git push origin MyNewBranch</code></li>\n<li><strong>Deleting the branch after merging</strong><br><code>$ git branch -D MyNewBranch</code> - This will delete the branch even if we did not merge or rebase it.</li>\n<li><strong>Pruning all branches</strong><br><code>$ git remote prune origin</code></li>\n<li><strong>Fetching changes from the upstream</strong><br>To get the latest changes made in the original repository, we can fetch it from upstream.<br><code>$ git fetch upstream</code></li>\n<li><strong>Merging our master with upstream</strong><br><code>$ git merge upstream/master</code><h4 id=\"More-Reference\"><a href=\"#More-Reference\" class=\"headerlink\" title=\"More Reference\"></a>More Reference</h4></li>\n<li><a href=\"https://help.github.com/articles/fork-a-repo/\" target=\"_blank\" rel=\"external\">Fork a repository</a></li>\n<li><a href=\"https://help.github.com/articles/configuring-a-remote-for-a-fork/\" target=\"_blank\" rel=\"external\">Add upstream</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3184555/cleaning-up-old-remote-git-branches\" target=\"_blank\" rel=\"external\">Cleaning up old remote branches</a></li>\n</ul>\n"},{"layout":"post","title":"Revert a Commit Which Already Pushed to a Remote Repository","date":"2016-05-29T22:10:03.000Z","subtitle":"","author":"Nithin VR","header-img":"git.png","catalog":true,"_content":"You’ve just pushed your local branch to a remote branch, but then  realized that some errors happened.\n\nEg:\n* That there was  some unacceptable typo in commit message.\n* You just added a unwanted file like ~files or class file.\n\n\nDon't worry you can revert it to back to your previous safe commit by reverting your current commit.\n\n>$ git reset HEAD^ --hard\n>\n>$ git push origin master -f\n\n\n**First step** reset the branch to the parent of the current commit.\n**Second step** force-push it to the remote.\n\n---\n[More Details: Revert a commit already pushed to a remote repository -Christoph Rüegg](http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html)\n","source":"_posts/Revert-A-Commit.md","raw":"---\nlayout:     post\ntitle: Revert a Commit Which Already Pushed to a Remote Repository\ndate: 2016-05-30 00:10:03\nsubtitle: \"\"\nauthor:     \"Nithin VR\"\nheader-img: \"git.png\"\ncatalog: true\ntags:\n\t- Git\n\t- Version Control\n---\nYou’ve just pushed your local branch to a remote branch, but then  realized that some errors happened.\n\nEg:\n* That there was  some unacceptable typo in commit message.\n* You just added a unwanted file like ~files or class file.\n\n\nDon't worry you can revert it to back to your previous safe commit by reverting your current commit.\n\n>$ git reset HEAD^ --hard\n>\n>$ git push origin master -f\n\n\n**First step** reset the branch to the parent of the current commit.\n**Second step** force-push it to the remote.\n\n---\n[More Details: Revert a commit already pushed to a remote repository -Christoph Rüegg](http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html)\n","slug":"Revert-A-Commit","published":1,"updated":"2020-06-02T18:25:12.527Z","comments":1,"photos":[],"link":"","_id":"ckeicscix000inncvwpyn9suv","content":"<p>You’ve just pushed your local branch to a remote branch, but then  realized that some errors happened.</p>\n<p>Eg:</p>\n<ul>\n<li>That there was  some unacceptable typo in commit message.</li>\n<li>You just added a unwanted file like ~files or class file.</li>\n</ul>\n<p>Don’t worry you can revert it to back to your previous safe commit by reverting your current commit.</p>\n<blockquote>\n<p>$ git reset HEAD^ –hard</p>\n<p>$ git push origin master -f</p>\n</blockquote>\n<p><strong>First step</strong> reset the branch to the parent of the current commit.<br><strong>Second step</strong> force-push it to the remote.</p>\n<hr>\n<p><a href=\"http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html\" target=\"_blank\" rel=\"external\">More Details: Revert a commit already pushed to a remote repository -Christoph Rüegg</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>You’ve just pushed your local branch to a remote branch, but then  realized that some errors happened.</p>\n<p>Eg:</p>\n<ul>\n<li>That there was  some unacceptable typo in commit message.</li>\n<li>You just added a unwanted file like ~files or class file.</li>\n</ul>\n<p>Don’t worry you can revert it to back to your previous safe commit by reverting your current commit.</p>\n<blockquote>\n<p>$ git reset HEAD^ –hard</p>\n<p>$ git push origin master -f</p>\n</blockquote>\n<p><strong>First step</strong> reset the branch to the parent of the current commit.<br><strong>Second step</strong> force-push it to the remote.</p>\n<hr>\n<p><a href=\"http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html\" target=\"_blank\" rel=\"external\">More Details: Revert a commit already pushed to a remote repository -Christoph Rüegg</a></p>\n"},{"layout":"post","title":"Stand Up Script","subtitle":" \"Powershell script to remind you stand up and take break while you work continuously \"","date":"2016-06-06T12:00:00.000Z","author":"Nithin VR","header-img":"StandUp_760_348.png","catalog":true,"_content":"\n# Stand Up Script\n\nPowershell script that will alert at each hour by Desktop notification as well as using beep sound. To avoid continues sitting and working this script will help to remind to stand up or relax each hour. It will lock the PC at each hour too :)\n\n### What does it do\n\n> - It will beep according to the time.\n> - Show Desktop notification with time and message.\n> -  Lock the the computer automatically after the notification.\n\n*Screen Shot of Notification:*\n![alt text](/img/Notifiaction.png \"\")\n\n### To Do\n\n> - Get time interval for notification from user as command line parameter.\n> - Change the busy waiting to sleep.\n> - Re-factor the code.\n\n### How to Run it\n\n>  - Download the script from [github](https://github.com/vrnithinkumar/powershell/blob/master/StandUpAlarm.ps1).\n>  -  Run `powershell StandUpAlaram.ps1`\n\nPlease feel free to send the feedback, bug, or any suggestions.\n","source":"_posts/Script.md","raw":"---\nlayout: post\ntitle: \"Stand Up Script\"\nsubtitle: \" \\\"Powershell script to remind you stand up and take break while you work continuously \\\"\"\ndate: 2016-06-06 14:00:00\nauthor: \"Nithin VR\"\nheader-img: \"StandUp_760_348.png\"\ncatalog: true\ntags:\n    - Powershell\n    - Scripting\n---\n\n# Stand Up Script\n\nPowershell script that will alert at each hour by Desktop notification as well as using beep sound. To avoid continues sitting and working this script will help to remind to stand up or relax each hour. It will lock the PC at each hour too :)\n\n### What does it do\n\n> - It will beep according to the time.\n> - Show Desktop notification with time and message.\n> -  Lock the the computer automatically after the notification.\n\n*Screen Shot of Notification:*\n![alt text](/img/Notifiaction.png \"\")\n\n### To Do\n\n> - Get time interval for notification from user as command line parameter.\n> - Change the busy waiting to sleep.\n> - Re-factor the code.\n\n### How to Run it\n\n>  - Download the script from [github](https://github.com/vrnithinkumar/powershell/blob/master/StandUpAlarm.ps1).\n>  -  Run `powershell StandUpAlaram.ps1`\n\nPlease feel free to send the feedback, bug, or any suggestions.\n","slug":"Script","published":1,"updated":"2018-05-06T16:45:54.866Z","comments":1,"photos":[],"link":"","_id":"ckeicsciz000knncvdz85ea2m","content":"<h1 id=\"Stand-Up-Script\"><a href=\"#Stand-Up-Script\" class=\"headerlink\" title=\"Stand Up Script\"></a>Stand Up Script</h1><p>Powershell script that will alert at each hour by Desktop notification as well as using beep sound. To avoid continues sitting and working this script will help to remind to stand up or relax each hour. It will lock the PC at each hour too :)</p>\n<h3 id=\"What-does-it-do\"><a href=\"#What-does-it-do\" class=\"headerlink\" title=\"What does it do\"></a>What does it do</h3><blockquote>\n<ul>\n<li>It will beep according to the time.</li>\n<li>Show Desktop notification with time and message.</li>\n<li>Lock the the computer automatically after the notification.</li>\n</ul>\n</blockquote>\n<p><em>Screen Shot of Notification:</em><br><img src=\"/img/Notifiaction.png\" alt=\"alt text\"></p>\n<h3 id=\"To-Do\"><a href=\"#To-Do\" class=\"headerlink\" title=\"To Do\"></a>To Do</h3><blockquote>\n<ul>\n<li>Get time interval for notification from user as command line parameter.</li>\n<li>Change the busy waiting to sleep.</li>\n<li>Re-factor the code.</li>\n</ul>\n</blockquote>\n<h3 id=\"How-to-Run-it\"><a href=\"#How-to-Run-it\" class=\"headerlink\" title=\"How to Run it\"></a>How to Run it</h3><blockquote>\n<ul>\n<li>Download the script from <a href=\"https://github.com/vrnithinkumar/powershell/blob/master/StandUpAlarm.ps1\" target=\"_blank\" rel=\"external\">github</a>.</li>\n<li>Run <code>powershell StandUpAlaram.ps1</code></li>\n</ul>\n</blockquote>\n<p>Please feel free to send the feedback, bug, or any suggestions.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Stand-Up-Script\"><a href=\"#Stand-Up-Script\" class=\"headerlink\" title=\"Stand Up Script\"></a>Stand Up Script</h1><p>Powershell script that will alert at each hour by Desktop notification as well as using beep sound. To avoid continues sitting and working this script will help to remind to stand up or relax each hour. It will lock the PC at each hour too :)</p>\n<h3 id=\"What-does-it-do\"><a href=\"#What-does-it-do\" class=\"headerlink\" title=\"What does it do\"></a>What does it do</h3><blockquote>\n<ul>\n<li>It will beep according to the time.</li>\n<li>Show Desktop notification with time and message.</li>\n<li>Lock the the computer automatically after the notification.</li>\n</ul>\n</blockquote>\n<p><em>Screen Shot of Notification:</em><br><img src=\"/img/Notifiaction.png\" alt=\"alt text\"></p>\n<h3 id=\"To-Do\"><a href=\"#To-Do\" class=\"headerlink\" title=\"To Do\"></a>To Do</h3><blockquote>\n<ul>\n<li>Get time interval for notification from user as command line parameter.</li>\n<li>Change the busy waiting to sleep.</li>\n<li>Re-factor the code.</li>\n</ul>\n</blockquote>\n<h3 id=\"How-to-Run-it\"><a href=\"#How-to-Run-it\" class=\"headerlink\" title=\"How to Run it\"></a>How to Run it</h3><blockquote>\n<ul>\n<li>Download the script from <a href=\"https://github.com/vrnithinkumar/powershell/blob/master/StandUpAlarm.ps1\" target=\"_blank\" rel=\"external\">github</a>.</li>\n<li>Run <code>powershell StandUpAlaram.ps1</code></li>\n</ul>\n</blockquote>\n<p>Please feel free to send the feedback, bug, or any suggestions.</p>\n"},{"layout":"post","title":"Unblock Dll Extension","subtitle":" \"A helper extension remove extension dll from Visual Studio.\"","date":"2017-08-13T12:00:00.000Z","author":"Nithin VR","header-img":"vs.png","catalog":true,"_content":"## No Access Error in Visual Studio\nThe given below error is very common, frustrating and encountered by many Visual Studio users.\n```\nUnable to copy file \"obj\\Debug\\project.pdb\" to \"bin\\project.pdb\". Access to the path 'bin\\project.pdb' is denied.\n```\nIt was caused by the pdb or dll file made read only or hidden by the Visual studio itself. If you just remove those attributes from that file this error will go away. But the process is little ve\n[StackOverflow question](https://stackoverflow.com/questions/9750101/unable-to-copy-file-access-to-the-path-is-denied/12740768?noredirect=1#comment75731595_12740768)\nNo Access to the path error look like this:\n![Alt text](/2017/08/13/UnBlockDllExtension/NoAccessError.png \"No Access Error.\")<br />\n# Unblock Dll Extension\nA tiny helper to remove the ReadOnly and Hidden attribute from dll's and executables which blocking the Visual Studio from building the project. Link to download \n### What does it do\nRight click on the Error List window and click the Unblock Files menu item.\n![alt text](/2017/08/13/UnBlockDllExtension/UnBlockMenuItem.png \"Menu Item in Error Window.\")\nResult of the action will be shown in message box like this : \n![alt text](/2017/08/13/UnBlockDllExtension/ResultAfterUnblocking.png \"Result After Unblocking.\")\n> - The extension will find all the files causing the error and remove all the Read Only and Hidden attribute.\nPlease feel free to send the feedback, bug, or any suggestions.\n>- [Link to Download](https://marketplace.visualstudio.com/items?itemName=NithinVR.UnBlockDllExtension)\n>- [Link to Source](https://github.com/vrnithinkumar/UnblockDllExtension)","source":"_posts/UnBlockDllExtension.md","raw":"---\nlayout: post\ntitle: \"Unblock Dll Extension\"\nsubtitle: \" \\\"A helper extension remove extension dll from Visual Studio.\\\"\"\ndate: 2017-08-13 14:00:00\nauthor: \"Nithin VR\"\nheader-img: \"vs.png\"\ncatalog: true\ntags:\n    - VisualStdio\n    - Extension\n---\n## No Access Error in Visual Studio\nThe given below error is very common, frustrating and encountered by many Visual Studio users.\n```\nUnable to copy file \"obj\\Debug\\project.pdb\" to \"bin\\project.pdb\". Access to the path 'bin\\project.pdb' is denied.\n```\nIt was caused by the pdb or dll file made read only or hidden by the Visual studio itself. If you just remove those attributes from that file this error will go away. But the process is little ve\n[StackOverflow question](https://stackoverflow.com/questions/9750101/unable-to-copy-file-access-to-the-path-is-denied/12740768?noredirect=1#comment75731595_12740768)\nNo Access to the path error look like this:\n![Alt text](/2017/08/13/UnBlockDllExtension/NoAccessError.png \"No Access Error.\")<br />\n# Unblock Dll Extension\nA tiny helper to remove the ReadOnly and Hidden attribute from dll's and executables which blocking the Visual Studio from building the project. Link to download \n### What does it do\nRight click on the Error List window and click the Unblock Files menu item.\n![alt text](/2017/08/13/UnBlockDllExtension/UnBlockMenuItem.png \"Menu Item in Error Window.\")\nResult of the action will be shown in message box like this : \n![alt text](/2017/08/13/UnBlockDllExtension/ResultAfterUnblocking.png \"Result After Unblocking.\")\n> - The extension will find all the files causing the error and remove all the Read Only and Hidden attribute.\nPlease feel free to send the feedback, bug, or any suggestions.\n>- [Link to Download](https://marketplace.visualstudio.com/items?itemName=NithinVR.UnBlockDllExtension)\n>- [Link to Source](https://github.com/vrnithinkumar/UnblockDllExtension)","slug":"UnBlockDllExtension","published":1,"updated":"2018-05-06T16:45:54.868Z","comments":1,"photos":[],"link":"","_id":"ckeicscj9000nnncv15pl35po","content":"<h2 id=\"No-Access-Error-in-Visual-Studio\"><a href=\"#No-Access-Error-in-Visual-Studio\" class=\"headerlink\" title=\"No Access Error in Visual Studio\"></a>No Access Error in Visual Studio</h2><p>The given below error is very common, frustrating and encountered by many Visual Studio users.<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Unable to copy file &quot;obj\\Debug\\project.pdb&quot; to &quot;bin\\project.pdb&quot;. Access to the path &apos;bin\\project.pdb&apos; is denied.</div></pre></td></tr></table></figure></p>\n<p>It was caused by the pdb or dll file made read only or hidden by the Visual studio itself. If you just remove those attributes from that file this error will go away. But the process is little ve<br><a href=\"https://stackoverflow.com/questions/9750101/unable-to-copy-file-access-to-the-path-is-denied/12740768?noredirect=1#comment75731595_12740768\" target=\"_blank\" rel=\"external\">StackOverflow question</a><br>No Access to the path error look like this:<br><img src=\"/2017/08/13/UnBlockDllExtension/NoAccessError.png\" alt=\"Alt text\" title=\"No Access Error.\"><br></p>\n<h1 id=\"Unblock-Dll-Extension\"><a href=\"#Unblock-Dll-Extension\" class=\"headerlink\" title=\"Unblock Dll Extension\"></a>Unblock Dll Extension</h1><p>A tiny helper to remove the ReadOnly and Hidden attribute from dll’s and executables which blocking the Visual Studio from building the project. Link to download </p>\n<h3 id=\"What-does-it-do\"><a href=\"#What-does-it-do\" class=\"headerlink\" title=\"What does it do\"></a>What does it do</h3><p>Right click on the Error List window and click the Unblock Files menu item.<br><img src=\"/2017/08/13/UnBlockDllExtension/UnBlockMenuItem.png\" alt=\"alt text\" title=\"Menu Item in Error Window.\"><br>Result of the action will be shown in message box like this :<br><img src=\"/2017/08/13/UnBlockDllExtension/ResultAfterUnblocking.png\" alt=\"alt text\" title=\"Result After Unblocking.\"></p>\n<blockquote>\n<ul>\n<li>The extension will find all the files causing the error and remove all the Read Only and Hidden attribute.<br>Please feel free to send the feedback, bug, or any suggestions.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=NithinVR.UnBlockDllExtension\" target=\"_blank\" rel=\"external\">Link to Download</a></li>\n<li><a href=\"https://github.com/vrnithinkumar/UnblockDllExtension\" target=\"_blank\" rel=\"external\">Link to Source</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"No-Access-Error-in-Visual-Studio\"><a href=\"#No-Access-Error-in-Visual-Studio\" class=\"headerlink\" title=\"No Access Error in Visual Studio\"></a>No Access Error in Visual Studio</h2><p>The given below error is very common, frustrating and encountered by many Visual Studio users.<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Unable to copy file &quot;obj\\Debug\\project.pdb&quot; to &quot;bin\\project.pdb&quot;. Access to the path &apos;bin\\project.pdb&apos; is denied.</div></pre></td></tr></table></figure></p>\n<p>It was caused by the pdb or dll file made read only or hidden by the Visual studio itself. If you just remove those attributes from that file this error will go away. But the process is little ve<br><a href=\"https://stackoverflow.com/questions/9750101/unable-to-copy-file-access-to-the-path-is-denied/12740768?noredirect=1#comment75731595_12740768\" target=\"_blank\" rel=\"external\">StackOverflow question</a><br>No Access to the path error look like this:<br><img src=\"/2017/08/13/UnBlockDllExtension/NoAccessError.png\" alt=\"Alt text\" title=\"No Access Error.\"><br></p>\n<h1 id=\"Unblock-Dll-Extension\"><a href=\"#Unblock-Dll-Extension\" class=\"headerlink\" title=\"Unblock Dll Extension\"></a>Unblock Dll Extension</h1><p>A tiny helper to remove the ReadOnly and Hidden attribute from dll’s and executables which blocking the Visual Studio from building the project. Link to download </p>\n<h3 id=\"What-does-it-do\"><a href=\"#What-does-it-do\" class=\"headerlink\" title=\"What does it do\"></a>What does it do</h3><p>Right click on the Error List window and click the Unblock Files menu item.<br><img src=\"/2017/08/13/UnBlockDllExtension/UnBlockMenuItem.png\" alt=\"alt text\" title=\"Menu Item in Error Window.\"><br>Result of the action will be shown in message box like this :<br><img src=\"/2017/08/13/UnBlockDllExtension/ResultAfterUnblocking.png\" alt=\"alt text\" title=\"Result After Unblocking.\"></p>\n<blockquote>\n<ul>\n<li>The extension will find all the files causing the error and remove all the Read Only and Hidden attribute.<br>Please feel free to send the feedback, bug, or any suggestions.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=NithinVR.UnBlockDllExtension\" target=\"_blank\" rel=\"external\">Link to Download</a></li>\n<li><a href=\"https://github.com/vrnithinkumar/UnblockDllExtension\" target=\"_blank\" rel=\"external\">Link to Source</a></li>\n</ul>\n</blockquote>\n"},{"layout":"post","title":"Building and Running LLVM-Clang Static Analyzer","date":"2020-06-02T18:17:19.000Z","subtitle":"","author":"Nithin","header-img":"llvm.png","catalog":true,"_content":"## Building LLVM From source\nI am documenting how I am building LLVM Clang in my Mac Air 2015.\n- macOS Mojave 10.14.6\n- 1.6 GHz Intel Core i5\n- 8 GB Memory\n### Get the source code \n`git clone https://github.com/llvm/llvm-project.git`\n### Build the code (I am using ninja to build)\n```\nmkdir $ROOT/llvm-project/build\ncd $ROOT/llvm-project/build\ncmake -G Ninja \\\n    -DDEFAULT_SYSROOT=\"$(xcrun --show-sdk-path)\" \\\n    -DLLVM_ENABLE_PROJECTS=\"clang;libcxx;libcxxabi\" \\\n    -DCMAKE_BUILD_TYPE=Release ../llvm\nninja clang\nninja cxx\n```\nApparently we need to build libc++: by running `ninja cxx` other wise we get some header errors.\n### Running LLVM-Clang Static Analyzer\nTo run a static analyzer on `test.cpp` file, we can use `scan-build` utility with below command.\n```\n$ROOT/llvm-project/clang/tools/scan-build/bin/scan-build -k -V \\\n    --use-analyzer $ROOT/llvm-project/build/bin/clang -o . clang -c ./test.cpp\n```\n**Options**\n- `-V` option it will open the report in the browser\n- `-k` keep on going option\n- `c`  Only run preprocess, compile, and assemble steps\n\n![alt text](/2020/06/02/build-llvm/report.png \"Report\")\n\nOr we can use it via `clang` to run a specific check. Here for example `NullDereference`\n```\n$ROOT/llvm-project/build/bin/clang++ -cc1 -analyze -analyzer-checker=core.NullDereference test.cpp \n```\n### Summary\nFull build took around 2.5 hours in my machine.\nBuilding after a small change took around 1 minute.\n\n---\n- [How to build LLVM from source](https://quuxplusone.github.io/blog/2019/11/09/llvm-from-scratch/)\n","source":"_posts/build-llvm.md","raw":"---\nlayout:     post\ntitle: Building and Running LLVM-Clang Static Analyzer\ndate: 2020-06-02 20:17:19\nsubtitle: \"\"\nauthor:     \"Nithin\"\nheader-img: \"llvm.png\"\ncatalog: true\ntags:\n    - LLVM\n    - Clang\n    - Static-Analysis\n---\n## Building LLVM From source\nI am documenting how I am building LLVM Clang in my Mac Air 2015.\n- macOS Mojave 10.14.6\n- 1.6 GHz Intel Core i5\n- 8 GB Memory\n### Get the source code \n`git clone https://github.com/llvm/llvm-project.git`\n### Build the code (I am using ninja to build)\n```\nmkdir $ROOT/llvm-project/build\ncd $ROOT/llvm-project/build\ncmake -G Ninja \\\n    -DDEFAULT_SYSROOT=\"$(xcrun --show-sdk-path)\" \\\n    -DLLVM_ENABLE_PROJECTS=\"clang;libcxx;libcxxabi\" \\\n    -DCMAKE_BUILD_TYPE=Release ../llvm\nninja clang\nninja cxx\n```\nApparently we need to build libc++: by running `ninja cxx` other wise we get some header errors.\n### Running LLVM-Clang Static Analyzer\nTo run a static analyzer on `test.cpp` file, we can use `scan-build` utility with below command.\n```\n$ROOT/llvm-project/clang/tools/scan-build/bin/scan-build -k -V \\\n    --use-analyzer $ROOT/llvm-project/build/bin/clang -o . clang -c ./test.cpp\n```\n**Options**\n- `-V` option it will open the report in the browser\n- `-k` keep on going option\n- `c`  Only run preprocess, compile, and assemble steps\n\n![alt text](/2020/06/02/build-llvm/report.png \"Report\")\n\nOr we can use it via `clang` to run a specific check. Here for example `NullDereference`\n```\n$ROOT/llvm-project/build/bin/clang++ -cc1 -analyze -analyzer-checker=core.NullDereference test.cpp \n```\n### Summary\nFull build took around 2.5 hours in my machine.\nBuilding after a small change took around 1 minute.\n\n---\n- [How to build LLVM from source](https://quuxplusone.github.io/blog/2019/11/09/llvm-from-scratch/)\n","slug":"build-llvm","published":1,"updated":"2020-06-02T18:53:12.585Z","comments":1,"photos":[],"link":"","_id":"ckeicscjd000pnncvdnelnzve","content":"<h2 id=\"Building-LLVM-From-source\"><a href=\"#Building-LLVM-From-source\" class=\"headerlink\" title=\"Building LLVM From source\"></a>Building LLVM From source</h2><p>I am documenting how I am building LLVM Clang in my Mac Air 2015.</p>\n<ul>\n<li>macOS Mojave 10.14.6</li>\n<li>1.6 GHz Intel Core i5</li>\n<li>8 GB Memory<h3 id=\"Get-the-source-code\"><a href=\"#Get-the-source-code\" class=\"headerlink\" title=\"Get the source code\"></a>Get the source code</h3><code>git clone https://github.com/llvm/llvm-project.git</code><h3 id=\"Build-the-code-I-am-using-ninja-to-build\"><a href=\"#Build-the-code-I-am-using-ninja-to-build\" class=\"headerlink\" title=\"Build the code (I am using ninja to build)\"></a>Build the code (I am using ninja to build)</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir $ROOT/llvm-project/build</div><div class=\"line\">cd $ROOT/llvm-project/build</div><div class=\"line\">cmake -G Ninja \\</div><div class=\"line\">    -DDEFAULT_SYSROOT=&quot;$(xcrun --show-sdk-path)&quot; \\</div><div class=\"line\">    -DLLVM_ENABLE_PROJECTS=&quot;clang;libcxx;libcxxabi&quot; \\</div><div class=\"line\">    -DCMAKE_BUILD_TYPE=Release ../llvm</div><div class=\"line\">ninja clang</div><div class=\"line\">ninja cxx</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Apparently we need to build libc++: by running <code>ninja cxx</code> other wise we get some header errors.</p>\n<h3 id=\"Running-LLVM-Clang-Static-Analyzer\"><a href=\"#Running-LLVM-Clang-Static-Analyzer\" class=\"headerlink\" title=\"Running LLVM-Clang Static Analyzer\"></a>Running LLVM-Clang Static Analyzer</h3><p>To run a static analyzer on <code>test.cpp</code> file, we can use <code>scan-build</code> utility with below command.<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ROOT/llvm-project/clang/tools/scan-build/bin/scan-build -k -V \\</div><div class=\"line\">    --use-analyzer $ROOT/llvm-project/build/bin/clang -o . clang -c ./test.cpp</div></pre></td></tr></table></figure></p>\n<p><strong>Options</strong></p>\n<ul>\n<li><code>-V</code> option it will open the report in the browser</li>\n<li><code>-k</code> keep on going option</li>\n<li><code>c</code>  Only run preprocess, compile, and assemble steps</li>\n</ul>\n<p><img src=\"/2020/06/02/build-llvm/report.png\" alt=\"alt text\" title=\"Report\"></p>\n<p>Or we can use it via <code>clang</code> to run a specific check. Here for example <code>NullDereference</code><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ROOT/llvm-project/build/bin/clang++ -cc1 -analyze -analyzer-checker=core.NullDereference test.cpp</div></pre></td></tr></table></figure></p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>Full build took around 2.5 hours in my machine.<br>Building after a small change took around 1 minute.</p>\n<hr>\n<ul>\n<li><a href=\"https://quuxplusone.github.io/blog/2019/11/09/llvm-from-scratch/\" target=\"_blank\" rel=\"external\">How to build LLVM from source</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Building-LLVM-From-source\"><a href=\"#Building-LLVM-From-source\" class=\"headerlink\" title=\"Building LLVM From source\"></a>Building LLVM From source</h2><p>I am documenting how I am building LLVM Clang in my Mac Air 2015.</p>\n<ul>\n<li>macOS Mojave 10.14.6</li>\n<li>1.6 GHz Intel Core i5</li>\n<li>8 GB Memory<h3 id=\"Get-the-source-code\"><a href=\"#Get-the-source-code\" class=\"headerlink\" title=\"Get the source code\"></a>Get the source code</h3><code>git clone https://github.com/llvm/llvm-project.git</code><h3 id=\"Build-the-code-I-am-using-ninja-to-build\"><a href=\"#Build-the-code-I-am-using-ninja-to-build\" class=\"headerlink\" title=\"Build the code (I am using ninja to build)\"></a>Build the code (I am using ninja to build)</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir $ROOT/llvm-project/build</div><div class=\"line\">cd $ROOT/llvm-project/build</div><div class=\"line\">cmake -G Ninja \\</div><div class=\"line\">    -DDEFAULT_SYSROOT=&quot;$(xcrun --show-sdk-path)&quot; \\</div><div class=\"line\">    -DLLVM_ENABLE_PROJECTS=&quot;clang;libcxx;libcxxabi&quot; \\</div><div class=\"line\">    -DCMAKE_BUILD_TYPE=Release ../llvm</div><div class=\"line\">ninja clang</div><div class=\"line\">ninja cxx</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Apparently we need to build libc++: by running <code>ninja cxx</code> other wise we get some header errors.</p>\n<h3 id=\"Running-LLVM-Clang-Static-Analyzer\"><a href=\"#Running-LLVM-Clang-Static-Analyzer\" class=\"headerlink\" title=\"Running LLVM-Clang Static Analyzer\"></a>Running LLVM-Clang Static Analyzer</h3><p>To run a static analyzer on <code>test.cpp</code> file, we can use <code>scan-build</code> utility with below command.<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ROOT/llvm-project/clang/tools/scan-build/bin/scan-build -k -V \\</div><div class=\"line\">    --use-analyzer $ROOT/llvm-project/build/bin/clang -o . clang -c ./test.cpp</div></pre></td></tr></table></figure></p>\n<p><strong>Options</strong></p>\n<ul>\n<li><code>-V</code> option it will open the report in the browser</li>\n<li><code>-k</code> keep on going option</li>\n<li><code>c</code>  Only run preprocess, compile, and assemble steps</li>\n</ul>\n<p><img src=\"/2020/06/02/build-llvm/report.png\" alt=\"alt text\" title=\"Report\"></p>\n<p>Or we can use it via <code>clang</code> to run a specific check. Here for example <code>NullDereference</code><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ROOT/llvm-project/build/bin/clang++ -cc1 -analyze -analyzer-checker=core.NullDereference test.cpp</div></pre></td></tr></table></figure></p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>Full build took around 2.5 hours in my machine.<br>Building after a small change took around 1 minute.</p>\n<hr>\n<ul>\n<li><a href=\"https://quuxplusone.github.io/blog/2019/11/09/llvm-from-scratch/\" target=\"_blank\" rel=\"external\">How to build LLVM from source</a></li>\n</ul>\n"},{"layout":"post","title":"Find null smart pointer dereferences with the Clang Static Analyzer[GSoC2020]","subtitle":"Final Report-Google Summer of Code 2020","date":"2020-08-31T10:00:07.000Z","author":"Nithin","header-img":"llvm.png","catalog":true,"_content":"- My GSoC work on GitHub: [Commits](https://github.com/llvm/llvm-project/search?q=author%3Avrnithinkumar+author-date%3A2020-06-01..2020-08-31&unscoped_q=author%3Avrnithinkumar+author-date%3A2020-06-01..2020-08-31&type=Commits)\n(Maybe the link changes, if that is the case please search for: “[author:vrnithinkumar author-date:2020-06-01..2020-08-31]” in the repository of the LLVM project)\n- My GSoC work on Phabricator: [Reviews](https://reviews.llvm.org/differential/query/UwCbJYKaRcDb/)\n- [GSoC Project Page Link](https://summerofcode.withgoogle.com/projects/#5376312975294464)\n- [Original report link](https://docs.google.com/document/d/1WZSt45kZUhg0UbOv0HXBhyEYaHrb-G-TpEhj_nU041Q/edit?usp=sharing)\n## Abstract\nThe [Clang Static Analyzer](https://clang-analyzer.llvm.org/) is used to find bugs in the program by analyzing source code without compiling and executing. It uses symbolic computations to find the defects. Analyzer covers a variety of checks targeted at finding security and API usage bugs, dead code, null dereference, division by zero, and other logic errors. The Clang Static Analyzer already has a checker to find the null pointer dereference in code, however it is not sufficient for higher abstractions such as C++ smart pointers or optionals. By explicitly teaching the C++ standard class behaviors we can make the Analyzer to find more bugs related to modern C++ code.\n## Goal\nEnable Clang Static Analyzer to find the occurrences of null smart pointer dereferences by teaching the observed behaviors of C++ smart pointer classes. Improve the analyzer’s ability to realize the values of the standard smart pointers without having to dig deep into the complex implementation details. We should be able to find more null dereference bugs related to the smart pointers while reducing the number of false positives. Should be able to cover at least one class fully eg. `std::unique_ptr`, and then extend it to `std::shared_ptr` or the `std::optional` if time permits. \n## Summary\nWithin the GSoC time period, we could not implement the modeling for all smart pointer methods and operators as we planned. Since the problem was more complicated than what we all anticipated. So far the majority of the modeling for std::unique_ptr is  implemented and committed. We were able to find some promising results with that. We found **8** true positive warnings related to smart pointer null dereference in [LLVM](https://github.com/llvm/llvm-project) project and **5** warnings in the [WebKit](https://webkit.org/) project. Even though we were only able to support `std::unique_ptr` so far, we accomplished to build a base modeling for the smart pointer checkers. And this will act as a consolidated foundation for developing checkers for any C++ objects that are passed by value. That is one of the first conscious attempts to do so and we've gained a lot of experience and managed to maintain our integrity - in the sense that the code ended up mostly free of hacks. It could most likely be generalized to modeling the entire C++ standard library. This does not give us the high-level architecture that'll be needed to deal with the scale of the standard library, but we got our low-level basics right. Also this work will be used to add support for checking other smart pointers `std::shard_ptr`, `std::weak_ptr` as well as `std::optionals`. Also it can be used to build a checker for use-after-free errors. \n## Research\n### Smart Pointer\nA Smart pointer is an abstract data type that simulates a pointer with additional automatic memory management. It manages a dynamically allocated object and ensures the dynamically allocated object is properly cleaned up. Such features are intended to reduce bugs caused by the misuse of pointers while retaining efficiency. Smart pointers typically keep track of the memory they point to, and may also be used to manage other resources, such as network connections and file handles.\n### Unique Pointer\nA `unique_ptr` is a smart pointer that owns and manages another object through a pointer and disposes that object when the `unique_ptr` goes out of scope. It should be used to own and manage any dynamically allocated object when its ownership is not shared. A `unique_ptr` explicitly prevents copying of its contained pointer (as would happen with the normal assignment), but the move assignment and move constructor can be used to transfer ownership of the contained pointer to another `unique_ptr`.\n\n**Example: 1 Dereferencing default-constructed unique pointer which is null**\n```cpp\nint foo(bool flag) {\n  std::unique_ptr<int> x; // note: Default constructed unique pointer is null\n  if (flag) // note: Assuming 'flag' is false;\n    return 0; // note: Taking false branch\n\n  return *x;  // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**Example: 2 Dereferencing a unique pointer after calling release()**\n```cpp\nint bar() {\n  std::unique_ptr<int> x(new int(42)) ;  // valid unique pointer;\n  x.release(); // note: smart pointer 'x' become null and the ownership of \n               // the memory is not transferred. And it causes a memory leak \n               // which should be warned.\n  return *x;   // warning: Dereferenced smart pointer 'x' is null. \n}\n```\nSimilar to above cases, other possible cases are dereferencing after calling `std::move()`, `reset()` or `reset(nullptr)`, getting and explicitly deleting inner pointer, or swapping with null pointer using `std::swap` ([more examples in Appendix](/2020/08/31/gsoc-report/#Appendix)). Above all cases will result in a crash.\n## Design\nThe basic idea of the checker is to keep a record of raw pointers wrapped inside the smart pointers using a map between smart pointer and corresponding inner pointer. Update the map by enumerating all situations when the smart pointer becomes null, as well as the situations when the smart pointer becomes non-null. For example when a smart pointer is default constructed track that smart pointer as it has a null inner pointer. Then check if any of the tracked pointers dereferenced has a null value. To make the bug report more clear attach additional details along the bug path to provide more detailed information on where the smart pointer becomes null.\n## Alternative Solution Considered\nAnother possible solution considered was manipulating symbolic values inside the smart pointer. The limitation that we run into here is that our memory model (\"RegionStore\") doesn't currently allow setting a \"default\" binding to a whole object when it's a part (say, a field) of a bigger object. This means that we have to understand how the smart pointer works internally (which field corresponds to what) to manipulate its symbolic value, which ties us to a specific implementation of the C++ standard library. This might still work for a unique pointer which probably always has exactly one field, but for shared pointers it is not the case and has multiple fields. So it depends on the different implementations of the C++ standard library. It has been decided to not go with this approach since this approach is challenging and potentially a lot of work compared to the first approach.\n## Implementation\n### Initial Smart Pointer Modeling and Checker\n[D81315](https://reviews.llvm.org/D81315): Created a basic implementation. \n- Made a separate checker class for emitting diagnostics. Used the new checker to use `checkPreCall` and put bug reporting logic there.\n- Kept all smart pointer related modeling logic in `SmartPtrModeling`. Shared common functionality via a header file shared between the `SmartPtrModeling` and `SmartPtrChecker`. \n- Made a `SmartPtrModeling` as a dependency to `SmartPtrChecker`.\n- Introduced a GDM with `MemRegion` as key and `SVal` as value to track the smart pointer and corresponding inner pointer.  \n- Also added support to model `unique_ptr` constructor, release and reset methods.\n- Used `evalCall` to handle modeling. As part of this enabled constructor support in `evalCall` event with [D82256](https://reviews.llvm.org/D82256). \n- Implemented `checkDeadSymbols` to clean up the `MemRegion` of smart pointers from the program state map when they go out of scope. Keeping the data structures in the program state as minimal as possible so that it would not grow to a great size while analyzing real code and eventually slows down the analysis.\n\nWith this patch, the model can emit warnings for cases like use after default constructor, use after release, or use after the reset with a null pointer. Kept the `SmartPtrChecker` under *alpha.cplusplus* package and smart pointer modeling have to be enabled by the `ModelSmartPtrDereference` flag.\n### checkRegionChanges for SmartPtrModeling\n[D83836](https://reviews.llvm.org/D83836): Implemented `checkRegionChanges` for `SmartPtrModeling`. To improve the accuracy, when a smart pointer is passed by a non-const reference into a function, removed the tracked region data. Since it is not sure what happens to the smart pointer inside the function.\n```cpp\nint foo() {\n  std::unique_ptr<int> P; // note: Default constructed unique pointer is null\n  bar(&P); // note: Passing by reference\n  return *P; // No warnings\n}\n```\nFor example here in the code above, we are passing a default constructed `unique_ptr` ‘P’ to method `bar()`. But it is unknown whether the `unique_ptr` ‘P’ is reset with a valid inner pointer or not inside `bar()`. To avoid false positives we are not producing any warning on dereference of `unique_ptr` ‘P’ after `bar()`.\n### Modeling for unique_ptr::swap method\n[D83877](https://reviews.llvm.org/D83877): Enabled the `SmartPtrModeling` to handle the swap method for `unique_ptr`. The `swap()` method can be used to exchange ownership of inner pointers between the `unique_ptrs`. So it is possible to make a `unique_ptr` null by swapping with another null `unique_ptr`. With this patch warnings are emitted when a `unique_ptr` is used after swapping with another `unique_ptr` with null as an inner pointer.\n### NoteTag for better reporting\n[D84600](https://reviews.llvm.org/D84600): With NoteTags added more detailed information on where the smart pointer becomes null in the bug path. Introduced a `getNullDereferenceBugType()` inter-checker API to check if the bug type is interesting.\n*After adding NoteTags:*\n![alt text](/2020/08/31/gsoc-report/notetag.png \"NoteTags\")\n### Modeling for unque_ptr::get()\n[D86029](https://reviews.llvm.org/D86029): Modeled to return tracked inner pointer for the `get()` method. The `get()` method is used to access the inner pointer. When the inner pointer is used with conditional branching or other symbol constraining methods we can use the constraints on the inner pointer to find whether the corresponding `unique_ptr` is null or not. When the inner pointer value for a `unique_ptr` is available from the tracked map we bind that value to the return value of `get()` method. Also made changes to create `conjureSymbolVal` in case of missing inner pointer value for a `unique_ptr` region we are tracking.\n*Example:*\n![alt text](/2020/08/31/gsoc-report/get.png \"Get\")\n### Modeling for unique_ptr bool conversion \n[D86027](https://reviews.llvm.org/D86027): Modeling the case where `unique_ptr` is explicitly converted to bool. It is a common practice to check if a `unique_ptr` is null or not before accessing it. If the inner pointer value is already tracked and we know the value, we can figure out the corresponding boolean value. And the analyzer will take the branch based on that. Using `SValBuilder::conjureSymbolVal` to create a symbol when there is no symbol tracked yet and we constrain on that symbol to split the Exploded Graph with assuming null and non-null value.\n### Adding support for `checkLiveSymbols`\n[D86027](https://reviews.llvm.org/D86027): Implemented `checkLiveSymbols` to make sure that we are keeping the symbol alive until the corresponding owner `unique_ptr` is alive to avoid removing the constraints related to that symbol. Also when the `unique_ptr` goes out of scope, we make sure the symbols are cleaned up.\n```cpp\nvoid foo() {\n    int *RP = new int(12);\n    std::unique_ptr<int> P(RP);\n    if (P) { // Takes true branch\n    }\n}\n```\nFor example here in the code above, we have to keep the symbol for `RP` alive since that is tracked as the inner pointer value of `unique_ptr` P. We have to use the constraints on that symbol to decide whether the branching takes the true or false branch. \n### Modeling of move assignment operator (unique_ptr::operator=)\n[D86293](https://reviews.llvm.org/D86293): Modeled how the unique_ptr moves the ownership of its managed memory to another `unique_ptr` via `=` operator. With the move assignment operator a `unique_ptr` can be reset with another `unique_ptr` whereas the assigned `unique_ptr` will lose its ownership of its inner pointer and become null. Also it is possible to assign `nullptr` to a `unique_ptr` and reset it to null. Made changes to update the tracked values of both LHS and RHS side `unique_ptr` values of the operator.\n### Modeling for unique_ptr move constructor\n[D86373](https://reviews.llvm.org/D86373): Similar to the `=` operator, modeled how the `unique_ptr` moves the ownership of its managed memory to another via move constructor. Then tracked the moved unique_ptr’s inner pointer value as null.\n\n## Evaluation\nThe checker has been evaluated on a number of open-source software projects which use smart pointers extensively([symengine](https://github.com/symengine/symengine), [oatpp](https://github.com/oatpp/oatpp), [zstd](https://github.com/facebook/zstd), [simbody](https://github.com/simbody/simbody), [duckdb](https://github.com/cwida/duckdb), [drogon](https://github.com/an-tao/drogon), [fmt](https://github.com/fmtlib/fmt), [re2](https://github.com/google/re2), [cppcheck](https://github.com/danmar/cppcheck), [faiss](https://github.com/facebookresearch/faiss)). Unfortunately(or fortunately) the checker did not produce any warnings which are not false positive. But we found **8** true positive warnings related to smart pointer null dereference in [LLVM](https://github.com/llvm/llvm-project) project and **5** warnings in the [WebKit](https://webkit.org/) project.\n\n*(Attaching few example warnings)*\n**Warnings in LLVM**\n*Warning-1: clang/lib/Analysis/Consumed.cpp*\n![alt text](/2020/08/31/gsoc-report/llvm_1.png \"LLVM Warning-1\")\n*Warning-2: clang/lib/Lex/Preprocessor.cpp*\n![alt text](/2020/08/31/gsoc-report/llvm_2.png \"LLVM Warning-2\")\n*Warning-3: llvm/utils/TableGen/OptParserEmitter.cpp*\n![alt text](/2020/08/31/gsoc-report/llvm_3.png \"LLVM Warning-3\")\n**Warnings in WebKit**\n*Warning-1:*\n![alt text](/2020/08/31/gsoc-report/wk_1.png \"WebKit Warning-1\")\n*Warning-2:*\n![alt text](/2020/08/31/gsoc-report/wk_2.png \"WebKit Warning-2\")\n*Warning-3:*\n![alt text](/2020/08/31/gsoc-report/wk_3.png \"WebKit Warning-3\")\n*Warning-4:*\n![alt text](/2020/08/31/gsoc-report/wk_4.png \"WebKit Warning-4\")\n\n## Future Work\n### Model remaining methods of unique_ptr\nSo far we covered the important methods related to `unique_ptr`, but still there exist few more methods and operators on `unique_ptr` to cover. Remaining methods are `std::make_unique`, `std::make_unique_for_overwrite`, and `std::swap`. Remaining operators include `operator*`, `operator->`, and all the comparison operators.\n### Model other smart pointers\nExtend the modeling for `std::shared_ptr`, `std::weak_ptr` and `std::optional`. Right now `SmartPtrModeling` only models most of the `std::unique_ptr`, adding modeling for other smart pointers will make the checker complete.\n### CallDescriptionMap support for CXX Constructor and Operator\nTo enable the checker by default we have to use `CallDescriptionMap` for `evalCall`. Right now we are manually implementing the name matching logic that has been already implemented in `CallDescriptionMap`. But the support for the *Constructor* and *Operator* calls are not supported yet and changes are in review([D81059](https://reviews.llvm.org/D81059), [D80503](https://reviews.llvm.org/D80503)) by [Charusso](https://reviews.llvm.org/p/Charusso).\n### Enabling the checker by default\nThe SmartPtrChecker is under the *alpha.cplusplus* package and smart pointer modeling has to be enabled by the `ModelSmartPtrDereference` flag. Enabling the checker by default will benefit codebases that use smart pointers. \n### Inlined defensive checks\nWe are using `trackExpressionValue()` to track how an inner pointer expression for a unique_ptr is getting null in the bug report. The `trackExpressionValue()` is suppressing some warnings to avoid the false positives with inlined defensive checks.\n\nFor example the code below is a true positive warning.\n```cpp\nint foo(std::unique_ptr<int> P) {\n  if (P) {} // Assuming P is null.\n  return *P; // warning: null dereference\n}\n```\nOn the other hand, the code below is a false positive warning. We cannot infer `unique_ptr` Q is null in `bar()` based on the check `if(P)` in function call `foo()`. So the warning should be suppressed.\n```cpp\nvoid foo(std::unique_ptr<int> P) {\n    if (P) {} // Assuming P is null\n}\n\nint bar(std::unique_ptr<int> Q) {\n    foo(Q);\n    return *Q; // warning: null dereference\n}\n```\nRight now we are trusting `trackExpressionValue()` when it suppresses reports. It may occasionally suppress true positive warnings, but it's better than having false positives. \nBelow code is an example for a suppressed true positive warning.\n```cpp\nint *return_null() {return nullptr;}\n\nint foo() {\n  std::unique_ptr<int> x(return_null());\n  return *x; // no-warning\n}\n```\nWe have to investigate more on real world projects and see `trackExpressionValue()` is sufficient for suppressing all false positive warnings related to inlined defensive checks.\n### Marking regions as not interesting\nRight now there is no API similar to `markInteresting()` for marking the region not interesting in a bug report. With this support, our checker can remove less useful and unwanted notes showing in the report. For example, when a `unique_ptr` is referenced after the `release()` we don't have to show a note tag on the `unique_ptr` constructor unless it is constructed with null.\n\n*Before:*\n![alt text](/2020/08/31/gsoc-report/ntbefore.png \"Before marking not interesting\")\n*After: marking P not interesting*\n![alt text](/2020/08/31/gsoc-report/ntafter.png \"After marking not interesting\")\n### Communication with MallocChecker\nWhen raw pointers are accessed from `unique_ptr` via `get()` or `release()`, we have to ensure that the raw pointers are tracked via `MallocChecker`. Also, enable SmartPtrModeling to communicate the deallocation to `MallocChecker` when we see the destructor call of the `unique_ptr` and it has a default deleter. Also, communicating with `MallocChecker` could potentially find double-free errors when the same pointer is passed to multiple unique_ptrs or it is also freed independently of the `unique_ptr` ([example](/2020/08/31/gsoc-report/#Double-free-error-example)).\n\n### Add modeling for user-defined custom smart pointers\nMany C++ projects have their own custom implementations of smart pointers similar to [boost::shared_ptr](https://www.boost.org/doc/libs/1_61_0/libs/smart_ptr/shared_ptr.htm) or [llvm::IntrusiveRefCntPtr](https://llvm.org/doxygen/classllvm_1_1IntrusiveRefCntPtr.html). If the user can specify the custom smart pointers and methods on it, we could reuse the existing `SmartPtrModeling` for modeling and checking the custom smart pointers.\n## How to use\nAll the changes are in the master. But the checker and modeling are not enabled by default. Checker is under the *alpha.cplusplus* package and smart pointer modeling has to be enabled by the `ModelSmartPtrDereference` flag. \n\n**Checker and modeling can be enabled explicitly:**\n```bash\n$scan-build -enable-checker alpha.cplusplus.SmartPtr -analyzer-config cplusplus.SmartPtrModeling:ModelSmartPtrDereference=true clang -c test.cpp\n```\n(Since `SmartPtrChecker` is depended to `SmartPtrModeling` we don't have to explicitly enable `SmartPtrModeling`)\n\n## Acknowledgment\nI want to express my gratitude towards everyone that helped me with this project, but especially to 3 individuals: My mentors, [Artem Dergachev](https://github.com/haoNoQ), [Gábor Horváth](https://github.com/Xazax-hun), and [Valeriy Savchenko](https://github.com/SavchenkoValeriy). With their guidance, I’ve learned a lot about how Clang Static Analyzer works during the summer. I got to skype with them every Monday and received all the help and suggestions. When I got stuck with issues I got immediate help even on the weekends. Also, I received very fast feedback for my review requests. I am also thankful to [Kristóf Umann](https://reviews.llvm.org/p/Szelethus/) for tips and comments on the reviews.\n\nThank you very much for the support and mentoring.\n## Appendix\n### Potential bugs with unique_ptr\n\n**A default constructed unique pointer has null value**\n```cpp\nint foo() {\n    std::unique_ptr<int> x; // note: Default constructor produces a null unique pointer\n    return *x; // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**Unique pointer constructed with null value**\n```cpp\nint foo() {\n    std::unique_ptr<int> x(nullptr);  // note: Default constructor produces a null unique pointer\n    return *x;  // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**Unique pointer constructed with move constructor**\n```cpp\nint foo() {\n    std::unique_ptr<int> y(new int(13));  \n    std::unique_ptr<int> x(std::move(y)); // note: unique_ptr y is moved to x\n    return *y; // warning: Dereferenced smart pointer 'y' is null.\n}\n```\n**release**\n```cpp\nint foo() {\n    std::unique_ptr<int> x(new int(13));  \n    x.release(); // note: unique_ptr x is null after release\n    return *x; // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**reset**\n```cpp\nint foo() {\n    std::unique_ptr<int> x(new int(13));  \n    x.reset(nullptr); // note: unique_ptr x is null after reset to null\n    return *x;  // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**swap**\n```cpp\nint foo() {\n    std::unique_ptr<int> x(new int(13));\n    std::unique_ptr<int> y; \n    x.swap(y); // note: x is null after swapping with null y\n    return *x; // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**get**\n```cpp\nint foo() {\n    std::unique_ptr<int> x;\n    if(!x.get())\n        return *x; // warning: Dereferenced smart pointer 'x' is null.\n    return 0;\n}\n```\n**operator bool**\n```cpp\nint foo() {\n    std::unique_ptr<int> x;\n    if(!x)\n        return *x; // warning: Dereferenced smart pointer 'x' is null.\n    return 0;\n}\n```\n### Double-free error example\n```cpp\nvoid foo() {\n  int *i = new int(42);\n  std::shared_ptr<int> p1(i);\n  std::shared_ptr<int> p2(i); // When p2 goes out of scope it will try \n                              // to delete the inner pointer which is already deleted by p1.\n}\n```\n","source":"_posts/gsoc-report.md","raw":"---\nlayout:     post\ntitle: Find null smart pointer dereferences with the Clang Static Analyzer[GSoC2020]\nsubtitle: Final Report-Google Summer of Code 2020\ndate: 2020-08-31 12:00:07\nauthor:     \"Nithin\"\nheader-img: \"llvm.png\"\ncatalog: true\ntags:\n    - LLVM\n    - Clang\n    - GSoC2020\n    - Static-Analysis\n---\n- My GSoC work on GitHub: [Commits](https://github.com/llvm/llvm-project/search?q=author%3Avrnithinkumar+author-date%3A2020-06-01..2020-08-31&unscoped_q=author%3Avrnithinkumar+author-date%3A2020-06-01..2020-08-31&type=Commits)\n(Maybe the link changes, if that is the case please search for: “[author:vrnithinkumar author-date:2020-06-01..2020-08-31]” in the repository of the LLVM project)\n- My GSoC work on Phabricator: [Reviews](https://reviews.llvm.org/differential/query/UwCbJYKaRcDb/)\n- [GSoC Project Page Link](https://summerofcode.withgoogle.com/projects/#5376312975294464)\n- [Original report link](https://docs.google.com/document/d/1WZSt45kZUhg0UbOv0HXBhyEYaHrb-G-TpEhj_nU041Q/edit?usp=sharing)\n## Abstract\nThe [Clang Static Analyzer](https://clang-analyzer.llvm.org/) is used to find bugs in the program by analyzing source code without compiling and executing. It uses symbolic computations to find the defects. Analyzer covers a variety of checks targeted at finding security and API usage bugs, dead code, null dereference, division by zero, and other logic errors. The Clang Static Analyzer already has a checker to find the null pointer dereference in code, however it is not sufficient for higher abstractions such as C++ smart pointers or optionals. By explicitly teaching the C++ standard class behaviors we can make the Analyzer to find more bugs related to modern C++ code.\n## Goal\nEnable Clang Static Analyzer to find the occurrences of null smart pointer dereferences by teaching the observed behaviors of C++ smart pointer classes. Improve the analyzer’s ability to realize the values of the standard smart pointers without having to dig deep into the complex implementation details. We should be able to find more null dereference bugs related to the smart pointers while reducing the number of false positives. Should be able to cover at least one class fully eg. `std::unique_ptr`, and then extend it to `std::shared_ptr` or the `std::optional` if time permits. \n## Summary\nWithin the GSoC time period, we could not implement the modeling for all smart pointer methods and operators as we planned. Since the problem was more complicated than what we all anticipated. So far the majority of the modeling for std::unique_ptr is  implemented and committed. We were able to find some promising results with that. We found **8** true positive warnings related to smart pointer null dereference in [LLVM](https://github.com/llvm/llvm-project) project and **5** warnings in the [WebKit](https://webkit.org/) project. Even though we were only able to support `std::unique_ptr` so far, we accomplished to build a base modeling for the smart pointer checkers. And this will act as a consolidated foundation for developing checkers for any C++ objects that are passed by value. That is one of the first conscious attempts to do so and we've gained a lot of experience and managed to maintain our integrity - in the sense that the code ended up mostly free of hacks. It could most likely be generalized to modeling the entire C++ standard library. This does not give us the high-level architecture that'll be needed to deal with the scale of the standard library, but we got our low-level basics right. Also this work will be used to add support for checking other smart pointers `std::shard_ptr`, `std::weak_ptr` as well as `std::optionals`. Also it can be used to build a checker for use-after-free errors. \n## Research\n### Smart Pointer\nA Smart pointer is an abstract data type that simulates a pointer with additional automatic memory management. It manages a dynamically allocated object and ensures the dynamically allocated object is properly cleaned up. Such features are intended to reduce bugs caused by the misuse of pointers while retaining efficiency. Smart pointers typically keep track of the memory they point to, and may also be used to manage other resources, such as network connections and file handles.\n### Unique Pointer\nA `unique_ptr` is a smart pointer that owns and manages another object through a pointer and disposes that object when the `unique_ptr` goes out of scope. It should be used to own and manage any dynamically allocated object when its ownership is not shared. A `unique_ptr` explicitly prevents copying of its contained pointer (as would happen with the normal assignment), but the move assignment and move constructor can be used to transfer ownership of the contained pointer to another `unique_ptr`.\n\n**Example: 1 Dereferencing default-constructed unique pointer which is null**\n```cpp\nint foo(bool flag) {\n  std::unique_ptr<int> x; // note: Default constructed unique pointer is null\n  if (flag) // note: Assuming 'flag' is false;\n    return 0; // note: Taking false branch\n\n  return *x;  // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**Example: 2 Dereferencing a unique pointer after calling release()**\n```cpp\nint bar() {\n  std::unique_ptr<int> x(new int(42)) ;  // valid unique pointer;\n  x.release(); // note: smart pointer 'x' become null and the ownership of \n               // the memory is not transferred. And it causes a memory leak \n               // which should be warned.\n  return *x;   // warning: Dereferenced smart pointer 'x' is null. \n}\n```\nSimilar to above cases, other possible cases are dereferencing after calling `std::move()`, `reset()` or `reset(nullptr)`, getting and explicitly deleting inner pointer, or swapping with null pointer using `std::swap` ([more examples in Appendix](/2020/08/31/gsoc-report/#Appendix)). Above all cases will result in a crash.\n## Design\nThe basic idea of the checker is to keep a record of raw pointers wrapped inside the smart pointers using a map between smart pointer and corresponding inner pointer. Update the map by enumerating all situations when the smart pointer becomes null, as well as the situations when the smart pointer becomes non-null. For example when a smart pointer is default constructed track that smart pointer as it has a null inner pointer. Then check if any of the tracked pointers dereferenced has a null value. To make the bug report more clear attach additional details along the bug path to provide more detailed information on where the smart pointer becomes null.\n## Alternative Solution Considered\nAnother possible solution considered was manipulating symbolic values inside the smart pointer. The limitation that we run into here is that our memory model (\"RegionStore\") doesn't currently allow setting a \"default\" binding to a whole object when it's a part (say, a field) of a bigger object. This means that we have to understand how the smart pointer works internally (which field corresponds to what) to manipulate its symbolic value, which ties us to a specific implementation of the C++ standard library. This might still work for a unique pointer which probably always has exactly one field, but for shared pointers it is not the case and has multiple fields. So it depends on the different implementations of the C++ standard library. It has been decided to not go with this approach since this approach is challenging and potentially a lot of work compared to the first approach.\n## Implementation\n### Initial Smart Pointer Modeling and Checker\n[D81315](https://reviews.llvm.org/D81315): Created a basic implementation. \n- Made a separate checker class for emitting diagnostics. Used the new checker to use `checkPreCall` and put bug reporting logic there.\n- Kept all smart pointer related modeling logic in `SmartPtrModeling`. Shared common functionality via a header file shared between the `SmartPtrModeling` and `SmartPtrChecker`. \n- Made a `SmartPtrModeling` as a dependency to `SmartPtrChecker`.\n- Introduced a GDM with `MemRegion` as key and `SVal` as value to track the smart pointer and corresponding inner pointer.  \n- Also added support to model `unique_ptr` constructor, release and reset methods.\n- Used `evalCall` to handle modeling. As part of this enabled constructor support in `evalCall` event with [D82256](https://reviews.llvm.org/D82256). \n- Implemented `checkDeadSymbols` to clean up the `MemRegion` of smart pointers from the program state map when they go out of scope. Keeping the data structures in the program state as minimal as possible so that it would not grow to a great size while analyzing real code and eventually slows down the analysis.\n\nWith this patch, the model can emit warnings for cases like use after default constructor, use after release, or use after the reset with a null pointer. Kept the `SmartPtrChecker` under *alpha.cplusplus* package and smart pointer modeling have to be enabled by the `ModelSmartPtrDereference` flag.\n### checkRegionChanges for SmartPtrModeling\n[D83836](https://reviews.llvm.org/D83836): Implemented `checkRegionChanges` for `SmartPtrModeling`. To improve the accuracy, when a smart pointer is passed by a non-const reference into a function, removed the tracked region data. Since it is not sure what happens to the smart pointer inside the function.\n```cpp\nint foo() {\n  std::unique_ptr<int> P; // note: Default constructed unique pointer is null\n  bar(&P); // note: Passing by reference\n  return *P; // No warnings\n}\n```\nFor example here in the code above, we are passing a default constructed `unique_ptr` ‘P’ to method `bar()`. But it is unknown whether the `unique_ptr` ‘P’ is reset with a valid inner pointer or not inside `bar()`. To avoid false positives we are not producing any warning on dereference of `unique_ptr` ‘P’ after `bar()`.\n### Modeling for unique_ptr::swap method\n[D83877](https://reviews.llvm.org/D83877): Enabled the `SmartPtrModeling` to handle the swap method for `unique_ptr`. The `swap()` method can be used to exchange ownership of inner pointers between the `unique_ptrs`. So it is possible to make a `unique_ptr` null by swapping with another null `unique_ptr`. With this patch warnings are emitted when a `unique_ptr` is used after swapping with another `unique_ptr` with null as an inner pointer.\n### NoteTag for better reporting\n[D84600](https://reviews.llvm.org/D84600): With NoteTags added more detailed information on where the smart pointer becomes null in the bug path. Introduced a `getNullDereferenceBugType()` inter-checker API to check if the bug type is interesting.\n*After adding NoteTags:*\n![alt text](/2020/08/31/gsoc-report/notetag.png \"NoteTags\")\n### Modeling for unque_ptr::get()\n[D86029](https://reviews.llvm.org/D86029): Modeled to return tracked inner pointer for the `get()` method. The `get()` method is used to access the inner pointer. When the inner pointer is used with conditional branching or other symbol constraining methods we can use the constraints on the inner pointer to find whether the corresponding `unique_ptr` is null or not. When the inner pointer value for a `unique_ptr` is available from the tracked map we bind that value to the return value of `get()` method. Also made changes to create `conjureSymbolVal` in case of missing inner pointer value for a `unique_ptr` region we are tracking.\n*Example:*\n![alt text](/2020/08/31/gsoc-report/get.png \"Get\")\n### Modeling for unique_ptr bool conversion \n[D86027](https://reviews.llvm.org/D86027): Modeling the case where `unique_ptr` is explicitly converted to bool. It is a common practice to check if a `unique_ptr` is null or not before accessing it. If the inner pointer value is already tracked and we know the value, we can figure out the corresponding boolean value. And the analyzer will take the branch based on that. Using `SValBuilder::conjureSymbolVal` to create a symbol when there is no symbol tracked yet and we constrain on that symbol to split the Exploded Graph with assuming null and non-null value.\n### Adding support for `checkLiveSymbols`\n[D86027](https://reviews.llvm.org/D86027): Implemented `checkLiveSymbols` to make sure that we are keeping the symbol alive until the corresponding owner `unique_ptr` is alive to avoid removing the constraints related to that symbol. Also when the `unique_ptr` goes out of scope, we make sure the symbols are cleaned up.\n```cpp\nvoid foo() {\n    int *RP = new int(12);\n    std::unique_ptr<int> P(RP);\n    if (P) { // Takes true branch\n    }\n}\n```\nFor example here in the code above, we have to keep the symbol for `RP` alive since that is tracked as the inner pointer value of `unique_ptr` P. We have to use the constraints on that symbol to decide whether the branching takes the true or false branch. \n### Modeling of move assignment operator (unique_ptr::operator=)\n[D86293](https://reviews.llvm.org/D86293): Modeled how the unique_ptr moves the ownership of its managed memory to another `unique_ptr` via `=` operator. With the move assignment operator a `unique_ptr` can be reset with another `unique_ptr` whereas the assigned `unique_ptr` will lose its ownership of its inner pointer and become null. Also it is possible to assign `nullptr` to a `unique_ptr` and reset it to null. Made changes to update the tracked values of both LHS and RHS side `unique_ptr` values of the operator.\n### Modeling for unique_ptr move constructor\n[D86373](https://reviews.llvm.org/D86373): Similar to the `=` operator, modeled how the `unique_ptr` moves the ownership of its managed memory to another via move constructor. Then tracked the moved unique_ptr’s inner pointer value as null.\n\n## Evaluation\nThe checker has been evaluated on a number of open-source software projects which use smart pointers extensively([symengine](https://github.com/symengine/symengine), [oatpp](https://github.com/oatpp/oatpp), [zstd](https://github.com/facebook/zstd), [simbody](https://github.com/simbody/simbody), [duckdb](https://github.com/cwida/duckdb), [drogon](https://github.com/an-tao/drogon), [fmt](https://github.com/fmtlib/fmt), [re2](https://github.com/google/re2), [cppcheck](https://github.com/danmar/cppcheck), [faiss](https://github.com/facebookresearch/faiss)). Unfortunately(or fortunately) the checker did not produce any warnings which are not false positive. But we found **8** true positive warnings related to smart pointer null dereference in [LLVM](https://github.com/llvm/llvm-project) project and **5** warnings in the [WebKit](https://webkit.org/) project.\n\n*(Attaching few example warnings)*\n**Warnings in LLVM**\n*Warning-1: clang/lib/Analysis/Consumed.cpp*\n![alt text](/2020/08/31/gsoc-report/llvm_1.png \"LLVM Warning-1\")\n*Warning-2: clang/lib/Lex/Preprocessor.cpp*\n![alt text](/2020/08/31/gsoc-report/llvm_2.png \"LLVM Warning-2\")\n*Warning-3: llvm/utils/TableGen/OptParserEmitter.cpp*\n![alt text](/2020/08/31/gsoc-report/llvm_3.png \"LLVM Warning-3\")\n**Warnings in WebKit**\n*Warning-1:*\n![alt text](/2020/08/31/gsoc-report/wk_1.png \"WebKit Warning-1\")\n*Warning-2:*\n![alt text](/2020/08/31/gsoc-report/wk_2.png \"WebKit Warning-2\")\n*Warning-3:*\n![alt text](/2020/08/31/gsoc-report/wk_3.png \"WebKit Warning-3\")\n*Warning-4:*\n![alt text](/2020/08/31/gsoc-report/wk_4.png \"WebKit Warning-4\")\n\n## Future Work\n### Model remaining methods of unique_ptr\nSo far we covered the important methods related to `unique_ptr`, but still there exist few more methods and operators on `unique_ptr` to cover. Remaining methods are `std::make_unique`, `std::make_unique_for_overwrite`, and `std::swap`. Remaining operators include `operator*`, `operator->`, and all the comparison operators.\n### Model other smart pointers\nExtend the modeling for `std::shared_ptr`, `std::weak_ptr` and `std::optional`. Right now `SmartPtrModeling` only models most of the `std::unique_ptr`, adding modeling for other smart pointers will make the checker complete.\n### CallDescriptionMap support for CXX Constructor and Operator\nTo enable the checker by default we have to use `CallDescriptionMap` for `evalCall`. Right now we are manually implementing the name matching logic that has been already implemented in `CallDescriptionMap`. But the support for the *Constructor* and *Operator* calls are not supported yet and changes are in review([D81059](https://reviews.llvm.org/D81059), [D80503](https://reviews.llvm.org/D80503)) by [Charusso](https://reviews.llvm.org/p/Charusso).\n### Enabling the checker by default\nThe SmartPtrChecker is under the *alpha.cplusplus* package and smart pointer modeling has to be enabled by the `ModelSmartPtrDereference` flag. Enabling the checker by default will benefit codebases that use smart pointers. \n### Inlined defensive checks\nWe are using `trackExpressionValue()` to track how an inner pointer expression for a unique_ptr is getting null in the bug report. The `trackExpressionValue()` is suppressing some warnings to avoid the false positives with inlined defensive checks.\n\nFor example the code below is a true positive warning.\n```cpp\nint foo(std::unique_ptr<int> P) {\n  if (P) {} // Assuming P is null.\n  return *P; // warning: null dereference\n}\n```\nOn the other hand, the code below is a false positive warning. We cannot infer `unique_ptr` Q is null in `bar()` based on the check `if(P)` in function call `foo()`. So the warning should be suppressed.\n```cpp\nvoid foo(std::unique_ptr<int> P) {\n    if (P) {} // Assuming P is null\n}\n\nint bar(std::unique_ptr<int> Q) {\n    foo(Q);\n    return *Q; // warning: null dereference\n}\n```\nRight now we are trusting `trackExpressionValue()` when it suppresses reports. It may occasionally suppress true positive warnings, but it's better than having false positives. \nBelow code is an example for a suppressed true positive warning.\n```cpp\nint *return_null() {return nullptr;}\n\nint foo() {\n  std::unique_ptr<int> x(return_null());\n  return *x; // no-warning\n}\n```\nWe have to investigate more on real world projects and see `trackExpressionValue()` is sufficient for suppressing all false positive warnings related to inlined defensive checks.\n### Marking regions as not interesting\nRight now there is no API similar to `markInteresting()` for marking the region not interesting in a bug report. With this support, our checker can remove less useful and unwanted notes showing in the report. For example, when a `unique_ptr` is referenced after the `release()` we don't have to show a note tag on the `unique_ptr` constructor unless it is constructed with null.\n\n*Before:*\n![alt text](/2020/08/31/gsoc-report/ntbefore.png \"Before marking not interesting\")\n*After: marking P not interesting*\n![alt text](/2020/08/31/gsoc-report/ntafter.png \"After marking not interesting\")\n### Communication with MallocChecker\nWhen raw pointers are accessed from `unique_ptr` via `get()` or `release()`, we have to ensure that the raw pointers are tracked via `MallocChecker`. Also, enable SmartPtrModeling to communicate the deallocation to `MallocChecker` when we see the destructor call of the `unique_ptr` and it has a default deleter. Also, communicating with `MallocChecker` could potentially find double-free errors when the same pointer is passed to multiple unique_ptrs or it is also freed independently of the `unique_ptr` ([example](/2020/08/31/gsoc-report/#Double-free-error-example)).\n\n### Add modeling for user-defined custom smart pointers\nMany C++ projects have their own custom implementations of smart pointers similar to [boost::shared_ptr](https://www.boost.org/doc/libs/1_61_0/libs/smart_ptr/shared_ptr.htm) or [llvm::IntrusiveRefCntPtr](https://llvm.org/doxygen/classllvm_1_1IntrusiveRefCntPtr.html). If the user can specify the custom smart pointers and methods on it, we could reuse the existing `SmartPtrModeling` for modeling and checking the custom smart pointers.\n## How to use\nAll the changes are in the master. But the checker and modeling are not enabled by default. Checker is under the *alpha.cplusplus* package and smart pointer modeling has to be enabled by the `ModelSmartPtrDereference` flag. \n\n**Checker and modeling can be enabled explicitly:**\n```bash\n$scan-build -enable-checker alpha.cplusplus.SmartPtr -analyzer-config cplusplus.SmartPtrModeling:ModelSmartPtrDereference=true clang -c test.cpp\n```\n(Since `SmartPtrChecker` is depended to `SmartPtrModeling` we don't have to explicitly enable `SmartPtrModeling`)\n\n## Acknowledgment\nI want to express my gratitude towards everyone that helped me with this project, but especially to 3 individuals: My mentors, [Artem Dergachev](https://github.com/haoNoQ), [Gábor Horváth](https://github.com/Xazax-hun), and [Valeriy Savchenko](https://github.com/SavchenkoValeriy). With their guidance, I’ve learned a lot about how Clang Static Analyzer works during the summer. I got to skype with them every Monday and received all the help and suggestions. When I got stuck with issues I got immediate help even on the weekends. Also, I received very fast feedback for my review requests. I am also thankful to [Kristóf Umann](https://reviews.llvm.org/p/Szelethus/) for tips and comments on the reviews.\n\nThank you very much for the support and mentoring.\n## Appendix\n### Potential bugs with unique_ptr\n\n**A default constructed unique pointer has null value**\n```cpp\nint foo() {\n    std::unique_ptr<int> x; // note: Default constructor produces a null unique pointer\n    return *x; // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**Unique pointer constructed with null value**\n```cpp\nint foo() {\n    std::unique_ptr<int> x(nullptr);  // note: Default constructor produces a null unique pointer\n    return *x;  // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**Unique pointer constructed with move constructor**\n```cpp\nint foo() {\n    std::unique_ptr<int> y(new int(13));  \n    std::unique_ptr<int> x(std::move(y)); // note: unique_ptr y is moved to x\n    return *y; // warning: Dereferenced smart pointer 'y' is null.\n}\n```\n**release**\n```cpp\nint foo() {\n    std::unique_ptr<int> x(new int(13));  \n    x.release(); // note: unique_ptr x is null after release\n    return *x; // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**reset**\n```cpp\nint foo() {\n    std::unique_ptr<int> x(new int(13));  \n    x.reset(nullptr); // note: unique_ptr x is null after reset to null\n    return *x;  // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**swap**\n```cpp\nint foo() {\n    std::unique_ptr<int> x(new int(13));\n    std::unique_ptr<int> y; \n    x.swap(y); // note: x is null after swapping with null y\n    return *x; // warning: Dereferenced smart pointer 'x' is null.\n}\n```\n**get**\n```cpp\nint foo() {\n    std::unique_ptr<int> x;\n    if(!x.get())\n        return *x; // warning: Dereferenced smart pointer 'x' is null.\n    return 0;\n}\n```\n**operator bool**\n```cpp\nint foo() {\n    std::unique_ptr<int> x;\n    if(!x)\n        return *x; // warning: Dereferenced smart pointer 'x' is null.\n    return 0;\n}\n```\n### Double-free error example\n```cpp\nvoid foo() {\n  int *i = new int(42);\n  std::shared_ptr<int> p1(i);\n  std::shared_ptr<int> p2(i); // When p2 goes out of scope it will try \n                              // to delete the inner pointer which is already deleted by p1.\n}\n```\n","slug":"gsoc-report","published":1,"updated":"2020-08-31T11:55:51.917Z","_id":"ckeicscjg000snncvo1n9rcgt","comments":1,"photos":[],"link":"","content":"<ul>\n<li>My GSoC work on GitHub: <a href=\"https://github.com/llvm/llvm-project/search?q=author%3Avrnithinkumar+author-date%3A2020-06-01..2020-08-31&amp;unscoped_q=author%3Avrnithinkumar+author-date%3A2020-06-01..2020-08-31&amp;type=Commits\" target=\"_blank\" rel=\"external\">Commits</a><br>(Maybe the link changes, if that is the case please search for: “[author:vrnithinkumar author-date:2020-06-01..2020-08-31]” in the repository of the LLVM project)</li>\n<li>My GSoC work on Phabricator: <a href=\"https://reviews.llvm.org/differential/query/UwCbJYKaRcDb/\" target=\"_blank\" rel=\"external\">Reviews</a></li>\n<li><a href=\"https://summerofcode.withgoogle.com/projects/#5376312975294464\" target=\"_blank\" rel=\"external\">GSoC Project Page Link</a></li>\n<li><a href=\"https://docs.google.com/document/d/1WZSt45kZUhg0UbOv0HXBhyEYaHrb-G-TpEhj_nU041Q/edit?usp=sharing\" target=\"_blank\" rel=\"external\">Original report link</a><h2 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h2>The <a href=\"https://clang-analyzer.llvm.org/\" target=\"_blank\" rel=\"external\">Clang Static Analyzer</a> is used to find bugs in the program by analyzing source code without compiling and executing. It uses symbolic computations to find the defects. Analyzer covers a variety of checks targeted at finding security and API usage bugs, dead code, null dereference, division by zero, and other logic errors. The Clang Static Analyzer already has a checker to find the null pointer dereference in code, however it is not sufficient for higher abstractions such as C++ smart pointers or optionals. By explicitly teaching the C++ standard class behaviors we can make the Analyzer to find more bugs related to modern C++ code.<h2 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h2>Enable Clang Static Analyzer to find the occurrences of null smart pointer dereferences by teaching the observed behaviors of C++ smart pointer classes. Improve the analyzer’s ability to realize the values of the standard smart pointers without having to dig deep into the complex implementation details. We should be able to find more null dereference bugs related to the smart pointers while reducing the number of false positives. Should be able to cover at least one class fully eg. <code>std::unique_ptr</code>, and then extend it to <code>std::shared_ptr</code> or the <code>std::optional</code> if time permits. <h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2>Within the GSoC time period, we could not implement the modeling for all smart pointer methods and operators as we planned. Since the problem was more complicated than what we all anticipated. So far the majority of the modeling for std::unique_ptr is  implemented and committed. We were able to find some promising results with that. We found <strong>8</strong> true positive warnings related to smart pointer null dereference in <a href=\"https://github.com/llvm/llvm-project\" target=\"_blank\" rel=\"external\">LLVM</a> project and <strong>5</strong> warnings in the <a href=\"https://webkit.org/\" target=\"_blank\" rel=\"external\">WebKit</a> project. Even though we were only able to support <code>std::unique_ptr</code> so far, we accomplished to build a base modeling for the smart pointer checkers. And this will act as a consolidated foundation for developing checkers for any C++ objects that are passed by value. That is one of the first conscious attempts to do so and we’ve gained a lot of experience and managed to maintain our integrity - in the sense that the code ended up mostly free of hacks. It could most likely be generalized to modeling the entire C++ standard library. This does not give us the high-level architecture that’ll be needed to deal with the scale of the standard library, but we got our low-level basics right. Also this work will be used to add support for checking other smart pointers <code>std::shard_ptr</code>, <code>std::weak_ptr</code> as well as <code>std::optionals</code>. Also it can be used to build a checker for use-after-free errors. <h2 id=\"Research\"><a href=\"#Research\" class=\"headerlink\" title=\"Research\"></a>Research</h2><h3 id=\"Smart-Pointer\"><a href=\"#Smart-Pointer\" class=\"headerlink\" title=\"Smart Pointer\"></a>Smart Pointer</h3>A Smart pointer is an abstract data type that simulates a pointer with additional automatic memory management. It manages a dynamically allocated object and ensures the dynamically allocated object is properly cleaned up. Such features are intended to reduce bugs caused by the misuse of pointers while retaining efficiency. Smart pointers typically keep track of the memory they point to, and may also be used to manage other resources, such as network connections and file handles.<h3 id=\"Unique-Pointer\"><a href=\"#Unique-Pointer\" class=\"headerlink\" title=\"Unique Pointer\"></a>Unique Pointer</h3>A <code>unique_ptr</code> is a smart pointer that owns and manages another object through a pointer and disposes that object when the <code>unique_ptr</code> goes out of scope. It should be used to own and manage any dynamically allocated object when its ownership is not shared. A <code>unique_ptr</code> explicitly prevents copying of its contained pointer (as would happen with the normal assignment), but the move assignment and move constructor can be used to transfer ownership of the contained pointer to another <code>unique_ptr</code>.</li>\n</ul>\n<p><strong>Example: 1 Dereferencing default-constructed unique pointer which is null</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">bool</span> flag)</span> </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x; <span class=\"comment\">// note: Default constructed unique pointer is null</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (flag) <span class=\"comment\">// note: Assuming 'flag' is false;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// note: Taking false branch</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> *x;  <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Example: 2 Dereferencing a unique pointer after calling release()</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">42</span>)) ;  <span class=\"comment\">// valid unique pointer;</span></div><div class=\"line\">  x.release(); <span class=\"comment\">// note: smart pointer 'x' become null and the ownership of </span></div><div class=\"line\">               <span class=\"comment\">// the memory is not transferred. And it causes a memory leak </span></div><div class=\"line\">               <span class=\"comment\">// which should be warned.</span></div><div class=\"line\">  <span class=\"keyword\">return</span> *x;   <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null. </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Similar to above cases, other possible cases are dereferencing after calling <code>std::move()</code>, <code>reset()</code> or <code>reset(nullptr)</code>, getting and explicitly deleting inner pointer, or swapping with null pointer using <code>std::swap</code> (<a href=\"/2020/08/31/gsoc-report/#Appendix\">more examples in Appendix</a>). Above all cases will result in a crash.</p>\n<h2 id=\"Design\"><a href=\"#Design\" class=\"headerlink\" title=\"Design\"></a>Design</h2><p>The basic idea of the checker is to keep a record of raw pointers wrapped inside the smart pointers using a map between smart pointer and corresponding inner pointer. Update the map by enumerating all situations when the smart pointer becomes null, as well as the situations when the smart pointer becomes non-null. For example when a smart pointer is default constructed track that smart pointer as it has a null inner pointer. Then check if any of the tracked pointers dereferenced has a null value. To make the bug report more clear attach additional details along the bug path to provide more detailed information on where the smart pointer becomes null.</p>\n<h2 id=\"Alternative-Solution-Considered\"><a href=\"#Alternative-Solution-Considered\" class=\"headerlink\" title=\"Alternative Solution Considered\"></a>Alternative Solution Considered</h2><p>Another possible solution considered was manipulating symbolic values inside the smart pointer. The limitation that we run into here is that our memory model (“RegionStore”) doesn’t currently allow setting a “default” binding to a whole object when it’s a part (say, a field) of a bigger object. This means that we have to understand how the smart pointer works internally (which field corresponds to what) to manipulate its symbolic value, which ties us to a specific implementation of the C++ standard library. This might still work for a unique pointer which probably always has exactly one field, but for shared pointers it is not the case and has multiple fields. So it depends on the different implementations of the C++ standard library. It has been decided to not go with this approach since this approach is challenging and potentially a lot of work compared to the first approach.</p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><h3 id=\"Initial-Smart-Pointer-Modeling-and-Checker\"><a href=\"#Initial-Smart-Pointer-Modeling-and-Checker\" class=\"headerlink\" title=\"Initial Smart Pointer Modeling and Checker\"></a>Initial Smart Pointer Modeling and Checker</h3><p><a href=\"https://reviews.llvm.org/D81315\" target=\"_blank\" rel=\"external\">D81315</a>: Created a basic implementation. </p>\n<ul>\n<li>Made a separate checker class for emitting diagnostics. Used the new checker to use <code>checkPreCall</code> and put bug reporting logic there.</li>\n<li>Kept all smart pointer related modeling logic in <code>SmartPtrModeling</code>. Shared common functionality via a header file shared between the <code>SmartPtrModeling</code> and <code>SmartPtrChecker</code>. </li>\n<li>Made a <code>SmartPtrModeling</code> as a dependency to <code>SmartPtrChecker</code>.</li>\n<li>Introduced a GDM with <code>MemRegion</code> as key and <code>SVal</code> as value to track the smart pointer and corresponding inner pointer.  </li>\n<li>Also added support to model <code>unique_ptr</code> constructor, release and reset methods.</li>\n<li>Used <code>evalCall</code> to handle modeling. As part of this enabled constructor support in <code>evalCall</code> event with <a href=\"https://reviews.llvm.org/D82256\" target=\"_blank\" rel=\"external\">D82256</a>. </li>\n<li>Implemented <code>checkDeadSymbols</code> to clean up the <code>MemRegion</code> of smart pointers from the program state map when they go out of scope. Keeping the data structures in the program state as minimal as possible so that it would not grow to a great size while analyzing real code and eventually slows down the analysis.</li>\n</ul>\n<p>With this patch, the model can emit warnings for cases like use after default constructor, use after release, or use after the reset with a null pointer. Kept the <code>SmartPtrChecker</code> under <em>alpha.cplusplus</em> package and smart pointer modeling have to be enabled by the <code>ModelSmartPtrDereference</code> flag.</p>\n<h3 id=\"checkRegionChanges-for-SmartPtrModeling\"><a href=\"#checkRegionChanges-for-SmartPtrModeling\" class=\"headerlink\" title=\"checkRegionChanges for SmartPtrModeling\"></a>checkRegionChanges for SmartPtrModeling</h3><p><a href=\"https://reviews.llvm.org/D83836\" target=\"_blank\" rel=\"external\">D83836</a>: Implemented <code>checkRegionChanges</code> for <code>SmartPtrModeling</code>. To improve the accuracy, when a smart pointer is passed by a non-const reference into a function, removed the tracked region data. Since it is not sure what happens to the smart pointer inside the function.<br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; P; <span class=\"comment\">// note: Default constructed unique pointer is null</span></div><div class=\"line\">  bar(&amp;P); <span class=\"comment\">// note: Passing by reference</span></div><div class=\"line\">  <span class=\"keyword\">return</span> *P; <span class=\"comment\">// No warnings</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>For example here in the code above, we are passing a default constructed <code>unique_ptr</code> ‘P’ to method <code>bar()</code>. But it is unknown whether the <code>unique_ptr</code> ‘P’ is reset with a valid inner pointer or not inside <code>bar()</code>. To avoid false positives we are not producing any warning on dereference of <code>unique_ptr</code> ‘P’ after <code>bar()</code>.</p>\n<h3 id=\"Modeling-for-unique-ptr-swap-method\"><a href=\"#Modeling-for-unique-ptr-swap-method\" class=\"headerlink\" title=\"Modeling for unique_ptr::swap method\"></a>Modeling for unique_ptr::swap method</h3><p><a href=\"https://reviews.llvm.org/D83877\" target=\"_blank\" rel=\"external\">D83877</a>: Enabled the <code>SmartPtrModeling</code> to handle the swap method for <code>unique_ptr</code>. The <code>swap()</code> method can be used to exchange ownership of inner pointers between the <code>unique_ptrs</code>. So it is possible to make a <code>unique_ptr</code> null by swapping with another null <code>unique_ptr</code>. With this patch warnings are emitted when a <code>unique_ptr</code> is used after swapping with another <code>unique_ptr</code> with null as an inner pointer.</p>\n<h3 id=\"NoteTag-for-better-reporting\"><a href=\"#NoteTag-for-better-reporting\" class=\"headerlink\" title=\"NoteTag for better reporting\"></a>NoteTag for better reporting</h3><p><a href=\"https://reviews.llvm.org/D84600\" target=\"_blank\" rel=\"external\">D84600</a>: With NoteTags added more detailed information on where the smart pointer becomes null in the bug path. Introduced a <code>getNullDereferenceBugType()</code> inter-checker API to check if the bug type is interesting.<br><em>After adding NoteTags:</em><br><img src=\"/2020/08/31/gsoc-report/notetag.png\" alt=\"alt text\" title=\"NoteTags\"></p>\n<h3 id=\"Modeling-for-unque-ptr-get\"><a href=\"#Modeling-for-unque-ptr-get\" class=\"headerlink\" title=\"Modeling for unque_ptr::get()\"></a>Modeling for unque_ptr::get()</h3><p><a href=\"https://reviews.llvm.org/D86029\" target=\"_blank\" rel=\"external\">D86029</a>: Modeled to return tracked inner pointer for the <code>get()</code> method. The <code>get()</code> method is used to access the inner pointer. When the inner pointer is used with conditional branching or other symbol constraining methods we can use the constraints on the inner pointer to find whether the corresponding <code>unique_ptr</code> is null or not. When the inner pointer value for a <code>unique_ptr</code> is available from the tracked map we bind that value to the return value of <code>get()</code> method. Also made changes to create <code>conjureSymbolVal</code> in case of missing inner pointer value for a <code>unique_ptr</code> region we are tracking.<br><em>Example:</em><br><img src=\"/2020/08/31/gsoc-report/get.png\" alt=\"alt text\" title=\"Get\"></p>\n<h3 id=\"Modeling-for-unique-ptr-bool-conversion\"><a href=\"#Modeling-for-unique-ptr-bool-conversion\" class=\"headerlink\" title=\"Modeling for unique_ptr bool conversion\"></a>Modeling for unique_ptr bool conversion</h3><p><a href=\"https://reviews.llvm.org/D86027\" target=\"_blank\" rel=\"external\">D86027</a>: Modeling the case where <code>unique_ptr</code> is explicitly converted to bool. It is a common practice to check if a <code>unique_ptr</code> is null or not before accessing it. If the inner pointer value is already tracked and we know the value, we can figure out the corresponding boolean value. And the analyzer will take the branch based on that. Using <code>SValBuilder::conjureSymbolVal</code> to create a symbol when there is no symbol tracked yet and we constrain on that symbol to split the Exploded Graph with assuming null and non-null value.</p>\n<h3 id=\"Adding-support-for-checkLiveSymbols\"><a href=\"#Adding-support-for-checkLiveSymbols\" class=\"headerlink\" title=\"Adding support for checkLiveSymbols\"></a>Adding support for <code>checkLiveSymbols</code></h3><p><a href=\"https://reviews.llvm.org/D86027\" target=\"_blank\" rel=\"external\">D86027</a>: Implemented <code>checkLiveSymbols</code> to make sure that we are keeping the symbol alive until the corresponding owner <code>unique_ptr</code> is alive to avoid removing the constraints related to that symbol. Also when the <code>unique_ptr</code> goes out of scope, we make sure the symbols are cleaned up.<br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *RP = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">12</span>);</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; P(RP);</div><div class=\"line\">    <span class=\"keyword\">if</span> (P) &#123; <span class=\"comment\">// Takes true branch</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>For example here in the code above, we have to keep the symbol for <code>RP</code> alive since that is tracked as the inner pointer value of <code>unique_ptr</code> P. We have to use the constraints on that symbol to decide whether the branching takes the true or false branch. </p>\n<h3 id=\"Modeling-of-move-assignment-operator-unique-ptr-operator\"><a href=\"#Modeling-of-move-assignment-operator-unique-ptr-operator\" class=\"headerlink\" title=\"Modeling of move assignment operator (unique_ptr::operator=)\"></a>Modeling of move assignment operator (unique_ptr::operator=)</h3><p><a href=\"https://reviews.llvm.org/D86293\" target=\"_blank\" rel=\"external\">D86293</a>: Modeled how the unique_ptr moves the ownership of its managed memory to another <code>unique_ptr</code> via <code>=</code> operator. With the move assignment operator a <code>unique_ptr</code> can be reset with another <code>unique_ptr</code> whereas the assigned <code>unique_ptr</code> will lose its ownership of its inner pointer and become null. Also it is possible to assign <code>nullptr</code> to a <code>unique_ptr</code> and reset it to null. Made changes to update the tracked values of both LHS and RHS side <code>unique_ptr</code> values of the operator.</p>\n<h3 id=\"Modeling-for-unique-ptr-move-constructor\"><a href=\"#Modeling-for-unique-ptr-move-constructor\" class=\"headerlink\" title=\"Modeling for unique_ptr move constructor\"></a>Modeling for unique_ptr move constructor</h3><p><a href=\"https://reviews.llvm.org/D86373\" target=\"_blank\" rel=\"external\">D86373</a>: Similar to the <code>=</code> operator, modeled how the <code>unique_ptr</code> moves the ownership of its managed memory to another via move constructor. Then tracked the moved unique_ptr’s inner pointer value as null.</p>\n<h2 id=\"Evaluation\"><a href=\"#Evaluation\" class=\"headerlink\" title=\"Evaluation\"></a>Evaluation</h2><p>The checker has been evaluated on a number of open-source software projects which use smart pointers extensively(<a href=\"https://github.com/symengine/symengine\" target=\"_blank\" rel=\"external\">symengine</a>, <a href=\"https://github.com/oatpp/oatpp\" target=\"_blank\" rel=\"external\">oatpp</a>, <a href=\"https://github.com/facebook/zstd\" target=\"_blank\" rel=\"external\">zstd</a>, <a href=\"https://github.com/simbody/simbody\" target=\"_blank\" rel=\"external\">simbody</a>, <a href=\"https://github.com/cwida/duckdb\" target=\"_blank\" rel=\"external\">duckdb</a>, <a href=\"https://github.com/an-tao/drogon\" target=\"_blank\" rel=\"external\">drogon</a>, <a href=\"https://github.com/fmtlib/fmt\" target=\"_blank\" rel=\"external\">fmt</a>, <a href=\"https://github.com/google/re2\" target=\"_blank\" rel=\"external\">re2</a>, <a href=\"https://github.com/danmar/cppcheck\" target=\"_blank\" rel=\"external\">cppcheck</a>, <a href=\"https://github.com/facebookresearch/faiss\" target=\"_blank\" rel=\"external\">faiss</a>). Unfortunately(or fortunately) the checker did not produce any warnings which are not false positive. But we found <strong>8</strong> true positive warnings related to smart pointer null dereference in <a href=\"https://github.com/llvm/llvm-project\" target=\"_blank\" rel=\"external\">LLVM</a> project and <strong>5</strong> warnings in the <a href=\"https://webkit.org/\" target=\"_blank\" rel=\"external\">WebKit</a> project.</p>\n<p><em>(Attaching few example warnings)</em><br><strong>Warnings in LLVM</strong><br><em>Warning-1: clang/lib/Analysis/Consumed.cpp</em><br><img src=\"/2020/08/31/gsoc-report/llvm_1.png\" alt=\"alt text\" title=\"LLVM Warning-1\"><br><em>Warning-2: clang/lib/Lex/Preprocessor.cpp</em><br><img src=\"/2020/08/31/gsoc-report/llvm_2.png\" alt=\"alt text\" title=\"LLVM Warning-2\"><br><em>Warning-3: llvm/utils/TableGen/OptParserEmitter.cpp</em><br><img src=\"/2020/08/31/gsoc-report/llvm_3.png\" alt=\"alt text\" title=\"LLVM Warning-3\"><br><strong>Warnings in WebKit</strong><br><em>Warning-1:</em><br><img src=\"/2020/08/31/gsoc-report/wk_1.png\" alt=\"alt text\" title=\"WebKit Warning-1\"><br><em>Warning-2:</em><br><img src=\"/2020/08/31/gsoc-report/wk_2.png\" alt=\"alt text\" title=\"WebKit Warning-2\"><br><em>Warning-3:</em><br><img src=\"/2020/08/31/gsoc-report/wk_3.png\" alt=\"alt text\" title=\"WebKit Warning-3\"><br><em>Warning-4:</em><br><img src=\"/2020/08/31/gsoc-report/wk_4.png\" alt=\"alt text\" title=\"WebKit Warning-4\"></p>\n<h2 id=\"Future-Work\"><a href=\"#Future-Work\" class=\"headerlink\" title=\"Future Work\"></a>Future Work</h2><h3 id=\"Model-remaining-methods-of-unique-ptr\"><a href=\"#Model-remaining-methods-of-unique-ptr\" class=\"headerlink\" title=\"Model remaining methods of unique_ptr\"></a>Model remaining methods of unique_ptr</h3><p>So far we covered the important methods related to <code>unique_ptr</code>, but still there exist few more methods and operators on <code>unique_ptr</code> to cover. Remaining methods are <code>std::make_unique</code>, <code>std::make_unique_for_overwrite</code>, and <code>std::swap</code>. Remaining operators include <code>operator*</code>, <code>operator-&gt;</code>, and all the comparison operators.</p>\n<h3 id=\"Model-other-smart-pointers\"><a href=\"#Model-other-smart-pointers\" class=\"headerlink\" title=\"Model other smart pointers\"></a>Model other smart pointers</h3><p>Extend the modeling for <code>std::shared_ptr</code>, <code>std::weak_ptr</code> and <code>std::optional</code>. Right now <code>SmartPtrModeling</code> only models most of the <code>std::unique_ptr</code>, adding modeling for other smart pointers will make the checker complete.</p>\n<h3 id=\"CallDescriptionMap-support-for-CXX-Constructor-and-Operator\"><a href=\"#CallDescriptionMap-support-for-CXX-Constructor-and-Operator\" class=\"headerlink\" title=\"CallDescriptionMap support for CXX Constructor and Operator\"></a>CallDescriptionMap support for CXX Constructor and Operator</h3><p>To enable the checker by default we have to use <code>CallDescriptionMap</code> for <code>evalCall</code>. Right now we are manually implementing the name matching logic that has been already implemented in <code>CallDescriptionMap</code>. But the support for the <em>Constructor</em> and <em>Operator</em> calls are not supported yet and changes are in review(<a href=\"https://reviews.llvm.org/D81059\" target=\"_blank\" rel=\"external\">D81059</a>, <a href=\"https://reviews.llvm.org/D80503\" target=\"_blank\" rel=\"external\">D80503</a>) by <a href=\"https://reviews.llvm.org/p/Charusso\" target=\"_blank\" rel=\"external\">Charusso</a>.</p>\n<h3 id=\"Enabling-the-checker-by-default\"><a href=\"#Enabling-the-checker-by-default\" class=\"headerlink\" title=\"Enabling the checker by default\"></a>Enabling the checker by default</h3><p>The SmartPtrChecker is under the <em>alpha.cplusplus</em> package and smart pointer modeling has to be enabled by the <code>ModelSmartPtrDereference</code> flag. Enabling the checker by default will benefit codebases that use smart pointers. </p>\n<h3 id=\"Inlined-defensive-checks\"><a href=\"#Inlined-defensive-checks\" class=\"headerlink\" title=\"Inlined defensive checks\"></a>Inlined defensive checks</h3><p>We are using <code>trackExpressionValue()</code> to track how an inner pointer expression for a unique_ptr is getting null in the bug report. The <code>trackExpressionValue()</code> is suppressing some warnings to avoid the false positives with inlined defensive checks.</p>\n<p>For example the code below is a true positive warning.<br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; P)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (P) &#123;&#125; <span class=\"comment\">// Assuming P is null.</span></div><div class=\"line\">  <span class=\"keyword\">return</span> *P; <span class=\"comment\">// warning: null dereference</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>On the other hand, the code below is a false positive warning. We cannot infer <code>unique_ptr</code> Q is null in <code>bar()</code> based on the check <code>if(P)</code> in function call <code>foo()</code>. So the warning should be suppressed.<br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; P)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (P) &#123;&#125; <span class=\"comment\">// Assuming P is null</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bar</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; Q)</span> </span>&#123;</div><div class=\"line\">    foo(Q);</div><div class=\"line\">    <span class=\"keyword\">return</span> *Q; <span class=\"comment\">// warning: null dereference</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Right now we are trusting <code>trackExpressionValue()</code> when it suppresses reports. It may occasionally suppress true positive warnings, but it’s better than having false positives.<br>Below code is an example for a suppressed true positive warning.<br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *<span class=\"title\">return_null</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(return_null());</div><div class=\"line\">  <span class=\"keyword\">return</span> *x; <span class=\"comment\">// no-warning</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We have to investigate more on real world projects and see <code>trackExpressionValue()</code> is sufficient for suppressing all false positive warnings related to inlined defensive checks.</p>\n<h3 id=\"Marking-regions-as-not-interesting\"><a href=\"#Marking-regions-as-not-interesting\" class=\"headerlink\" title=\"Marking regions as not interesting\"></a>Marking regions as not interesting</h3><p>Right now there is no API similar to <code>markInteresting()</code> for marking the region not interesting in a bug report. With this support, our checker can remove less useful and unwanted notes showing in the report. For example, when a <code>unique_ptr</code> is referenced after the <code>release()</code> we don’t have to show a note tag on the <code>unique_ptr</code> constructor unless it is constructed with null.</p>\n<p><em>Before:</em><br><img src=\"/2020/08/31/gsoc-report/ntbefore.png\" alt=\"alt text\" title=\"Before marking not interesting\"><br><em>After: marking P not interesting</em><br><img src=\"/2020/08/31/gsoc-report/ntafter.png\" alt=\"alt text\" title=\"After marking not interesting\"></p>\n<h3 id=\"Communication-with-MallocChecker\"><a href=\"#Communication-with-MallocChecker\" class=\"headerlink\" title=\"Communication with MallocChecker\"></a>Communication with MallocChecker</h3><p>When raw pointers are accessed from <code>unique_ptr</code> via <code>get()</code> or <code>release()</code>, we have to ensure that the raw pointers are tracked via <code>MallocChecker</code>. Also, enable SmartPtrModeling to communicate the deallocation to <code>MallocChecker</code> when we see the destructor call of the <code>unique_ptr</code> and it has a default deleter. Also, communicating with <code>MallocChecker</code> could potentially find double-free errors when the same pointer is passed to multiple unique_ptrs or it is also freed independently of the <code>unique_ptr</code> (<a href=\"/2020/08/31/gsoc-report/#Double-free-error-example\">example</a>).</p>\n<h3 id=\"Add-modeling-for-user-defined-custom-smart-pointers\"><a href=\"#Add-modeling-for-user-defined-custom-smart-pointers\" class=\"headerlink\" title=\"Add modeling for user-defined custom smart pointers\"></a>Add modeling for user-defined custom smart pointers</h3><p>Many C++ projects have their own custom implementations of smart pointers similar to <a href=\"https://www.boost.org/doc/libs/1_61_0/libs/smart_ptr/shared_ptr.htm\" target=\"_blank\" rel=\"external\">boost::shared_ptr</a> or <a href=\"https://llvm.org/doxygen/classllvm_1_1IntrusiveRefCntPtr.html\" target=\"_blank\" rel=\"external\">llvm::IntrusiveRefCntPtr</a>. If the user can specify the custom smart pointers and methods on it, we could reuse the existing <code>SmartPtrModeling</code> for modeling and checking the custom smart pointers.</p>\n<h2 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use\"></a>How to use</h2><p>All the changes are in the master. But the checker and modeling are not enabled by default. Checker is under the <em>alpha.cplusplus</em> package and smart pointer modeling has to be enabled by the <code>ModelSmartPtrDereference</code> flag. </p>\n<p><strong>Checker and modeling can be enabled explicitly:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$scan</span>-build -<span class=\"built_in\">enable</span>-checker alpha.cplusplus.SmartPtr -analyzer-config cplusplus.SmartPtrModeling:ModelSmartPtrDereference=<span class=\"literal\">true</span> clang -c test.cpp</div></pre></td></tr></table></figure></p>\n<p>(Since <code>SmartPtrChecker</code> is depended to <code>SmartPtrModeling</code> we don’t have to explicitly enable <code>SmartPtrModeling</code>)</p>\n<h2 id=\"Acknowledgment\"><a href=\"#Acknowledgment\" class=\"headerlink\" title=\"Acknowledgment\"></a>Acknowledgment</h2><p>I want to express my gratitude towards everyone that helped me with this project, but especially to 3 individuals: My mentors, <a href=\"https://github.com/haoNoQ\" target=\"_blank\" rel=\"external\">Artem Dergachev</a>, <a href=\"https://github.com/Xazax-hun\" target=\"_blank\" rel=\"external\">Gábor Horváth</a>, and <a href=\"https://github.com/SavchenkoValeriy\" target=\"_blank\" rel=\"external\">Valeriy Savchenko</a>. With their guidance, I’ve learned a lot about how Clang Static Analyzer works during the summer. I got to skype with them every Monday and received all the help and suggestions. When I got stuck with issues I got immediate help even on the weekends. Also, I received very fast feedback for my review requests. I am also thankful to <a href=\"https://reviews.llvm.org/p/Szelethus/\" target=\"_blank\" rel=\"external\">Kristóf Umann</a> for tips and comments on the reviews.</p>\n<p>Thank you very much for the support and mentoring.</p>\n<h2 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h2><h3 id=\"Potential-bugs-with-unique-ptr\"><a href=\"#Potential-bugs-with-unique-ptr\" class=\"headerlink\" title=\"Potential bugs with unique_ptr\"></a>Potential bugs with unique_ptr</h3><p><strong>A default constructed unique pointer has null value</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x; <span class=\"comment\">// note: Default constructor produces a null unique pointer</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *x; <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Unique pointer constructed with null value</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"literal\">nullptr</span>);  <span class=\"comment\">// note: Default constructor produces a null unique pointer</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *x;  <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Unique pointer constructed with move constructor</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; y(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">13</span>));  </div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"built_in\">std</span>::move(y)); <span class=\"comment\">// note: unique_ptr y is moved to x</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *y; <span class=\"comment\">// warning: Dereferenced smart pointer 'y' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>release</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">13</span>));  </div><div class=\"line\">    x.release(); <span class=\"comment\">// note: unique_ptr x is null after release</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *x; <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>reset</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">13</span>));  </div><div class=\"line\">    x.reset(<span class=\"literal\">nullptr</span>); <span class=\"comment\">// note: unique_ptr x is null after reset to null</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *x;  <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>swap</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">13</span>));</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; y; </div><div class=\"line\">    x.swap(y); <span class=\"comment\">// note: x is null after swapping with null y</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *x; <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>get</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!x.get())</div><div class=\"line\">        <span class=\"keyword\">return</span> *x; <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>operator bool</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!x)</div><div class=\"line\">        <span class=\"keyword\">return</span> *x; <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Double-free-error-example\"><a href=\"#Double-free-error-example\" class=\"headerlink\" title=\"Double-free error example\"></a>Double-free error example</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> *i = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">42</span>);</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p1(i);</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p2(i); <span class=\"comment\">// When p2 goes out of scope it will try </span></div><div class=\"line\">                              <span class=\"comment\">// to delete the inner pointer which is already deleted by p1.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>My GSoC work on GitHub: <a href=\"https://github.com/llvm/llvm-project/search?q=author%3Avrnithinkumar+author-date%3A2020-06-01..2020-08-31&amp;unscoped_q=author%3Avrnithinkumar+author-date%3A2020-06-01..2020-08-31&amp;type=Commits\" target=\"_blank\" rel=\"external\">Commits</a><br>(Maybe the link changes, if that is the case please search for: “[author:vrnithinkumar author-date:2020-06-01..2020-08-31]” in the repository of the LLVM project)</li>\n<li>My GSoC work on Phabricator: <a href=\"https://reviews.llvm.org/differential/query/UwCbJYKaRcDb/\" target=\"_blank\" rel=\"external\">Reviews</a></li>\n<li><a href=\"https://summerofcode.withgoogle.com/projects/#5376312975294464\" target=\"_blank\" rel=\"external\">GSoC Project Page Link</a></li>\n<li><a href=\"https://docs.google.com/document/d/1WZSt45kZUhg0UbOv0HXBhyEYaHrb-G-TpEhj_nU041Q/edit?usp=sharing\" target=\"_blank\" rel=\"external\">Original report link</a><h2 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h2>The <a href=\"https://clang-analyzer.llvm.org/\" target=\"_blank\" rel=\"external\">Clang Static Analyzer</a> is used to find bugs in the program by analyzing source code without compiling and executing. It uses symbolic computations to find the defects. Analyzer covers a variety of checks targeted at finding security and API usage bugs, dead code, null dereference, division by zero, and other logic errors. The Clang Static Analyzer already has a checker to find the null pointer dereference in code, however it is not sufficient for higher abstractions such as C++ smart pointers or optionals. By explicitly teaching the C++ standard class behaviors we can make the Analyzer to find more bugs related to modern C++ code.<h2 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h2>Enable Clang Static Analyzer to find the occurrences of null smart pointer dereferences by teaching the observed behaviors of C++ smart pointer classes. Improve the analyzer’s ability to realize the values of the standard smart pointers without having to dig deep into the complex implementation details. We should be able to find more null dereference bugs related to the smart pointers while reducing the number of false positives. Should be able to cover at least one class fully eg. <code>std::unique_ptr</code>, and then extend it to <code>std::shared_ptr</code> or the <code>std::optional</code> if time permits. <h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2>Within the GSoC time period, we could not implement the modeling for all smart pointer methods and operators as we planned. Since the problem was more complicated than what we all anticipated. So far the majority of the modeling for std::unique_ptr is  implemented and committed. We were able to find some promising results with that. We found <strong>8</strong> true positive warnings related to smart pointer null dereference in <a href=\"https://github.com/llvm/llvm-project\" target=\"_blank\" rel=\"external\">LLVM</a> project and <strong>5</strong> warnings in the <a href=\"https://webkit.org/\" target=\"_blank\" rel=\"external\">WebKit</a> project. Even though we were only able to support <code>std::unique_ptr</code> so far, we accomplished to build a base modeling for the smart pointer checkers. And this will act as a consolidated foundation for developing checkers for any C++ objects that are passed by value. That is one of the first conscious attempts to do so and we’ve gained a lot of experience and managed to maintain our integrity - in the sense that the code ended up mostly free of hacks. It could most likely be generalized to modeling the entire C++ standard library. This does not give us the high-level architecture that’ll be needed to deal with the scale of the standard library, but we got our low-level basics right. Also this work will be used to add support for checking other smart pointers <code>std::shard_ptr</code>, <code>std::weak_ptr</code> as well as <code>std::optionals</code>. Also it can be used to build a checker for use-after-free errors. <h2 id=\"Research\"><a href=\"#Research\" class=\"headerlink\" title=\"Research\"></a>Research</h2><h3 id=\"Smart-Pointer\"><a href=\"#Smart-Pointer\" class=\"headerlink\" title=\"Smart Pointer\"></a>Smart Pointer</h3>A Smart pointer is an abstract data type that simulates a pointer with additional automatic memory management. It manages a dynamically allocated object and ensures the dynamically allocated object is properly cleaned up. Such features are intended to reduce bugs caused by the misuse of pointers while retaining efficiency. Smart pointers typically keep track of the memory they point to, and may also be used to manage other resources, such as network connections and file handles.<h3 id=\"Unique-Pointer\"><a href=\"#Unique-Pointer\" class=\"headerlink\" title=\"Unique Pointer\"></a>Unique Pointer</h3>A <code>unique_ptr</code> is a smart pointer that owns and manages another object through a pointer and disposes that object when the <code>unique_ptr</code> goes out of scope. It should be used to own and manage any dynamically allocated object when its ownership is not shared. A <code>unique_ptr</code> explicitly prevents copying of its contained pointer (as would happen with the normal assignment), but the move assignment and move constructor can be used to transfer ownership of the contained pointer to another <code>unique_ptr</code>.</li>\n</ul>\n<p><strong>Example: 1 Dereferencing default-constructed unique pointer which is null</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">bool</span> flag)</span> </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x; <span class=\"comment\">// note: Default constructed unique pointer is null</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (flag) <span class=\"comment\">// note: Assuming 'flag' is false;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// note: Taking false branch</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> *x;  <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Example: 2 Dereferencing a unique pointer after calling release()</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">42</span>)) ;  <span class=\"comment\">// valid unique pointer;</span></div><div class=\"line\">  x.release(); <span class=\"comment\">// note: smart pointer 'x' become null and the ownership of </span></div><div class=\"line\">               <span class=\"comment\">// the memory is not transferred. And it causes a memory leak </span></div><div class=\"line\">               <span class=\"comment\">// which should be warned.</span></div><div class=\"line\">  <span class=\"keyword\">return</span> *x;   <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null. </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Similar to above cases, other possible cases are dereferencing after calling <code>std::move()</code>, <code>reset()</code> or <code>reset(nullptr)</code>, getting and explicitly deleting inner pointer, or swapping with null pointer using <code>std::swap</code> (<a href=\"/2020/08/31/gsoc-report/#Appendix\">more examples in Appendix</a>). Above all cases will result in a crash.</p>\n<h2 id=\"Design\"><a href=\"#Design\" class=\"headerlink\" title=\"Design\"></a>Design</h2><p>The basic idea of the checker is to keep a record of raw pointers wrapped inside the smart pointers using a map between smart pointer and corresponding inner pointer. Update the map by enumerating all situations when the smart pointer becomes null, as well as the situations when the smart pointer becomes non-null. For example when a smart pointer is default constructed track that smart pointer as it has a null inner pointer. Then check if any of the tracked pointers dereferenced has a null value. To make the bug report more clear attach additional details along the bug path to provide more detailed information on where the smart pointer becomes null.</p>\n<h2 id=\"Alternative-Solution-Considered\"><a href=\"#Alternative-Solution-Considered\" class=\"headerlink\" title=\"Alternative Solution Considered\"></a>Alternative Solution Considered</h2><p>Another possible solution considered was manipulating symbolic values inside the smart pointer. The limitation that we run into here is that our memory model (“RegionStore”) doesn’t currently allow setting a “default” binding to a whole object when it’s a part (say, a field) of a bigger object. This means that we have to understand how the smart pointer works internally (which field corresponds to what) to manipulate its symbolic value, which ties us to a specific implementation of the C++ standard library. This might still work for a unique pointer which probably always has exactly one field, but for shared pointers it is not the case and has multiple fields. So it depends on the different implementations of the C++ standard library. It has been decided to not go with this approach since this approach is challenging and potentially a lot of work compared to the first approach.</p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><h3 id=\"Initial-Smart-Pointer-Modeling-and-Checker\"><a href=\"#Initial-Smart-Pointer-Modeling-and-Checker\" class=\"headerlink\" title=\"Initial Smart Pointer Modeling and Checker\"></a>Initial Smart Pointer Modeling and Checker</h3><p><a href=\"https://reviews.llvm.org/D81315\" target=\"_blank\" rel=\"external\">D81315</a>: Created a basic implementation. </p>\n<ul>\n<li>Made a separate checker class for emitting diagnostics. Used the new checker to use <code>checkPreCall</code> and put bug reporting logic there.</li>\n<li>Kept all smart pointer related modeling logic in <code>SmartPtrModeling</code>. Shared common functionality via a header file shared between the <code>SmartPtrModeling</code> and <code>SmartPtrChecker</code>. </li>\n<li>Made a <code>SmartPtrModeling</code> as a dependency to <code>SmartPtrChecker</code>.</li>\n<li>Introduced a GDM with <code>MemRegion</code> as key and <code>SVal</code> as value to track the smart pointer and corresponding inner pointer.  </li>\n<li>Also added support to model <code>unique_ptr</code> constructor, release and reset methods.</li>\n<li>Used <code>evalCall</code> to handle modeling. As part of this enabled constructor support in <code>evalCall</code> event with <a href=\"https://reviews.llvm.org/D82256\" target=\"_blank\" rel=\"external\">D82256</a>. </li>\n<li>Implemented <code>checkDeadSymbols</code> to clean up the <code>MemRegion</code> of smart pointers from the program state map when they go out of scope. Keeping the data structures in the program state as minimal as possible so that it would not grow to a great size while analyzing real code and eventually slows down the analysis.</li>\n</ul>\n<p>With this patch, the model can emit warnings for cases like use after default constructor, use after release, or use after the reset with a null pointer. Kept the <code>SmartPtrChecker</code> under <em>alpha.cplusplus</em> package and smart pointer modeling have to be enabled by the <code>ModelSmartPtrDereference</code> flag.</p>\n<h3 id=\"checkRegionChanges-for-SmartPtrModeling\"><a href=\"#checkRegionChanges-for-SmartPtrModeling\" class=\"headerlink\" title=\"checkRegionChanges for SmartPtrModeling\"></a>checkRegionChanges for SmartPtrModeling</h3><p><a href=\"https://reviews.llvm.org/D83836\" target=\"_blank\" rel=\"external\">D83836</a>: Implemented <code>checkRegionChanges</code> for <code>SmartPtrModeling</code>. To improve the accuracy, when a smart pointer is passed by a non-const reference into a function, removed the tracked region data. Since it is not sure what happens to the smart pointer inside the function.<br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; P; <span class=\"comment\">// note: Default constructed unique pointer is null</span></div><div class=\"line\">  bar(&amp;P); <span class=\"comment\">// note: Passing by reference</span></div><div class=\"line\">  <span class=\"keyword\">return</span> *P; <span class=\"comment\">// No warnings</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>For example here in the code above, we are passing a default constructed <code>unique_ptr</code> ‘P’ to method <code>bar()</code>. But it is unknown whether the <code>unique_ptr</code> ‘P’ is reset with a valid inner pointer or not inside <code>bar()</code>. To avoid false positives we are not producing any warning on dereference of <code>unique_ptr</code> ‘P’ after <code>bar()</code>.</p>\n<h3 id=\"Modeling-for-unique-ptr-swap-method\"><a href=\"#Modeling-for-unique-ptr-swap-method\" class=\"headerlink\" title=\"Modeling for unique_ptr::swap method\"></a>Modeling for unique_ptr::swap method</h3><p><a href=\"https://reviews.llvm.org/D83877\" target=\"_blank\" rel=\"external\">D83877</a>: Enabled the <code>SmartPtrModeling</code> to handle the swap method for <code>unique_ptr</code>. The <code>swap()</code> method can be used to exchange ownership of inner pointers between the <code>unique_ptrs</code>. So it is possible to make a <code>unique_ptr</code> null by swapping with another null <code>unique_ptr</code>. With this patch warnings are emitted when a <code>unique_ptr</code> is used after swapping with another <code>unique_ptr</code> with null as an inner pointer.</p>\n<h3 id=\"NoteTag-for-better-reporting\"><a href=\"#NoteTag-for-better-reporting\" class=\"headerlink\" title=\"NoteTag for better reporting\"></a>NoteTag for better reporting</h3><p><a href=\"https://reviews.llvm.org/D84600\" target=\"_blank\" rel=\"external\">D84600</a>: With NoteTags added more detailed information on where the smart pointer becomes null in the bug path. Introduced a <code>getNullDereferenceBugType()</code> inter-checker API to check if the bug type is interesting.<br><em>After adding NoteTags:</em><br><img src=\"/2020/08/31/gsoc-report/notetag.png\" alt=\"alt text\" title=\"NoteTags\"></p>\n<h3 id=\"Modeling-for-unque-ptr-get\"><a href=\"#Modeling-for-unque-ptr-get\" class=\"headerlink\" title=\"Modeling for unque_ptr::get()\"></a>Modeling for unque_ptr::get()</h3><p><a href=\"https://reviews.llvm.org/D86029\" target=\"_blank\" rel=\"external\">D86029</a>: Modeled to return tracked inner pointer for the <code>get()</code> method. The <code>get()</code> method is used to access the inner pointer. When the inner pointer is used with conditional branching or other symbol constraining methods we can use the constraints on the inner pointer to find whether the corresponding <code>unique_ptr</code> is null or not. When the inner pointer value for a <code>unique_ptr</code> is available from the tracked map we bind that value to the return value of <code>get()</code> method. Also made changes to create <code>conjureSymbolVal</code> in case of missing inner pointer value for a <code>unique_ptr</code> region we are tracking.<br><em>Example:</em><br><img src=\"/2020/08/31/gsoc-report/get.png\" alt=\"alt text\" title=\"Get\"></p>\n<h3 id=\"Modeling-for-unique-ptr-bool-conversion\"><a href=\"#Modeling-for-unique-ptr-bool-conversion\" class=\"headerlink\" title=\"Modeling for unique_ptr bool conversion\"></a>Modeling for unique_ptr bool conversion</h3><p><a href=\"https://reviews.llvm.org/D86027\" target=\"_blank\" rel=\"external\">D86027</a>: Modeling the case where <code>unique_ptr</code> is explicitly converted to bool. It is a common practice to check if a <code>unique_ptr</code> is null or not before accessing it. If the inner pointer value is already tracked and we know the value, we can figure out the corresponding boolean value. And the analyzer will take the branch based on that. Using <code>SValBuilder::conjureSymbolVal</code> to create a symbol when there is no symbol tracked yet and we constrain on that symbol to split the Exploded Graph with assuming null and non-null value.</p>\n<h3 id=\"Adding-support-for-checkLiveSymbols\"><a href=\"#Adding-support-for-checkLiveSymbols\" class=\"headerlink\" title=\"Adding support for checkLiveSymbols\"></a>Adding support for <code>checkLiveSymbols</code></h3><p><a href=\"https://reviews.llvm.org/D86027\" target=\"_blank\" rel=\"external\">D86027</a>: Implemented <code>checkLiveSymbols</code> to make sure that we are keeping the symbol alive until the corresponding owner <code>unique_ptr</code> is alive to avoid removing the constraints related to that symbol. Also when the <code>unique_ptr</code> goes out of scope, we make sure the symbols are cleaned up.<br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *RP = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">12</span>);</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; P(RP);</div><div class=\"line\">    <span class=\"keyword\">if</span> (P) &#123; <span class=\"comment\">// Takes true branch</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>For example here in the code above, we have to keep the symbol for <code>RP</code> alive since that is tracked as the inner pointer value of <code>unique_ptr</code> P. We have to use the constraints on that symbol to decide whether the branching takes the true or false branch. </p>\n<h3 id=\"Modeling-of-move-assignment-operator-unique-ptr-operator\"><a href=\"#Modeling-of-move-assignment-operator-unique-ptr-operator\" class=\"headerlink\" title=\"Modeling of move assignment operator (unique_ptr::operator=)\"></a>Modeling of move assignment operator (unique_ptr::operator=)</h3><p><a href=\"https://reviews.llvm.org/D86293\" target=\"_blank\" rel=\"external\">D86293</a>: Modeled how the unique_ptr moves the ownership of its managed memory to another <code>unique_ptr</code> via <code>=</code> operator. With the move assignment operator a <code>unique_ptr</code> can be reset with another <code>unique_ptr</code> whereas the assigned <code>unique_ptr</code> will lose its ownership of its inner pointer and become null. Also it is possible to assign <code>nullptr</code> to a <code>unique_ptr</code> and reset it to null. Made changes to update the tracked values of both LHS and RHS side <code>unique_ptr</code> values of the operator.</p>\n<h3 id=\"Modeling-for-unique-ptr-move-constructor\"><a href=\"#Modeling-for-unique-ptr-move-constructor\" class=\"headerlink\" title=\"Modeling for unique_ptr move constructor\"></a>Modeling for unique_ptr move constructor</h3><p><a href=\"https://reviews.llvm.org/D86373\" target=\"_blank\" rel=\"external\">D86373</a>: Similar to the <code>=</code> operator, modeled how the <code>unique_ptr</code> moves the ownership of its managed memory to another via move constructor. Then tracked the moved unique_ptr’s inner pointer value as null.</p>\n<h2 id=\"Evaluation\"><a href=\"#Evaluation\" class=\"headerlink\" title=\"Evaluation\"></a>Evaluation</h2><p>The checker has been evaluated on a number of open-source software projects which use smart pointers extensively(<a href=\"https://github.com/symengine/symengine\" target=\"_blank\" rel=\"external\">symengine</a>, <a href=\"https://github.com/oatpp/oatpp\" target=\"_blank\" rel=\"external\">oatpp</a>, <a href=\"https://github.com/facebook/zstd\" target=\"_blank\" rel=\"external\">zstd</a>, <a href=\"https://github.com/simbody/simbody\" target=\"_blank\" rel=\"external\">simbody</a>, <a href=\"https://github.com/cwida/duckdb\" target=\"_blank\" rel=\"external\">duckdb</a>, <a href=\"https://github.com/an-tao/drogon\" target=\"_blank\" rel=\"external\">drogon</a>, <a href=\"https://github.com/fmtlib/fmt\" target=\"_blank\" rel=\"external\">fmt</a>, <a href=\"https://github.com/google/re2\" target=\"_blank\" rel=\"external\">re2</a>, <a href=\"https://github.com/danmar/cppcheck\" target=\"_blank\" rel=\"external\">cppcheck</a>, <a href=\"https://github.com/facebookresearch/faiss\" target=\"_blank\" rel=\"external\">faiss</a>). Unfortunately(or fortunately) the checker did not produce any warnings which are not false positive. But we found <strong>8</strong> true positive warnings related to smart pointer null dereference in <a href=\"https://github.com/llvm/llvm-project\" target=\"_blank\" rel=\"external\">LLVM</a> project and <strong>5</strong> warnings in the <a href=\"https://webkit.org/\" target=\"_blank\" rel=\"external\">WebKit</a> project.</p>\n<p><em>(Attaching few example warnings)</em><br><strong>Warnings in LLVM</strong><br><em>Warning-1: clang/lib/Analysis/Consumed.cpp</em><br><img src=\"/2020/08/31/gsoc-report/llvm_1.png\" alt=\"alt text\" title=\"LLVM Warning-1\"><br><em>Warning-2: clang/lib/Lex/Preprocessor.cpp</em><br><img src=\"/2020/08/31/gsoc-report/llvm_2.png\" alt=\"alt text\" title=\"LLVM Warning-2\"><br><em>Warning-3: llvm/utils/TableGen/OptParserEmitter.cpp</em><br><img src=\"/2020/08/31/gsoc-report/llvm_3.png\" alt=\"alt text\" title=\"LLVM Warning-3\"><br><strong>Warnings in WebKit</strong><br><em>Warning-1:</em><br><img src=\"/2020/08/31/gsoc-report/wk_1.png\" alt=\"alt text\" title=\"WebKit Warning-1\"><br><em>Warning-2:</em><br><img src=\"/2020/08/31/gsoc-report/wk_2.png\" alt=\"alt text\" title=\"WebKit Warning-2\"><br><em>Warning-3:</em><br><img src=\"/2020/08/31/gsoc-report/wk_3.png\" alt=\"alt text\" title=\"WebKit Warning-3\"><br><em>Warning-4:</em><br><img src=\"/2020/08/31/gsoc-report/wk_4.png\" alt=\"alt text\" title=\"WebKit Warning-4\"></p>\n<h2 id=\"Future-Work\"><a href=\"#Future-Work\" class=\"headerlink\" title=\"Future Work\"></a>Future Work</h2><h3 id=\"Model-remaining-methods-of-unique-ptr\"><a href=\"#Model-remaining-methods-of-unique-ptr\" class=\"headerlink\" title=\"Model remaining methods of unique_ptr\"></a>Model remaining methods of unique_ptr</h3><p>So far we covered the important methods related to <code>unique_ptr</code>, but still there exist few more methods and operators on <code>unique_ptr</code> to cover. Remaining methods are <code>std::make_unique</code>, <code>std::make_unique_for_overwrite</code>, and <code>std::swap</code>. Remaining operators include <code>operator*</code>, <code>operator-&gt;</code>, and all the comparison operators.</p>\n<h3 id=\"Model-other-smart-pointers\"><a href=\"#Model-other-smart-pointers\" class=\"headerlink\" title=\"Model other smart pointers\"></a>Model other smart pointers</h3><p>Extend the modeling for <code>std::shared_ptr</code>, <code>std::weak_ptr</code> and <code>std::optional</code>. Right now <code>SmartPtrModeling</code> only models most of the <code>std::unique_ptr</code>, adding modeling for other smart pointers will make the checker complete.</p>\n<h3 id=\"CallDescriptionMap-support-for-CXX-Constructor-and-Operator\"><a href=\"#CallDescriptionMap-support-for-CXX-Constructor-and-Operator\" class=\"headerlink\" title=\"CallDescriptionMap support for CXX Constructor and Operator\"></a>CallDescriptionMap support for CXX Constructor and Operator</h3><p>To enable the checker by default we have to use <code>CallDescriptionMap</code> for <code>evalCall</code>. Right now we are manually implementing the name matching logic that has been already implemented in <code>CallDescriptionMap</code>. But the support for the <em>Constructor</em> and <em>Operator</em> calls are not supported yet and changes are in review(<a href=\"https://reviews.llvm.org/D81059\" target=\"_blank\" rel=\"external\">D81059</a>, <a href=\"https://reviews.llvm.org/D80503\" target=\"_blank\" rel=\"external\">D80503</a>) by <a href=\"https://reviews.llvm.org/p/Charusso\" target=\"_blank\" rel=\"external\">Charusso</a>.</p>\n<h3 id=\"Enabling-the-checker-by-default\"><a href=\"#Enabling-the-checker-by-default\" class=\"headerlink\" title=\"Enabling the checker by default\"></a>Enabling the checker by default</h3><p>The SmartPtrChecker is under the <em>alpha.cplusplus</em> package and smart pointer modeling has to be enabled by the <code>ModelSmartPtrDereference</code> flag. Enabling the checker by default will benefit codebases that use smart pointers. </p>\n<h3 id=\"Inlined-defensive-checks\"><a href=\"#Inlined-defensive-checks\" class=\"headerlink\" title=\"Inlined defensive checks\"></a>Inlined defensive checks</h3><p>We are using <code>trackExpressionValue()</code> to track how an inner pointer expression for a unique_ptr is getting null in the bug report. The <code>trackExpressionValue()</code> is suppressing some warnings to avoid the false positives with inlined defensive checks.</p>\n<p>For example the code below is a true positive warning.<br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; P)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (P) &#123;&#125; <span class=\"comment\">// Assuming P is null.</span></div><div class=\"line\">  <span class=\"keyword\">return</span> *P; <span class=\"comment\">// warning: null dereference</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>On the other hand, the code below is a false positive warning. We cannot infer <code>unique_ptr</code> Q is null in <code>bar()</code> based on the check <code>if(P)</code> in function call <code>foo()</code>. So the warning should be suppressed.<br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; P)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (P) &#123;&#125; <span class=\"comment\">// Assuming P is null</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bar</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; Q)</span> </span>&#123;</div><div class=\"line\">    foo(Q);</div><div class=\"line\">    <span class=\"keyword\">return</span> *Q; <span class=\"comment\">// warning: null dereference</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Right now we are trusting <code>trackExpressionValue()</code> when it suppresses reports. It may occasionally suppress true positive warnings, but it’s better than having false positives.<br>Below code is an example for a suppressed true positive warning.<br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *<span class=\"title\">return_null</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(return_null());</div><div class=\"line\">  <span class=\"keyword\">return</span> *x; <span class=\"comment\">// no-warning</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We have to investigate more on real world projects and see <code>trackExpressionValue()</code> is sufficient for suppressing all false positive warnings related to inlined defensive checks.</p>\n<h3 id=\"Marking-regions-as-not-interesting\"><a href=\"#Marking-regions-as-not-interesting\" class=\"headerlink\" title=\"Marking regions as not interesting\"></a>Marking regions as not interesting</h3><p>Right now there is no API similar to <code>markInteresting()</code> for marking the region not interesting in a bug report. With this support, our checker can remove less useful and unwanted notes showing in the report. For example, when a <code>unique_ptr</code> is referenced after the <code>release()</code> we don’t have to show a note tag on the <code>unique_ptr</code> constructor unless it is constructed with null.</p>\n<p><em>Before:</em><br><img src=\"/2020/08/31/gsoc-report/ntbefore.png\" alt=\"alt text\" title=\"Before marking not interesting\"><br><em>After: marking P not interesting</em><br><img src=\"/2020/08/31/gsoc-report/ntafter.png\" alt=\"alt text\" title=\"After marking not interesting\"></p>\n<h3 id=\"Communication-with-MallocChecker\"><a href=\"#Communication-with-MallocChecker\" class=\"headerlink\" title=\"Communication with MallocChecker\"></a>Communication with MallocChecker</h3><p>When raw pointers are accessed from <code>unique_ptr</code> via <code>get()</code> or <code>release()</code>, we have to ensure that the raw pointers are tracked via <code>MallocChecker</code>. Also, enable SmartPtrModeling to communicate the deallocation to <code>MallocChecker</code> when we see the destructor call of the <code>unique_ptr</code> and it has a default deleter. Also, communicating with <code>MallocChecker</code> could potentially find double-free errors when the same pointer is passed to multiple unique_ptrs or it is also freed independently of the <code>unique_ptr</code> (<a href=\"/2020/08/31/gsoc-report/#Double-free-error-example\">example</a>).</p>\n<h3 id=\"Add-modeling-for-user-defined-custom-smart-pointers\"><a href=\"#Add-modeling-for-user-defined-custom-smart-pointers\" class=\"headerlink\" title=\"Add modeling for user-defined custom smart pointers\"></a>Add modeling for user-defined custom smart pointers</h3><p>Many C++ projects have their own custom implementations of smart pointers similar to <a href=\"https://www.boost.org/doc/libs/1_61_0/libs/smart_ptr/shared_ptr.htm\" target=\"_blank\" rel=\"external\">boost::shared_ptr</a> or <a href=\"https://llvm.org/doxygen/classllvm_1_1IntrusiveRefCntPtr.html\" target=\"_blank\" rel=\"external\">llvm::IntrusiveRefCntPtr</a>. If the user can specify the custom smart pointers and methods on it, we could reuse the existing <code>SmartPtrModeling</code> for modeling and checking the custom smart pointers.</p>\n<h2 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use\"></a>How to use</h2><p>All the changes are in the master. But the checker and modeling are not enabled by default. Checker is under the <em>alpha.cplusplus</em> package and smart pointer modeling has to be enabled by the <code>ModelSmartPtrDereference</code> flag. </p>\n<p><strong>Checker and modeling can be enabled explicitly:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$scan</span>-build -<span class=\"built_in\">enable</span>-checker alpha.cplusplus.SmartPtr -analyzer-config cplusplus.SmartPtrModeling:ModelSmartPtrDereference=<span class=\"literal\">true</span> clang -c test.cpp</div></pre></td></tr></table></figure></p>\n<p>(Since <code>SmartPtrChecker</code> is depended to <code>SmartPtrModeling</code> we don’t have to explicitly enable <code>SmartPtrModeling</code>)</p>\n<h2 id=\"Acknowledgment\"><a href=\"#Acknowledgment\" class=\"headerlink\" title=\"Acknowledgment\"></a>Acknowledgment</h2><p>I want to express my gratitude towards everyone that helped me with this project, but especially to 3 individuals: My mentors, <a href=\"https://github.com/haoNoQ\" target=\"_blank\" rel=\"external\">Artem Dergachev</a>, <a href=\"https://github.com/Xazax-hun\" target=\"_blank\" rel=\"external\">Gábor Horváth</a>, and <a href=\"https://github.com/SavchenkoValeriy\" target=\"_blank\" rel=\"external\">Valeriy Savchenko</a>. With their guidance, I’ve learned a lot about how Clang Static Analyzer works during the summer. I got to skype with them every Monday and received all the help and suggestions. When I got stuck with issues I got immediate help even on the weekends. Also, I received very fast feedback for my review requests. I am also thankful to <a href=\"https://reviews.llvm.org/p/Szelethus/\" target=\"_blank\" rel=\"external\">Kristóf Umann</a> for tips and comments on the reviews.</p>\n<p>Thank you very much for the support and mentoring.</p>\n<h2 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h2><h3 id=\"Potential-bugs-with-unique-ptr\"><a href=\"#Potential-bugs-with-unique-ptr\" class=\"headerlink\" title=\"Potential bugs with unique_ptr\"></a>Potential bugs with unique_ptr</h3><p><strong>A default constructed unique pointer has null value</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x; <span class=\"comment\">// note: Default constructor produces a null unique pointer</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *x; <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Unique pointer constructed with null value</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"literal\">nullptr</span>);  <span class=\"comment\">// note: Default constructor produces a null unique pointer</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *x;  <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Unique pointer constructed with move constructor</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; y(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">13</span>));  </div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"built_in\">std</span>::move(y)); <span class=\"comment\">// note: unique_ptr y is moved to x</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *y; <span class=\"comment\">// warning: Dereferenced smart pointer 'y' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>release</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">13</span>));  </div><div class=\"line\">    x.release(); <span class=\"comment\">// note: unique_ptr x is null after release</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *x; <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>reset</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">13</span>));  </div><div class=\"line\">    x.reset(<span class=\"literal\">nullptr</span>); <span class=\"comment\">// note: unique_ptr x is null after reset to null</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *x;  <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>swap</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">13</span>));</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; y; </div><div class=\"line\">    x.swap(y); <span class=\"comment\">// note: x is null after swapping with null y</span></div><div class=\"line\">    <span class=\"keyword\">return</span> *x; <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>get</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!x.get())</div><div class=\"line\">        <span class=\"keyword\">return</span> *x; <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>operator bool</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; x;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!x)</div><div class=\"line\">        <span class=\"keyword\">return</span> *x; <span class=\"comment\">// warning: Dereferenced smart pointer 'x' is null.</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Double-free-error-example\"><a href=\"#Double-free-error-example\" class=\"headerlink\" title=\"Double-free error example\"></a>Double-free error example</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> *i = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">42</span>);</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p1(i);</div><div class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p2(i); <span class=\"comment\">// When p2 goes out of scope it will try </span></div><div class=\"line\">                              <span class=\"comment\">// to delete the inner pointer which is already deleted by p1.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Welcome to My Blog","subtitle":" \"Hello World, Hello Blog\"","date":"2016-05-29T10:00:00.000Z","author":"Nithin VR","header-img":"post-bg-2015.jpg","_content":"\n> “Yeah It's on. ”\n\n\nHello World..\nWelcome to My Blog\n","source":"_posts/hello-2015.markdown","raw":"---\nlayout:     post\ntitle:      \"Welcome to My Blog\"\nsubtitle:   \" \\\"Hello World, Hello Blog\\\"\"\ndate:       2016-05-29 12:00:00\nauthor:     \"Nithin VR\"\nheader-img: \"post-bg-2015.jpg\"\ntags:\n    - random\n---\n\n> “Yeah It's on. ”\n\n\nHello World..\nWelcome to My Blog\n","slug":"hello-2015","published":1,"updated":"2018-05-06T16:45:54.869Z","comments":1,"photos":[],"link":"","_id":"ckeicsck4000tnncvt21ntk0e","content":"<blockquote>\n<p>“Yeah It’s on. ”</p>\n</blockquote>\n<p>Hello World..<br>Welcome to My Blog</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>“Yeah It’s on. ”</p>\n</blockquote>\n<p>Hello World..<br>Welcome to My Blog</p>\n"},{"layout":"post","title":"VIM Notes","date":"2018-05-06T20:55:04.000Z","subtitle":"\" All my VIM related notes\"","author":"Nithin VR","header-img":"dotnet.jpg","catalog":true,"_content":"# VIM Notes\nWriting down about all my vim tips here. **It will be updated regularly**\n## Modes\nVim has different modes to manipulate the text. Normal Insert and Visual are the main modes.\n\n### Normal Mode\nDefault or natural resting state. All the commands are running there to manipulate the text.\n\n### Insert Mode\nMode to edit add and correct text. Where you can type.\n- `Ctrl + h` Delete back one char.\n- `Ctrl + w` Delete a word.\n- `Ctrl + u` Delete to beginning of the line.\n- `Ctrl + [` Change to normal mode.\n- `Ctrl + o` Insert Normal mode.\n- `Ctrl + r, {register}` is used to paste the in insert mode from register specified.\n\n### Insert Normal Mode\nJust one command we can execute from the Insert mode.\n`Ctrl + o, zz` will move the current line to the center.\n\n### Visual Mode\nEasy to manipulate in character level, line level and rectangular blocks. Many operations and commands will be work similar to Normal mode.\n`v` will change in to the visual mode char level.\n`V` will change in to the visual mode line level.\n`Ctrl + v` will change in to the visual mode block level. But in windows `Ctrl + q` will make it to block visual mode.\n`o` will toggle the free end in the visual mode.\n                    \n## Basic Actions\n- `hjkl` - for moving around\n- `w` - jump a word.\n- `$` - at the end of line\n- `^` - beginning of the line.\n\n### Advanced Movements\n- ` `. ` - jump to last change position.\n- `ma` - Mark the current curser location as \"a\".\n- ` `a` - Jump to mark named as \"a\".\n- `:marks` - List all marks.\n\n### Append\n- `a` is used for appending.\n- `A` for appending to the end of the line. `$a` is another way to achieve this.\n\n### Insert\n- `i` is used for inserting.\n- `I` is used for inserting in the first of line. `^i` is equivalent to this.\n\n### Dot to repeat\n- `.` will repeats last executed action. Will repeating the last action VIM will consider all changes inside an insert mode to exit as single action. \n- It will repeat every keystroke inside the insert mode.\n\n### Undo\n- `u` for undoing. From the moment we enter Insert mode until we return to Normal mode, everything we type (or delete) counts as a single change.\n\n### Delete\n- `d`     id used for deleting a character.\n- `dd`    will delete the whole line.\n- `dw`    will delete a word.\n- `daw`   will delete a word including the space around it.\n- `diw`   will delete a word not without the space.\n\n### Finding a char using f and t\n- `fx` will find the char x in the line to find the next match use `;`\n- `,` will use the last character search.\n\n### Indentation \n- `>` is used for indentation.\n- `<` left shift\n- `=` Auto indentation.\n- `>G` will increases the indentation from the current line until the end of the file.\n\n### Yank\n- copy from current line to the n'th line\n  1. `y20G`      this will yank from current line to 20th line.\n  2. `:.,20y`    same with range, `:[range]y[ank] [x]`.\n  3. `\"[register]y` will copy to the register specified. eg : `\"*y` - Will copy to system clipbord(register *).\n\n### Simple increment and Decrement\n- `Ctrl + a` will increment the number under the cursor.\n- `Ctrl + x` will decrement the number under the cursor.\n\n### Search and Replace\n`:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]` format for the search and replace command.\n\n**Flags**\n- `c` confirm on each substitution.\n- `g` replace all occurrences.\n- `i` ignore case for pattern.\n\n`:%s\\old\\new\\g` : will replace the \"old\" with \"new\" in all document. \n### AutoComplete in vim\n- Auto word completion\n- Auto line completion\n- Auto file completion\n## Registers\nRegisters are essentially the names memory spaces in VIM to save and re-use the texts. Registers are being accessed by `\"`.\n- `\"ry` - will yank the selected text to register named \"r\".\n- `\"rp` - will paste the content in register \"r\" in normal mode.\n- `Ctrl + r` - will paste the data from register \"r\".\n### Common registers\n1) `*` - System clipboard.\n\n## Macro\n\n## Sessions\nSessions are used to save the current state of vim and restore it when you needed.\n- `:mks` is used to create a session for your vim editor. \n    eg: `:mks ~\\vimsessions\\bar.vim`\n- `:source` is used to restore the session which you saved. \n    eg: `:source ~\\vimsessions\\bar.vim`\n\n## VIM plugins\n\n### Vim-OrgMode\n**Plain List:**\n- `<localleader> cl or <CR>` - insert plainlist item below\n- `<localleader> cL or <C-S-CR>` - insert plainlist item above\n\n**Checkboxes:**\n- `<localleader> cc` - toggle status\n- `<localleader> cn or <CR>` - insert checkbox below\n- `<localleader> cN or <C-S-CR>` - insert checkbox above\n\n**Dates:**\n- `<localleader> sa` - insert date\n- `<localleader> si` - insert inactive date\n\n`<localleader>` is `\\` for by default.\n\n## Split Screen \n**with the `<C-w>` key** \n- `<Ctrl-w>n`       - `:new` horizontal split (editing a new empty buffer)\n- `<Ctrl-w>s`       - `:split` window horizontally (editing current buffer)\n- `<Ctrl-w>v`       - `:vsplit` window vertically (editing current buffer)\n- `<Ctrl-w>c`       - `:close` window\n- `<Ctrl-w>o`       - close all windows, leaving :only the current window open\n- `<Ctrl-w>w`       - go to next window\n- `<Ctrl-w>p`       - go to previous window\n- `<Ctrl-w><Up>`    - go to window above\n- `<Ctrl-w><Down>`  - go to window below\n- `<Ctrl-w><Left>`  - go to window on left\n- `<Ctrl-w><Right>` - go to window on right\n- `<C-w> <C-r>`     - To swap the two parts of a split window\n\n### Window size commands\n- `Ctrl+W +/-` - increase/decrease height (ex. 20<C-w>+)    \n- `Ctrl+W >/<` - increase/decrease width (ex. 30<C-w><)    \n- `Ctrl+W _` - set height (ex. 50<C-w>_)    \n- `Ctrl+W |` - set width (ex. 50<C-w>|)    \n- `Ctrl+W =` - equalize width and height of all windows\n**Resizing will happen only by one characters.**\n## Buffer \n- `:new` will create a split window with an unnamed buffer. \n- `:badd filename` will add the file to the bufferlist.\n- `:enew` will open one in the current window. \n- `:vnew` will open one in a vertically split window. \n- `:tabnew` will open one in a new tab.\n- `:bn` will change to next buffer.\n- `:bp` will change to previous buffer.\n- `:br` will change to starting buffer list.\n- `:bf` will change to first buffer.\n- `:ls` will list all the buffers.\n- `:bd` will Delete the buffer , also we can specify the buffer id too.\n\n## Random hacks\n- `:r !date /t` will add the current date.\n\n## Links\n1. http://www.rayninfo.co.uk/vimtips.html\n","source":"_posts/vim-Notes.md","raw":"---\nlayout:     post\ntitle: VIM Notes \ndate: 2018-05-06 22:55:04\nsubtitle: \"\\\" All my VIM related notes\\\"\"\nauthor:     \"Nithin VR\"\nheader-img: \"dotnet.jpg\"\ncatalog: true\ntags:\n\t- vim\n---\n# VIM Notes\nWriting down about all my vim tips here. **It will be updated regularly**\n## Modes\nVim has different modes to manipulate the text. Normal Insert and Visual are the main modes.\n\n### Normal Mode\nDefault or natural resting state. All the commands are running there to manipulate the text.\n\n### Insert Mode\nMode to edit add and correct text. Where you can type.\n- `Ctrl + h` Delete back one char.\n- `Ctrl + w` Delete a word.\n- `Ctrl + u` Delete to beginning of the line.\n- `Ctrl + [` Change to normal mode.\n- `Ctrl + o` Insert Normal mode.\n- `Ctrl + r, {register}` is used to paste the in insert mode from register specified.\n\n### Insert Normal Mode\nJust one command we can execute from the Insert mode.\n`Ctrl + o, zz` will move the current line to the center.\n\n### Visual Mode\nEasy to manipulate in character level, line level and rectangular blocks. Many operations and commands will be work similar to Normal mode.\n`v` will change in to the visual mode char level.\n`V` will change in to the visual mode line level.\n`Ctrl + v` will change in to the visual mode block level. But in windows `Ctrl + q` will make it to block visual mode.\n`o` will toggle the free end in the visual mode.\n                    \n## Basic Actions\n- `hjkl` - for moving around\n- `w` - jump a word.\n- `$` - at the end of line\n- `^` - beginning of the line.\n\n### Advanced Movements\n- ` `. ` - jump to last change position.\n- `ma` - Mark the current curser location as \"a\".\n- ` `a` - Jump to mark named as \"a\".\n- `:marks` - List all marks.\n\n### Append\n- `a` is used for appending.\n- `A` for appending to the end of the line. `$a` is another way to achieve this.\n\n### Insert\n- `i` is used for inserting.\n- `I` is used for inserting in the first of line. `^i` is equivalent to this.\n\n### Dot to repeat\n- `.` will repeats last executed action. Will repeating the last action VIM will consider all changes inside an insert mode to exit as single action. \n- It will repeat every keystroke inside the insert mode.\n\n### Undo\n- `u` for undoing. From the moment we enter Insert mode until we return to Normal mode, everything we type (or delete) counts as a single change.\n\n### Delete\n- `d`     id used for deleting a character.\n- `dd`    will delete the whole line.\n- `dw`    will delete a word.\n- `daw`   will delete a word including the space around it.\n- `diw`   will delete a word not without the space.\n\n### Finding a char using f and t\n- `fx` will find the char x in the line to find the next match use `;`\n- `,` will use the last character search.\n\n### Indentation \n- `>` is used for indentation.\n- `<` left shift\n- `=` Auto indentation.\n- `>G` will increases the indentation from the current line until the end of the file.\n\n### Yank\n- copy from current line to the n'th line\n  1. `y20G`      this will yank from current line to 20th line.\n  2. `:.,20y`    same with range, `:[range]y[ank] [x]`.\n  3. `\"[register]y` will copy to the register specified. eg : `\"*y` - Will copy to system clipbord(register *).\n\n### Simple increment and Decrement\n- `Ctrl + a` will increment the number under the cursor.\n- `Ctrl + x` will decrement the number under the cursor.\n\n### Search and Replace\n`:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]` format for the search and replace command.\n\n**Flags**\n- `c` confirm on each substitution.\n- `g` replace all occurrences.\n- `i` ignore case for pattern.\n\n`:%s\\old\\new\\g` : will replace the \"old\" with \"new\" in all document. \n### AutoComplete in vim\n- Auto word completion\n- Auto line completion\n- Auto file completion\n## Registers\nRegisters are essentially the names memory spaces in VIM to save and re-use the texts. Registers are being accessed by `\"`.\n- `\"ry` - will yank the selected text to register named \"r\".\n- `\"rp` - will paste the content in register \"r\" in normal mode.\n- `Ctrl + r` - will paste the data from register \"r\".\n### Common registers\n1) `*` - System clipboard.\n\n## Macro\n\n## Sessions\nSessions are used to save the current state of vim and restore it when you needed.\n- `:mks` is used to create a session for your vim editor. \n    eg: `:mks ~\\vimsessions\\bar.vim`\n- `:source` is used to restore the session which you saved. \n    eg: `:source ~\\vimsessions\\bar.vim`\n\n## VIM plugins\n\n### Vim-OrgMode\n**Plain List:**\n- `<localleader> cl or <CR>` - insert plainlist item below\n- `<localleader> cL or <C-S-CR>` - insert plainlist item above\n\n**Checkboxes:**\n- `<localleader> cc` - toggle status\n- `<localleader> cn or <CR>` - insert checkbox below\n- `<localleader> cN or <C-S-CR>` - insert checkbox above\n\n**Dates:**\n- `<localleader> sa` - insert date\n- `<localleader> si` - insert inactive date\n\n`<localleader>` is `\\` for by default.\n\n## Split Screen \n**with the `<C-w>` key** \n- `<Ctrl-w>n`       - `:new` horizontal split (editing a new empty buffer)\n- `<Ctrl-w>s`       - `:split` window horizontally (editing current buffer)\n- `<Ctrl-w>v`       - `:vsplit` window vertically (editing current buffer)\n- `<Ctrl-w>c`       - `:close` window\n- `<Ctrl-w>o`       - close all windows, leaving :only the current window open\n- `<Ctrl-w>w`       - go to next window\n- `<Ctrl-w>p`       - go to previous window\n- `<Ctrl-w><Up>`    - go to window above\n- `<Ctrl-w><Down>`  - go to window below\n- `<Ctrl-w><Left>`  - go to window on left\n- `<Ctrl-w><Right>` - go to window on right\n- `<C-w> <C-r>`     - To swap the two parts of a split window\n\n### Window size commands\n- `Ctrl+W +/-` - increase/decrease height (ex. 20<C-w>+)    \n- `Ctrl+W >/<` - increase/decrease width (ex. 30<C-w><)    \n- `Ctrl+W _` - set height (ex. 50<C-w>_)    \n- `Ctrl+W |` - set width (ex. 50<C-w>|)    \n- `Ctrl+W =` - equalize width and height of all windows\n**Resizing will happen only by one characters.**\n## Buffer \n- `:new` will create a split window with an unnamed buffer. \n- `:badd filename` will add the file to the bufferlist.\n- `:enew` will open one in the current window. \n- `:vnew` will open one in a vertically split window. \n- `:tabnew` will open one in a new tab.\n- `:bn` will change to next buffer.\n- `:bp` will change to previous buffer.\n- `:br` will change to starting buffer list.\n- `:bf` will change to first buffer.\n- `:ls` will list all the buffers.\n- `:bd` will Delete the buffer , also we can specify the buffer id too.\n\n## Random hacks\n- `:r !date /t` will add the current date.\n\n## Links\n1. http://www.rayninfo.co.uk/vimtips.html\n","slug":"vim-Notes","published":1,"updated":"2018-05-06T17:29:23.759Z","comments":1,"photos":[],"link":"","_id":"ckeicsck7000vnncvsbyn92li","content":"<h1 id=\"VIM-Notes\"><a href=\"#VIM-Notes\" class=\"headerlink\" title=\"VIM Notes\"></a>VIM Notes</h1><p>Writing down about all my vim tips here. <strong>It will be updated regularly</strong></p>\n<h2 id=\"Modes\"><a href=\"#Modes\" class=\"headerlink\" title=\"Modes\"></a>Modes</h2><p>Vim has different modes to manipulate the text. Normal Insert and Visual are the main modes.</p>\n<h3 id=\"Normal-Mode\"><a href=\"#Normal-Mode\" class=\"headerlink\" title=\"Normal Mode\"></a>Normal Mode</h3><p>Default or natural resting state. All the commands are running there to manipulate the text.</p>\n<h3 id=\"Insert-Mode\"><a href=\"#Insert-Mode\" class=\"headerlink\" title=\"Insert Mode\"></a>Insert Mode</h3><p>Mode to edit add and correct text. Where you can type.</p>\n<ul>\n<li><code>Ctrl + h</code> Delete back one char.</li>\n<li><code>Ctrl + w</code> Delete a word.</li>\n<li><code>Ctrl + u</code> Delete to beginning of the line.</li>\n<li><code>Ctrl + [</code> Change to normal mode.</li>\n<li><code>Ctrl + o</code> Insert Normal mode.</li>\n<li><code>Ctrl + r, {register}</code> is used to paste the in insert mode from register specified.</li>\n</ul>\n<h3 id=\"Insert-Normal-Mode\"><a href=\"#Insert-Normal-Mode\" class=\"headerlink\" title=\"Insert Normal Mode\"></a>Insert Normal Mode</h3><p>Just one command we can execute from the Insert mode.<br><code>Ctrl + o, zz</code> will move the current line to the center.</p>\n<h3 id=\"Visual-Mode\"><a href=\"#Visual-Mode\" class=\"headerlink\" title=\"Visual Mode\"></a>Visual Mode</h3><p>Easy to manipulate in character level, line level and rectangular blocks. Many operations and commands will be work similar to Normal mode.<br><code>v</code> will change in to the visual mode char level.<br><code>V</code> will change in to the visual mode line level.<br><code>Ctrl + v</code> will change in to the visual mode block level. But in windows <code>Ctrl + q</code> will make it to block visual mode.<br><code>o</code> will toggle the free end in the visual mode.</p>\n<h2 id=\"Basic-Actions\"><a href=\"#Basic-Actions\" class=\"headerlink\" title=\"Basic Actions\"></a>Basic Actions</h2><ul>\n<li><code>hjkl</code> - for moving around</li>\n<li><code>w</code> - jump a word.</li>\n<li><code>$</code> - at the end of line</li>\n<li><code>^</code> - beginning of the line.</li>\n</ul>\n<h3 id=\"Advanced-Movements\"><a href=\"#Advanced-Movements\" class=\"headerlink\" title=\"Advanced Movements\"></a>Advanced Movements</h3><ul>\n<li><code>`.</code> - jump to last change position.</li>\n<li><code>ma</code> - Mark the current curser location as “a”.</li>\n<li><code>`a</code> - Jump to mark named as “a”.</li>\n<li><code>:marks</code> - List all marks.</li>\n</ul>\n<h3 id=\"Append\"><a href=\"#Append\" class=\"headerlink\" title=\"Append\"></a>Append</h3><ul>\n<li><code>a</code> is used for appending.</li>\n<li><code>A</code> for appending to the end of the line. <code>$a</code> is another way to achieve this.</li>\n</ul>\n<h3 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert\"></a>Insert</h3><ul>\n<li><code>i</code> is used for inserting.</li>\n<li><code>I</code> is used for inserting in the first of line. <code>^i</code> is equivalent to this.</li>\n</ul>\n<h3 id=\"Dot-to-repeat\"><a href=\"#Dot-to-repeat\" class=\"headerlink\" title=\"Dot to repeat\"></a>Dot to repeat</h3><ul>\n<li><code>.</code> will repeats last executed action. Will repeating the last action VIM will consider all changes inside an insert mode to exit as single action. </li>\n<li>It will repeat every keystroke inside the insert mode.</li>\n</ul>\n<h3 id=\"Undo\"><a href=\"#Undo\" class=\"headerlink\" title=\"Undo\"></a>Undo</h3><ul>\n<li><code>u</code> for undoing. From the moment we enter Insert mode until we return to Normal mode, everything we type (or delete) counts as a single change.</li>\n</ul>\n<h3 id=\"Delete\"><a href=\"#Delete\" class=\"headerlink\" title=\"Delete\"></a>Delete</h3><ul>\n<li><code>d</code>     id used for deleting a character.</li>\n<li><code>dd</code>    will delete the whole line.</li>\n<li><code>dw</code>    will delete a word.</li>\n<li><code>daw</code>   will delete a word including the space around it.</li>\n<li><code>diw</code>   will delete a word not without the space.</li>\n</ul>\n<h3 id=\"Finding-a-char-using-f-and-t\"><a href=\"#Finding-a-char-using-f-and-t\" class=\"headerlink\" title=\"Finding a char using f and t\"></a>Finding a char using f and t</h3><ul>\n<li><code>fx</code> will find the char x in the line to find the next match use <code>;</code></li>\n<li><code>,</code> will use the last character search.</li>\n</ul>\n<h3 id=\"Indentation\"><a href=\"#Indentation\" class=\"headerlink\" title=\"Indentation\"></a>Indentation</h3><ul>\n<li><code>&gt;</code> is used for indentation.</li>\n<li><code>&lt;</code> left shift</li>\n<li><code>=</code> Auto indentation.</li>\n<li><code>&gt;G</code> will increases the indentation from the current line until the end of the file.</li>\n</ul>\n<h3 id=\"Yank\"><a href=\"#Yank\" class=\"headerlink\" title=\"Yank\"></a>Yank</h3><ul>\n<li>copy from current line to the n’th line<ol>\n<li><code>y20G</code>      this will yank from current line to 20th line.</li>\n<li><code>:.,20y</code>    same with range, <code>:[range]y[ank] [x]</code>.</li>\n<li><code>&quot;[register]y</code> will copy to the register specified. eg : <code>&quot;*y</code> - Will copy to system clipbord(register *).</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Simple-increment-and-Decrement\"><a href=\"#Simple-increment-and-Decrement\" class=\"headerlink\" title=\"Simple increment and Decrement\"></a>Simple increment and Decrement</h3><ul>\n<li><code>Ctrl + a</code> will increment the number under the cursor.</li>\n<li><code>Ctrl + x</code> will decrement the number under the cursor.</li>\n</ul>\n<h3 id=\"Search-and-Replace\"><a href=\"#Search-and-Replace\" class=\"headerlink\" title=\"Search and Replace\"></a>Search and Replace</h3><p><code>:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]</code> format for the search and replace command.</p>\n<p><strong>Flags</strong></p>\n<ul>\n<li><code>c</code> confirm on each substitution.</li>\n<li><code>g</code> replace all occurrences.</li>\n<li><code>i</code> ignore case for pattern.</li>\n</ul>\n<p><code>:%s\\old\\new\\g</code> : will replace the “old” with “new” in all document. </p>\n<h3 id=\"AutoComplete-in-vim\"><a href=\"#AutoComplete-in-vim\" class=\"headerlink\" title=\"AutoComplete in vim\"></a>AutoComplete in vim</h3><ul>\n<li>Auto word completion</li>\n<li>Auto line completion</li>\n<li>Auto file completion<h2 id=\"Registers\"><a href=\"#Registers\" class=\"headerlink\" title=\"Registers\"></a>Registers</h2>Registers are essentially the names memory spaces in VIM to save and re-use the texts. Registers are being accessed by <code>&quot;</code>.</li>\n<li><code>&quot;ry</code> - will yank the selected text to register named “r”.</li>\n<li><code>&quot;rp</code> - will paste the content in register “r” in normal mode.</li>\n<li><code>Ctrl + r</code> - will paste the data from register “r”.<h3 id=\"Common-registers\"><a href=\"#Common-registers\" class=\"headerlink\" title=\"Common registers\"></a>Common registers</h3>1) <code>*</code> - System clipboard.</li>\n</ul>\n<h2 id=\"Macro\"><a href=\"#Macro\" class=\"headerlink\" title=\"Macro\"></a>Macro</h2><h2 id=\"Sessions\"><a href=\"#Sessions\" class=\"headerlink\" title=\"Sessions\"></a>Sessions</h2><p>Sessions are used to save the current state of vim and restore it when you needed.</p>\n<ul>\n<li><code>:mks</code> is used to create a session for your vim editor.<br>  eg: <code>:mks ~\\vimsessions\\bar.vim</code></li>\n<li><code>:source</code> is used to restore the session which you saved.<br>  eg: <code>:source ~\\vimsessions\\bar.vim</code></li>\n</ul>\n<h2 id=\"VIM-plugins\"><a href=\"#VIM-plugins\" class=\"headerlink\" title=\"VIM plugins\"></a>VIM plugins</h2><h3 id=\"Vim-OrgMode\"><a href=\"#Vim-OrgMode\" class=\"headerlink\" title=\"Vim-OrgMode\"></a>Vim-OrgMode</h3><p><strong>Plain List:</strong></p>\n<ul>\n<li><code>&lt;localleader&gt; cl or &lt;CR&gt;</code> - insert plainlist item below</li>\n<li><code>&lt;localleader&gt; cL or &lt;C-S-CR&gt;</code> - insert plainlist item above</li>\n</ul>\n<p><strong>Checkboxes:</strong></p>\n<ul>\n<li><code>&lt;localleader&gt; cc</code> - toggle status</li>\n<li><code>&lt;localleader&gt; cn or &lt;CR&gt;</code> - insert checkbox below</li>\n<li><code>&lt;localleader&gt; cN or &lt;C-S-CR&gt;</code> - insert checkbox above</li>\n</ul>\n<p><strong>Dates:</strong></p>\n<ul>\n<li><code>&lt;localleader&gt; sa</code> - insert date</li>\n<li><code>&lt;localleader&gt; si</code> - insert inactive date</li>\n</ul>\n<p><code>&lt;localleader&gt;</code> is <code>\\</code> for by default.</p>\n<h2 id=\"Split-Screen\"><a href=\"#Split-Screen\" class=\"headerlink\" title=\"Split Screen\"></a>Split Screen</h2><p><strong>with the <code>&lt;C-w&gt;</code> key</strong> </p>\n<ul>\n<li><code>&lt;Ctrl-w&gt;n</code>       - <code>:new</code> horizontal split (editing a new empty buffer)</li>\n<li><code>&lt;Ctrl-w&gt;s</code>       - <code>:split</code> window horizontally (editing current buffer)</li>\n<li><code>&lt;Ctrl-w&gt;v</code>       - <code>:vsplit</code> window vertically (editing current buffer)</li>\n<li><code>&lt;Ctrl-w&gt;c</code>       - <code>:close</code> window</li>\n<li><code>&lt;Ctrl-w&gt;o</code>       - close all windows, leaving :only the current window open</li>\n<li><code>&lt;Ctrl-w&gt;w</code>       - go to next window</li>\n<li><code>&lt;Ctrl-w&gt;p</code>       - go to previous window</li>\n<li><code>&lt;Ctrl-w&gt;&lt;Up&gt;</code>    - go to window above</li>\n<li><code>&lt;Ctrl-w&gt;&lt;Down&gt;</code>  - go to window below</li>\n<li><code>&lt;Ctrl-w&gt;&lt;Left&gt;</code>  - go to window on left</li>\n<li><code>&lt;Ctrl-w&gt;&lt;Right&gt;</code> - go to window on right</li>\n<li><code>&lt;C-w&gt; &lt;C-r&gt;</code>     - To swap the two parts of a split window</li>\n</ul>\n<h3 id=\"Window-size-commands\"><a href=\"#Window-size-commands\" class=\"headerlink\" title=\"Window size commands\"></a>Window size commands</h3><ul>\n<li><code>Ctrl+W +/-</code> - increase/decrease height (ex. 20<c-w>+)    </c-w></li>\n<li><code>Ctrl+W &gt;/&lt;</code> - increase/decrease width (ex. 30<c-w>&lt;)    </c-w></li>\n<li><code>Ctrl+W _</code> - set height (ex. 50<c-w>_)    </c-w></li>\n<li><code>Ctrl+W |</code> - set width (ex. 50<c-w>|)    </c-w></li>\n<li><code>Ctrl+W =</code> - equalize width and height of all windows<br><strong>Resizing will happen only by one characters.</strong><h2 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h2></li>\n<li><code>:new</code> will create a split window with an unnamed buffer. </li>\n<li><code>:badd filename</code> will add the file to the bufferlist.</li>\n<li><code>:enew</code> will open one in the current window. </li>\n<li><code>:vnew</code> will open one in a vertically split window. </li>\n<li><code>:tabnew</code> will open one in a new tab.</li>\n<li><code>:bn</code> will change to next buffer.</li>\n<li><code>:bp</code> will change to previous buffer.</li>\n<li><code>:br</code> will change to starting buffer list.</li>\n<li><code>:bf</code> will change to first buffer.</li>\n<li><code>:ls</code> will list all the buffers.</li>\n<li><code>:bd</code> will Delete the buffer , also we can specify the buffer id too.</li>\n</ul>\n<h2 id=\"Random-hacks\"><a href=\"#Random-hacks\" class=\"headerlink\" title=\"Random hacks\"></a>Random hacks</h2><ul>\n<li><code>:r !date /t</code> will add the current date.</li>\n</ul>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"http://www.rayninfo.co.uk/vimtips.html\" target=\"_blank\" rel=\"external\">http://www.rayninfo.co.uk/vimtips.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"VIM-Notes\"><a href=\"#VIM-Notes\" class=\"headerlink\" title=\"VIM Notes\"></a>VIM Notes</h1><p>Writing down about all my vim tips here. <strong>It will be updated regularly</strong></p>\n<h2 id=\"Modes\"><a href=\"#Modes\" class=\"headerlink\" title=\"Modes\"></a>Modes</h2><p>Vim has different modes to manipulate the text. Normal Insert and Visual are the main modes.</p>\n<h3 id=\"Normal-Mode\"><a href=\"#Normal-Mode\" class=\"headerlink\" title=\"Normal Mode\"></a>Normal Mode</h3><p>Default or natural resting state. All the commands are running there to manipulate the text.</p>\n<h3 id=\"Insert-Mode\"><a href=\"#Insert-Mode\" class=\"headerlink\" title=\"Insert Mode\"></a>Insert Mode</h3><p>Mode to edit add and correct text. Where you can type.</p>\n<ul>\n<li><code>Ctrl + h</code> Delete back one char.</li>\n<li><code>Ctrl + w</code> Delete a word.</li>\n<li><code>Ctrl + u</code> Delete to beginning of the line.</li>\n<li><code>Ctrl + [</code> Change to normal mode.</li>\n<li><code>Ctrl + o</code> Insert Normal mode.</li>\n<li><code>Ctrl + r, {register}</code> is used to paste the in insert mode from register specified.</li>\n</ul>\n<h3 id=\"Insert-Normal-Mode\"><a href=\"#Insert-Normal-Mode\" class=\"headerlink\" title=\"Insert Normal Mode\"></a>Insert Normal Mode</h3><p>Just one command we can execute from the Insert mode.<br><code>Ctrl + o, zz</code> will move the current line to the center.</p>\n<h3 id=\"Visual-Mode\"><a href=\"#Visual-Mode\" class=\"headerlink\" title=\"Visual Mode\"></a>Visual Mode</h3><p>Easy to manipulate in character level, line level and rectangular blocks. Many operations and commands will be work similar to Normal mode.<br><code>v</code> will change in to the visual mode char level.<br><code>V</code> will change in to the visual mode line level.<br><code>Ctrl + v</code> will change in to the visual mode block level. But in windows <code>Ctrl + q</code> will make it to block visual mode.<br><code>o</code> will toggle the free end in the visual mode.</p>\n<h2 id=\"Basic-Actions\"><a href=\"#Basic-Actions\" class=\"headerlink\" title=\"Basic Actions\"></a>Basic Actions</h2><ul>\n<li><code>hjkl</code> - for moving around</li>\n<li><code>w</code> - jump a word.</li>\n<li><code>$</code> - at the end of line</li>\n<li><code>^</code> - beginning of the line.</li>\n</ul>\n<h3 id=\"Advanced-Movements\"><a href=\"#Advanced-Movements\" class=\"headerlink\" title=\"Advanced Movements\"></a>Advanced Movements</h3><ul>\n<li><code>`.</code> - jump to last change position.</li>\n<li><code>ma</code> - Mark the current curser location as “a”.</li>\n<li><code>`a</code> - Jump to mark named as “a”.</li>\n<li><code>:marks</code> - List all marks.</li>\n</ul>\n<h3 id=\"Append\"><a href=\"#Append\" class=\"headerlink\" title=\"Append\"></a>Append</h3><ul>\n<li><code>a</code> is used for appending.</li>\n<li><code>A</code> for appending to the end of the line. <code>$a</code> is another way to achieve this.</li>\n</ul>\n<h3 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert\"></a>Insert</h3><ul>\n<li><code>i</code> is used for inserting.</li>\n<li><code>I</code> is used for inserting in the first of line. <code>^i</code> is equivalent to this.</li>\n</ul>\n<h3 id=\"Dot-to-repeat\"><a href=\"#Dot-to-repeat\" class=\"headerlink\" title=\"Dot to repeat\"></a>Dot to repeat</h3><ul>\n<li><code>.</code> will repeats last executed action. Will repeating the last action VIM will consider all changes inside an insert mode to exit as single action. </li>\n<li>It will repeat every keystroke inside the insert mode.</li>\n</ul>\n<h3 id=\"Undo\"><a href=\"#Undo\" class=\"headerlink\" title=\"Undo\"></a>Undo</h3><ul>\n<li><code>u</code> for undoing. From the moment we enter Insert mode until we return to Normal mode, everything we type (or delete) counts as a single change.</li>\n</ul>\n<h3 id=\"Delete\"><a href=\"#Delete\" class=\"headerlink\" title=\"Delete\"></a>Delete</h3><ul>\n<li><code>d</code>     id used for deleting a character.</li>\n<li><code>dd</code>    will delete the whole line.</li>\n<li><code>dw</code>    will delete a word.</li>\n<li><code>daw</code>   will delete a word including the space around it.</li>\n<li><code>diw</code>   will delete a word not without the space.</li>\n</ul>\n<h3 id=\"Finding-a-char-using-f-and-t\"><a href=\"#Finding-a-char-using-f-and-t\" class=\"headerlink\" title=\"Finding a char using f and t\"></a>Finding a char using f and t</h3><ul>\n<li><code>fx</code> will find the char x in the line to find the next match use <code>;</code></li>\n<li><code>,</code> will use the last character search.</li>\n</ul>\n<h3 id=\"Indentation\"><a href=\"#Indentation\" class=\"headerlink\" title=\"Indentation\"></a>Indentation</h3><ul>\n<li><code>&gt;</code> is used for indentation.</li>\n<li><code>&lt;</code> left shift</li>\n<li><code>=</code> Auto indentation.</li>\n<li><code>&gt;G</code> will increases the indentation from the current line until the end of the file.</li>\n</ul>\n<h3 id=\"Yank\"><a href=\"#Yank\" class=\"headerlink\" title=\"Yank\"></a>Yank</h3><ul>\n<li>copy from current line to the n’th line<ol>\n<li><code>y20G</code>      this will yank from current line to 20th line.</li>\n<li><code>:.,20y</code>    same with range, <code>:[range]y[ank] [x]</code>.</li>\n<li><code>&quot;[register]y</code> will copy to the register specified. eg : <code>&quot;*y</code> - Will copy to system clipbord(register *).</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Simple-increment-and-Decrement\"><a href=\"#Simple-increment-and-Decrement\" class=\"headerlink\" title=\"Simple increment and Decrement\"></a>Simple increment and Decrement</h3><ul>\n<li><code>Ctrl + a</code> will increment the number under the cursor.</li>\n<li><code>Ctrl + x</code> will decrement the number under the cursor.</li>\n</ul>\n<h3 id=\"Search-and-Replace\"><a href=\"#Search-and-Replace\" class=\"headerlink\" title=\"Search and Replace\"></a>Search and Replace</h3><p><code>:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]</code> format for the search and replace command.</p>\n<p><strong>Flags</strong></p>\n<ul>\n<li><code>c</code> confirm on each substitution.</li>\n<li><code>g</code> replace all occurrences.</li>\n<li><code>i</code> ignore case for pattern.</li>\n</ul>\n<p><code>:%s\\old\\new\\g</code> : will replace the “old” with “new” in all document. </p>\n<h3 id=\"AutoComplete-in-vim\"><a href=\"#AutoComplete-in-vim\" class=\"headerlink\" title=\"AutoComplete in vim\"></a>AutoComplete in vim</h3><ul>\n<li>Auto word completion</li>\n<li>Auto line completion</li>\n<li>Auto file completion<h2 id=\"Registers\"><a href=\"#Registers\" class=\"headerlink\" title=\"Registers\"></a>Registers</h2>Registers are essentially the names memory spaces in VIM to save and re-use the texts. Registers are being accessed by <code>&quot;</code>.</li>\n<li><code>&quot;ry</code> - will yank the selected text to register named “r”.</li>\n<li><code>&quot;rp</code> - will paste the content in register “r” in normal mode.</li>\n<li><code>Ctrl + r</code> - will paste the data from register “r”.<h3 id=\"Common-registers\"><a href=\"#Common-registers\" class=\"headerlink\" title=\"Common registers\"></a>Common registers</h3>1) <code>*</code> - System clipboard.</li>\n</ul>\n<h2 id=\"Macro\"><a href=\"#Macro\" class=\"headerlink\" title=\"Macro\"></a>Macro</h2><h2 id=\"Sessions\"><a href=\"#Sessions\" class=\"headerlink\" title=\"Sessions\"></a>Sessions</h2><p>Sessions are used to save the current state of vim and restore it when you needed.</p>\n<ul>\n<li><code>:mks</code> is used to create a session for your vim editor.<br>  eg: <code>:mks ~\\vimsessions\\bar.vim</code></li>\n<li><code>:source</code> is used to restore the session which you saved.<br>  eg: <code>:source ~\\vimsessions\\bar.vim</code></li>\n</ul>\n<h2 id=\"VIM-plugins\"><a href=\"#VIM-plugins\" class=\"headerlink\" title=\"VIM plugins\"></a>VIM plugins</h2><h3 id=\"Vim-OrgMode\"><a href=\"#Vim-OrgMode\" class=\"headerlink\" title=\"Vim-OrgMode\"></a>Vim-OrgMode</h3><p><strong>Plain List:</strong></p>\n<ul>\n<li><code>&lt;localleader&gt; cl or &lt;CR&gt;</code> - insert plainlist item below</li>\n<li><code>&lt;localleader&gt; cL or &lt;C-S-CR&gt;</code> - insert plainlist item above</li>\n</ul>\n<p><strong>Checkboxes:</strong></p>\n<ul>\n<li><code>&lt;localleader&gt; cc</code> - toggle status</li>\n<li><code>&lt;localleader&gt; cn or &lt;CR&gt;</code> - insert checkbox below</li>\n<li><code>&lt;localleader&gt; cN or &lt;C-S-CR&gt;</code> - insert checkbox above</li>\n</ul>\n<p><strong>Dates:</strong></p>\n<ul>\n<li><code>&lt;localleader&gt; sa</code> - insert date</li>\n<li><code>&lt;localleader&gt; si</code> - insert inactive date</li>\n</ul>\n<p><code>&lt;localleader&gt;</code> is <code>\\</code> for by default.</p>\n<h2 id=\"Split-Screen\"><a href=\"#Split-Screen\" class=\"headerlink\" title=\"Split Screen\"></a>Split Screen</h2><p><strong>with the <code>&lt;C-w&gt;</code> key</strong> </p>\n<ul>\n<li><code>&lt;Ctrl-w&gt;n</code>       - <code>:new</code> horizontal split (editing a new empty buffer)</li>\n<li><code>&lt;Ctrl-w&gt;s</code>       - <code>:split</code> window horizontally (editing current buffer)</li>\n<li><code>&lt;Ctrl-w&gt;v</code>       - <code>:vsplit</code> window vertically (editing current buffer)</li>\n<li><code>&lt;Ctrl-w&gt;c</code>       - <code>:close</code> window</li>\n<li><code>&lt;Ctrl-w&gt;o</code>       - close all windows, leaving :only the current window open</li>\n<li><code>&lt;Ctrl-w&gt;w</code>       - go to next window</li>\n<li><code>&lt;Ctrl-w&gt;p</code>       - go to previous window</li>\n<li><code>&lt;Ctrl-w&gt;&lt;Up&gt;</code>    - go to window above</li>\n<li><code>&lt;Ctrl-w&gt;&lt;Down&gt;</code>  - go to window below</li>\n<li><code>&lt;Ctrl-w&gt;&lt;Left&gt;</code>  - go to window on left</li>\n<li><code>&lt;Ctrl-w&gt;&lt;Right&gt;</code> - go to window on right</li>\n<li><code>&lt;C-w&gt; &lt;C-r&gt;</code>     - To swap the two parts of a split window</li>\n</ul>\n<h3 id=\"Window-size-commands\"><a href=\"#Window-size-commands\" class=\"headerlink\" title=\"Window size commands\"></a>Window size commands</h3><ul>\n<li><code>Ctrl+W +/-</code> - increase/decrease height (ex. 20<c-w>+)    </c-w></li>\n<li><code>Ctrl+W &gt;/&lt;</code> - increase/decrease width (ex. 30<c-w>&lt;)    </c-w></li>\n<li><code>Ctrl+W _</code> - set height (ex. 50<c-w>_)    </c-w></li>\n<li><code>Ctrl+W |</code> - set width (ex. 50<c-w>|)    </c-w></li>\n<li><code>Ctrl+W =</code> - equalize width and height of all windows<br><strong>Resizing will happen only by one characters.</strong><h2 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h2></li>\n<li><code>:new</code> will create a split window with an unnamed buffer. </li>\n<li><code>:badd filename</code> will add the file to the bufferlist.</li>\n<li><code>:enew</code> will open one in the current window. </li>\n<li><code>:vnew</code> will open one in a vertically split window. </li>\n<li><code>:tabnew</code> will open one in a new tab.</li>\n<li><code>:bn</code> will change to next buffer.</li>\n<li><code>:bp</code> will change to previous buffer.</li>\n<li><code>:br</code> will change to starting buffer list.</li>\n<li><code>:bf</code> will change to first buffer.</li>\n<li><code>:ls</code> will list all the buffers.</li>\n<li><code>:bd</code> will Delete the buffer , also we can specify the buffer id too.</li>\n</ul>\n<h2 id=\"Random-hacks\"><a href=\"#Random-hacks\" class=\"headerlink\" title=\"Random hacks\"></a>Random hacks</h2><ul>\n<li><code>:r !date /t</code> will add the current date.</li>\n</ul>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"http://www.rayninfo.co.uk/vimtips.html\" target=\"_blank\" rel=\"external\">http://www.rayninfo.co.uk/vimtips.html</a></li>\n</ol>\n"},{"layout":"post","title":"RegEx in Visual Studio","subtitle":" \"Swap parameters in Visual Studio using regular expression.\"","date":"2017-08-19T12:00:00.000Z","author":"Nithin VR","header-img":"vs.png","catalog":true,"_content":"## Swap parameters using regular expression\nThis issue is occurred to me many times while sending review request, for example when I use Assert.AreEqual() method and the parameters are not in the order ( expected value, actual value) is got swapped. It's boring and long vexing job to correct all the Assert.AreEqual() parameter order. While searching on Internet found this easy way to swap the parameters using Regular Expression.\n```csharp\npublic static void AreEqual(object expected,object actual)  \n```\nFor example, I wrote code like :\n```csharp\nAssert.AreEqual(\"ActualString1\", CretedString1);  \nAssert.AreEqual(\"ActualString2\", CretedString2);  \nAssert.AreEqual(\"ActualString3\", CretedString3);  \n```\nThe parameter is reversed order, it's not right and For sure I will get a review comment to change this. To swap this parameter we can use find and replace with regular expression.\n{% blockquote %}\nNote : Regular Expression in Visual Studio is bit different.\n{% endblockquote %}\n\n##### Add this as Search Term\n```csharp\n\\((\".*\"),([^\\)]*)  \n```\n##### Add this as Replace Term\n```csharp\n($2, $1  \n```\n\n##### How its works\n![alt text](/2017/08/19/vs-regex/RegEx.png \"How RegEx works.\")\nFor information about regular expressions that are used in replacement patterns, see [Substitutions in Regular Expressions](https://docs.microsoft.com/en-us/dotnet/standard/base-types/substitutions-in-regular-expressions). To use a numbered capture group, the syntax is $2 to specify the numbered group and (x) to specify the group in question. \nFor example, the grouped regular expression (\\d)([a-z]) finds four matches in the following string: 1a 2b 3c 4d. \nThe replacement string z$1 converts that string to z1 z2 z3 z4.\n\n##### Example Screenshots\nBefore :\n![alt text](/2017/08/19/vs-regex/before.png \"Before changes.\")\n\nAfter :\n![alt text](/2017/08/19/vs-regex/after.png \"After changes.\")\n\n- Be careful to select code part you want to swap parameter. Don't apply for whole Document or Solution, It might do some harmful effects.\n- You can tweak the RegX for other use cases where parameter pattern is different.\n- There exist some shortcuts to reorder the parameter in VS but ii didn't work for me and even if it work, We need to select each AreEqual method and apply those shortcut.\n\n##### More Reference:\n>- [Using Regular Expressions in Visual Studio](https://msdn.microsoft.com/en-us/library/2k3te2cs.aspx)\n>- [Assert.AreEqual Method (Object, Object) (Microsoft.VisualStudio.TestTools.UnitTesting)](https://msdn.microsoft.com/en-us/library/ms243413.aspx)\n>- [shortcut to swap/reorder parameters in vs?](https://stackoverflow.com/questions/3292292/is-there-a-shortcut-to-swap-reorder-parameters-in-visual-studio-ide)\n","source":"_posts/vs-regex.md","raw":"---\nlayout: post\ntitle: \"RegEx in Visual Studio\"\nsubtitle: \" \\\"Swap parameters in Visual Studio using regular expression.\\\"\"\ndate: 2017-08-19 14:00:00\nauthor: \"Nithin VR\"\nheader-img: \"vs.png\"\ncatalog: true\ntags:\n    - VisualStudio\n    - RegEx\n---\n## Swap parameters using regular expression\nThis issue is occurred to me many times while sending review request, for example when I use Assert.AreEqual() method and the parameters are not in the order ( expected value, actual value) is got swapped. It's boring and long vexing job to correct all the Assert.AreEqual() parameter order. While searching on Internet found this easy way to swap the parameters using Regular Expression.\n```csharp\npublic static void AreEqual(object expected,object actual)  \n```\nFor example, I wrote code like :\n```csharp\nAssert.AreEqual(\"ActualString1\", CretedString1);  \nAssert.AreEqual(\"ActualString2\", CretedString2);  \nAssert.AreEqual(\"ActualString3\", CretedString3);  \n```\nThe parameter is reversed order, it's not right and For sure I will get a review comment to change this. To swap this parameter we can use find and replace with regular expression.\n{% blockquote %}\nNote : Regular Expression in Visual Studio is bit different.\n{% endblockquote %}\n\n##### Add this as Search Term\n```csharp\n\\((\".*\"),([^\\)]*)  \n```\n##### Add this as Replace Term\n```csharp\n($2, $1  \n```\n\n##### How its works\n![alt text](/2017/08/19/vs-regex/RegEx.png \"How RegEx works.\")\nFor information about regular expressions that are used in replacement patterns, see [Substitutions in Regular Expressions](https://docs.microsoft.com/en-us/dotnet/standard/base-types/substitutions-in-regular-expressions). To use a numbered capture group, the syntax is $2 to specify the numbered group and (x) to specify the group in question. \nFor example, the grouped regular expression (\\d)([a-z]) finds four matches in the following string: 1a 2b 3c 4d. \nThe replacement string z$1 converts that string to z1 z2 z3 z4.\n\n##### Example Screenshots\nBefore :\n![alt text](/2017/08/19/vs-regex/before.png \"Before changes.\")\n\nAfter :\n![alt text](/2017/08/19/vs-regex/after.png \"After changes.\")\n\n- Be careful to select code part you want to swap parameter. Don't apply for whole Document or Solution, It might do some harmful effects.\n- You can tweak the RegX for other use cases where parameter pattern is different.\n- There exist some shortcuts to reorder the parameter in VS but ii didn't work for me and even if it work, We need to select each AreEqual method and apply those shortcut.\n\n##### More Reference:\n>- [Using Regular Expressions in Visual Studio](https://msdn.microsoft.com/en-us/library/2k3te2cs.aspx)\n>- [Assert.AreEqual Method (Object, Object) (Microsoft.VisualStudio.TestTools.UnitTesting)](https://msdn.microsoft.com/en-us/library/ms243413.aspx)\n>- [shortcut to swap/reorder parameters in vs?](https://stackoverflow.com/questions/3292292/is-there-a-shortcut-to-swap-reorder-parameters-in-visual-studio-ide)\n","slug":"vs-regex","published":1,"updated":"2018-05-06T16:45:54.871Z","comments":1,"photos":[],"link":"","_id":"ckeicsck9000wnncv5vw28dne","content":"<h2 id=\"Swap-parameters-using-regular-expression\"><a href=\"#Swap-parameters-using-regular-expression\" class=\"headerlink\" title=\"Swap parameters using regular expression\"></a>Swap parameters using regular expression</h2><p>This issue is occurred to me many times while sending review request, for example when I use Assert.AreEqual() method and the parameters are not in the order ( expected value, actual value) is got swapped. It’s boring and long vexing job to correct all the Assert.AreEqual() parameter order. While searching on Internet found this easy way to swap the parameters using Regular Expression.<br><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">AreEqual</span>(<span class=\"params\"><span class=\"keyword\">object</span> expected,<span class=\"keyword\">object</span> actual</span>)</span></div></pre></td></tr></table></figure></p>\n<p>For example, I wrote code like :<br><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString1\"</span>, CretedString1);  </div><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString2\"</span>, CretedString2);  </div><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString3\"</span>, CretedString3);</div></pre></td></tr></table></figure></p>\n<p>The parameter is reversed order, it’s not right and For sure I will get a review comment to change this. To swap this parameter we can use find and replace with regular expression.<br><blockquote><p>Note : Regular Expression in Visual Studio is bit different.</p>\n</blockquote></p>\n<h5 id=\"Add-this-as-Search-Term\"><a href=\"#Add-this-as-Search-Term\" class=\"headerlink\" title=\"Add this as Search Term\"></a>Add this as Search Term</h5><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">\\((<span class=\"string\">\".*\"</span>),([^\\)]*)</div></pre></td></tr></table></figure>\n<h5 id=\"Add-this-as-Replace-Term\"><a href=\"#Add-this-as-Replace-Term\" class=\"headerlink\" title=\"Add this as Replace Term\"></a>Add this as Replace Term</h5><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">($<span class=\"number\">2</span>, $<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h5 id=\"How-its-works\"><a href=\"#How-its-works\" class=\"headerlink\" title=\"How its works\"></a>How its works</h5><p><img src=\"/2017/08/19/vs-regex/RegEx.png\" alt=\"alt text\" title=\"How RegEx works.\"><br>For information about regular expressions that are used in replacement patterns, see <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/substitutions-in-regular-expressions\" target=\"_blank\" rel=\"external\">Substitutions in Regular Expressions</a>. To use a numbered capture group, the syntax is $2 to specify the numbered group and (x) to specify the group in question.<br>For example, the grouped regular expression (\\d)([a-z]) finds four matches in the following string: 1a 2b 3c 4d.<br>The replacement string z$1 converts that string to z1 z2 z3 z4.</p>\n<h5 id=\"Example-Screenshots\"><a href=\"#Example-Screenshots\" class=\"headerlink\" title=\"Example Screenshots\"></a>Example Screenshots</h5><p>Before :<br><img src=\"/2017/08/19/vs-regex/before.png\" alt=\"alt text\" title=\"Before changes.\"></p>\n<p>After :<br><img src=\"/2017/08/19/vs-regex/after.png\" alt=\"alt text\" title=\"After changes.\"></p>\n<ul>\n<li>Be careful to select code part you want to swap parameter. Don’t apply for whole Document or Solution, It might do some harmful effects.</li>\n<li>You can tweak the RegX for other use cases where parameter pattern is different.</li>\n<li>There exist some shortcuts to reorder the parameter in VS but ii didn’t work for me and even if it work, We need to select each AreEqual method and apply those shortcut.</li>\n</ul>\n<h5 id=\"More-Reference\"><a href=\"#More-Reference\" class=\"headerlink\" title=\"More Reference:\"></a>More Reference:</h5><blockquote>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/2k3te2cs.aspx\" target=\"_blank\" rel=\"external\">Using Regular Expressions in Visual Studio</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms243413.aspx\" target=\"_blank\" rel=\"external\">Assert.AreEqual Method (Object, Object) (Microsoft.VisualStudio.TestTools.UnitTesting)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3292292/is-there-a-shortcut-to-swap-reorder-parameters-in-visual-studio-ide\" target=\"_blank\" rel=\"external\">shortcut to swap/reorder parameters in vs?</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Swap-parameters-using-regular-expression\"><a href=\"#Swap-parameters-using-regular-expression\" class=\"headerlink\" title=\"Swap parameters using regular expression\"></a>Swap parameters using regular expression</h2><p>This issue is occurred to me many times while sending review request, for example when I use Assert.AreEqual() method and the parameters are not in the order ( expected value, actual value) is got swapped. It’s boring and long vexing job to correct all the Assert.AreEqual() parameter order. While searching on Internet found this easy way to swap the parameters using Regular Expression.<br><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">AreEqual</span>(<span class=\"params\"><span class=\"keyword\">object</span> expected,<span class=\"keyword\">object</span> actual</span>)</span></div></pre></td></tr></table></figure></p>\n<p>For example, I wrote code like :<br><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString1\"</span>, CretedString1);  </div><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString2\"</span>, CretedString2);  </div><div class=\"line\">Assert.AreEqual(<span class=\"string\">\"ActualString3\"</span>, CretedString3);</div></pre></td></tr></table></figure></p>\n<p>The parameter is reversed order, it’s not right and For sure I will get a review comment to change this. To swap this parameter we can use find and replace with regular expression.<br><blockquote><p>Note : Regular Expression in Visual Studio is bit different.</p>\n</blockquote></p>\n<h5 id=\"Add-this-as-Search-Term\"><a href=\"#Add-this-as-Search-Term\" class=\"headerlink\" title=\"Add this as Search Term\"></a>Add this as Search Term</h5><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">\\((<span class=\"string\">\".*\"</span>),([^\\)]*)</div></pre></td></tr></table></figure>\n<h5 id=\"Add-this-as-Replace-Term\"><a href=\"#Add-this-as-Replace-Term\" class=\"headerlink\" title=\"Add this as Replace Term\"></a>Add this as Replace Term</h5><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><div class=\"line\">($<span class=\"number\">2</span>, $<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h5 id=\"How-its-works\"><a href=\"#How-its-works\" class=\"headerlink\" title=\"How its works\"></a>How its works</h5><p><img src=\"/2017/08/19/vs-regex/RegEx.png\" alt=\"alt text\" title=\"How RegEx works.\"><br>For information about regular expressions that are used in replacement patterns, see <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/substitutions-in-regular-expressions\" target=\"_blank\" rel=\"external\">Substitutions in Regular Expressions</a>. To use a numbered capture group, the syntax is $2 to specify the numbered group and (x) to specify the group in question.<br>For example, the grouped regular expression (\\d)([a-z]) finds four matches in the following string: 1a 2b 3c 4d.<br>The replacement string z$1 converts that string to z1 z2 z3 z4.</p>\n<h5 id=\"Example-Screenshots\"><a href=\"#Example-Screenshots\" class=\"headerlink\" title=\"Example Screenshots\"></a>Example Screenshots</h5><p>Before :<br><img src=\"/2017/08/19/vs-regex/before.png\" alt=\"alt text\" title=\"Before changes.\"></p>\n<p>After :<br><img src=\"/2017/08/19/vs-regex/after.png\" alt=\"alt text\" title=\"After changes.\"></p>\n<ul>\n<li>Be careful to select code part you want to swap parameter. Don’t apply for whole Document or Solution, It might do some harmful effects.</li>\n<li>You can tweak the RegX for other use cases where parameter pattern is different.</li>\n<li>There exist some shortcuts to reorder the parameter in VS but ii didn’t work for me and even if it work, We need to select each AreEqual method and apply those shortcut.</li>\n</ul>\n<h5 id=\"More-Reference\"><a href=\"#More-Reference\" class=\"headerlink\" title=\"More Reference:\"></a>More Reference:</h5><blockquote>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/2k3te2cs.aspx\" target=\"_blank\" rel=\"external\">Using Regular Expressions in Visual Studio</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms243413.aspx\" target=\"_blank\" rel=\"external\">Assert.AreEqual Method (Object, Object) (Microsoft.VisualStudio.TestTools.UnitTesting)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3292292/is-there-a-shortcut-to-swap-reorder-parameters-in-visual-studio-ide\" target=\"_blank\" rel=\"external\">shortcut to swap/reorder parameters in vs?</a></li>\n</ul>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/GenericsInDotNet/boxing.png","slug":"boxing.png","post":"ckeicscis000enncvhet2jj02","modified":0,"renderable":0},{"_id":"source/_posts/hello-2015/post-bg-2015.jpg","slug":"post-bg-2015.jpg","post":"ckeicsck4000tnncvt21ntk0e","modified":0,"renderable":0},{"_id":"source/_posts/Git-Basic-Commands/git.png","slug":"git.png","post":"ckeicsciu000gnncvglq689d9","modified":0,"renderable":0},{"_id":"source/_posts/Revert-A-Commit/git.png","slug":"git.png","post":"ckeicscix000inncvwpyn9suv","modified":0,"renderable":0},{"_id":"source/_posts/FSharpMentorship-1/FSharpInViolate.png","slug":"FSharpInViolate.png","post":"ckeicscid0008nncv7tgj43hx","modified":0,"renderable":0},{"_id":"source/_posts/GSoC-2020/llvm.png","slug":"llvm.png","post":"ckeicscig000anncvni9aybye","modified":0,"renderable":0},{"_id":"source/_posts/FSharpMentorship-2/FSharpInViolate.png","slug":"FSharpInViolate.png","post":"ckeicscij000cnncvrrxngc87","modified":0,"renderable":0},{"_id":"source/_posts/Revert-A-Commit/Git-Logo.jpg","slug":"Git-Logo.jpg","post":"ckeicscix000inncvwpyn9suv","modified":0,"renderable":0},{"_id":"source/_posts/Script/Notifiaction.png","slug":"Notifiaction.png","post":"ckeicsciz000knncvdz85ea2m","modified":0,"renderable":0},{"_id":"source/_posts/Script/StandUp_760_348.png","slug":"StandUp_760_348.png","post":"ckeicsciz000knncvdz85ea2m","modified":0,"renderable":0},{"_id":"source/_posts/build-llvm/llvm.png","slug":"llvm.png","post":"ckeicscjd000pnncvdnelnzve","modified":0,"renderable":0},{"_id":"source/_posts/build-llvm/report.png","slug":"report.png","post":"ckeicscjd000pnncvdnelnzve","modified":0,"renderable":0},{"_id":"source/_posts/FSharpDotNetAndMac/VSCode.png","slug":"VSCode.png","post":"ckeicscht0006nncvd6h4v2j4","modified":0,"renderable":0},{"_id":"source/_posts/FSharpDotNetAndMac/fsharporg.png","slug":"fsharporg.png","post":"ckeicscht0006nncvd6h4v2j4","modified":0,"renderable":0},{"_id":"source/_posts/FSharpDotNetAndMac/run_app.png","slug":"run_app.png","post":"ckeicscht0006nncvd6h4v2j4","modified":0,"renderable":0},{"_id":"source/_posts/AssemblerAndLinker/Assembly.jpg","slug":"Assembly.jpg","post":"ckeicschy0007nncvia0vwbht","modified":0,"renderable":0},{"_id":"source/_posts/AssemblerAndLinker/Compiler.png","slug":"Compiler.png","post":"ckeicschy0007nncvia0vwbht","modified":0,"renderable":0},{"_id":"source/_posts/AssemblerAndLinker/PE_Windows.PNG","slug":"PE_Windows.PNG","post":"ckeicschy0007nncvia0vwbht","modified":0,"renderable":0},{"_id":"source/_posts/UnBlockDllExtension/NoAccessError.png","slug":"NoAccessError.png","post":"ckeicscj9000nnncv15pl35po","modified":0,"renderable":0},{"_id":"source/_posts/UnBlockDllExtension/ResultAfterUnblocking.png","slug":"ResultAfterUnblocking.png","post":"ckeicscj9000nnncv15pl35po","modified":0,"renderable":0},{"_id":"source/_posts/UnBlockDllExtension/UnBlockMenuItem.png","slug":"UnBlockMenuItem.png","post":"ckeicscj9000nnncv15pl35po","modified":0,"renderable":0},{"_id":"source/_posts/UnBlockDllExtension/vs.png","slug":"vs.png","post":"ckeicscj9000nnncv15pl35po","modified":0,"renderable":0},{"_id":"source/_posts/vs-regex/RegEx.png","slug":"RegEx.png","post":"ckeicsck9000wnncv5vw28dne","modified":0,"renderable":0},{"_id":"source/_posts/vs-regex/after.png","slug":"after.png","post":"ckeicsck9000wnncv5vw28dne","modified":0,"renderable":0},{"_id":"source/_posts/vs-regex/before.png","slug":"before.png","post":"ckeicsck9000wnncv5vw28dne","modified":0,"renderable":0},{"_id":"source/_posts/vs-regex/vs.png","slug":"vs.png","post":"ckeicsck9000wnncv5vw28dne","modified":0,"renderable":0},{"_id":"source/_posts/GenericsInDotNet/BeforeGenerics.png","slug":"BeforeGenerics.png","post":"ckeicscis000enncvhet2jj02","modified":0,"renderable":0},{"_id":"source/_posts/GenericsInDotNet/Goal_Clarity.png","slug":"Goal_Clarity.png","post":"ckeicscis000enncvhet2jj02","modified":0,"renderable":0},{"_id":"source/_posts/GenericsInDotNet/Goal_Expressivity.png","slug":"Goal_Expressivity.png","post":"ckeicscis000enncvhet2jj02","modified":0,"renderable":0},{"_id":"source/_posts/GenericsInDotNet/Goal_Safety.png","slug":"Goal_Safety.png","post":"ckeicscis000enncvhet2jj02","modified":0,"renderable":0},{"_id":"source/_posts/GenericsInDotNet/dotnet.jpg","slug":"dotnet.jpg","post":"ckeicscis000enncvhet2jj02","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/llvm.png","slug":"llvm.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/get.png","slug":"get.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/notetag.png","slug":"notetag.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/llvm_1.png","slug":"llvm_1.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/llvm_2.png","slug":"llvm_2.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/llvm_3.png","slug":"llvm_3.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/wk_1.png","slug":"wk_1.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/wk_2.png","slug":"wk_2.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/wk_3.png","slug":"wk_3.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/wk_4.png","slug":"wk_4.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/ntbefore.png","slug":"ntbefore.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0},{"_id":"source/_posts/gsoc-report/ntafter.png","slug":"ntafter.png","post":"ckeicscjg000snncvo1n9rcgt","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckeicscid0008nncv7tgj43hx","tag_id":"ckeicschs0005nncv2715p3ql","_id":"ckeicscii000bnncvcft2xxmt"},{"post_id":"ckeicscij000cnncvrrxngc87","tag_id":"ckeicschs0005nncv2715p3ql","_id":"ckeicsciu000fnncvo5wy7g70"},{"post_id":"ckeicsch70002nncvmf5f06bm","tag_id":"ckeicschs0005nncv2715p3ql","_id":"ckeicsciy000jnncvot6l0b1l"},{"post_id":"ckeicsch70002nncvmf5f06bm","tag_id":"ckeicscif0009nncvnn45vur3","_id":"ckeicscj8000lnncvcqmtt77c"},{"post_id":"ckeicsch70002nncvmf5f06bm","tag_id":"ckeicsciq000dnncvik4e3x5m","_id":"ckeicscjc000onncvqxs2ng91"},{"post_id":"ckeicsche0004nncvfml6sjdv","tag_id":"ckeicsciw000hnncvk9hwngaj","_id":"ckeicscjf000qnncvgg1nkexm"},{"post_id":"ckeicscht0006nncvd6h4v2j4","tag_id":"ckeicschs0005nncv2715p3ql","_id":"ckeicsckb000ynncvzakqzl81"},{"post_id":"ckeicscht0006nncvd6h4v2j4","tag_id":"ckeicscif0009nncvnn45vur3","_id":"ckeicsckc000znncvl94wby5g"},{"post_id":"ckeicscht0006nncvd6h4v2j4","tag_id":"ckeicsciq000dnncvik4e3x5m","_id":"ckeicsckl0011nncv8ooqwutl"},{"post_id":"ckeicschy0007nncvia0vwbht","tag_id":"ckeicscka000xnncv6mheb51h","_id":"ckeicsckq0014nncvhx168q0w"},{"post_id":"ckeicschy0007nncvia0vwbht","tag_id":"ckeicsckc0010nncv2cx5cl8a","_id":"ckeicsckq0015nncvxwc0pyra"},{"post_id":"ckeicschy0007nncvia0vwbht","tag_id":"ckeicsckl0012nncvc4fveawn","_id":"ckeicsckr0017nncv09p9peqs"},{"post_id":"ckeicscig000anncvni9aybye","tag_id":"ckeicsckm0013nncvi8xi17vo","_id":"ckeicscku001anncvq7spqlmu"},{"post_id":"ckeicscig000anncvni9aybye","tag_id":"ckeicsckq0016nncvu6vparxp","_id":"ckeicscku001bnncvkmqx202l"},{"post_id":"ckeicscig000anncvni9aybye","tag_id":"ckeicsckr0018nncvd3o0ytro","_id":"ckeicsckv001dnncvmip2tj3g"},{"post_id":"ckeicscis000enncvhet2jj02","tag_id":"ckeicscks0019nncvmrbgnxfo","_id":"ckeicsckw001fnncvekkahfdl"},{"post_id":"ckeicscis000enncvhet2jj02","tag_id":"ckeicsckv001cnncvg0jnt8pw","_id":"ckeicsckw001gnncve7dchu98"},{"post_id":"ckeicsciu000gnncvglq689d9","tag_id":"ckeicsckv001enncvf2fx359i","_id":"ckeicsckx001inncvwz8waqe3"},{"post_id":"ckeicscix000inncvwpyn9suv","tag_id":"ckeicsckv001enncvf2fx359i","_id":"ckeicsckz001lnncv0gq34c6e"},{"post_id":"ckeicscix000inncvwpyn9suv","tag_id":"ckeicscky001jnncvr7by87zh","_id":"ckeicsckz001mnncvd9i1zlxu"},{"post_id":"ckeicsciz000knncvdz85ea2m","tag_id":"ckeicscky001knncv9hyaxc8z","_id":"ckeicscle001pnncvyc6qkpr6"},{"post_id":"ckeicsciz000knncvdz85ea2m","tag_id":"ckeicscld001nnncv8tbc7v1y","_id":"ckeicsclf001qnncv0m5oc5qs"},{"post_id":"ckeicscj9000nnncv15pl35po","tag_id":"ckeicscld001onncv3y18wtp6","_id":"ckeicsclg001tnncvdi0ng1t7"},{"post_id":"ckeicscj9000nnncv15pl35po","tag_id":"ckeicsclf001rnncv5fee3maw","_id":"ckeicsclg001unncv8mj2mffo"},{"post_id":"ckeicscjd000pnncvdnelnzve","tag_id":"ckeicsckm0013nncvi8xi17vo","_id":"ckeicsclk001ynncv4sqgxi9b"},{"post_id":"ckeicscjd000pnncvdnelnzve","tag_id":"ckeicsckq0016nncvu6vparxp","_id":"ckeicsclk001znncvc4fip0h0"},{"post_id":"ckeicscjd000pnncvdnelnzve","tag_id":"ckeicsckr0018nncvd3o0ytro","_id":"ckeicscll0021nncvl37tj1q3"},{"post_id":"ckeicsck4000tnncvt21ntk0e","tag_id":"ckeicsclj001xnncv93coxgua","_id":"ckeicscll0022nncvt57ib8e0"},{"post_id":"ckeicsck7000vnncvsbyn92li","tag_id":"ckeicsclk0020nncvqw7c4e4x","_id":"ckeicsclm0024nncvehmnc7sm"},{"post_id":"ckeicsck9000wnncv5vw28dne","tag_id":"ckeicscll0023nncvpwma1frh","_id":"ckeicsclp0026nncvn0s2xu5r"},{"post_id":"ckeicsck9000wnncv5vw28dne","tag_id":"ckeicsclm0025nncvkly8lt9q","_id":"ckeicsclq0027nncv13g74gee"},{"post_id":"ckeicscjg000snncvo1n9rcgt","tag_id":"ckeicsckm0013nncvi8xi17vo","_id":"ckeidjsnu0000jicvboialrdn"},{"post_id":"ckeicscjg000snncvo1n9rcgt","tag_id":"ckeicsckq0016nncvu6vparxp","_id":"ckeidjsnv0001jicvwztqf1kq"},{"post_id":"ckeicscjg000snncvo1n9rcgt","tag_id":"ckeid43x60000h3cvj067efqf","_id":"ckeidjsnv0002jicvvjcdkb4h"},{"post_id":"ckeicscjg000snncvo1n9rcgt","tag_id":"ckeicsckr0018nncvd3o0ytro","_id":"ckeidjsnv0003jicv3nwrlrdb"}],"Tag":[{"name":"F#","_id":"ckeicschs0005nncv2715p3ql"},{"name":"Mac","_id":"ckeicscif0009nncvnn45vur3"},{"name":".NET Core","_id":"ckeicsciq000dnncvik4e3x5m"},{"name":"git","_id":"ckeicsciw000hnncvk9hwngaj"},{"name":"Compiler","_id":"ckeicscka000xnncv6mheb51h"},{"name":"Assembler","_id":"ckeicsckc0010nncv2cx5cl8a"},{"name":"Linker","_id":"ckeicsckl0012nncvc4fveawn"},{"name":"LLVM","_id":"ckeicsckm0013nncvi8xi17vo"},{"name":"Clang","_id":"ckeicsckq0016nncvu6vparxp"},{"name":"Static-Analysis","_id":"ckeicsckr0018nncvd3o0ytro"},{"name":".NET","_id":"ckeicscks0019nncvmrbgnxfo"},{"name":"C#","_id":"ckeicsckv001cnncvg0jnt8pw"},{"name":"Git","_id":"ckeicsckv001enncvf2fx359i"},{"name":"Version Control","_id":"ckeicscky001jnncvr7by87zh"},{"name":"Powershell","_id":"ckeicscky001knncv9hyaxc8z"},{"name":"Scripting","_id":"ckeicscld001nnncv8tbc7v1y"},{"name":"VisualStdio","_id":"ckeicscld001onncv3y18wtp6"},{"name":"Extension","_id":"ckeicsclf001rnncv5fee3maw"},{"name":"random","_id":"ckeicsclj001xnncv93coxgua"},{"name":"vim","_id":"ckeicsclk0020nncvqw7c4e4x"},{"name":"VisualStudio","_id":"ckeicscll0023nncvpwma1frh"},{"name":"RegEx","_id":"ckeicsclm0025nncvkly8lt9q"},{"name":"GSoC2020","_id":"ckeid43x60000h3cvj067efqf"}]}}